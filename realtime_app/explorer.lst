
explorer.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	98 12 00 10 eb 31 00 00 00 00 00 00 00 00 00 00     .....1..........
      10:	e9 31 00 00 e9 31 00 00 e9 31 00 00 00 00 00 00     .1...1...1......
	...
      2c:	6d 29 00 00 e9 31 00 00 00 00 00 00 25 2a 00 00     m)...1......%*..
      3c:	75 2a 00 00 e9 31 00 00 e9 31 00 00 e9 31 00 00     u*...1...1...1..
      4c:	e9 31 00 00 e9 31 00 00 e9 31 00 00 e9 31 00 00     .1...1...1...1..
      5c:	e9 31 00 00 e9 31 00 00 e9 31 00 00 e9 31 00 00     .1...1...1...1..
      6c:	e9 31 00 00 e9 31 00 00 e9 31 00 00 e9 31 00 00     .1...1...1...1..
      7c:	e9 31 00 00 e9 31 00 00 e9 31 00 00 e9 31 00 00     .1...1...1...1..
      8c:	e9 31 00 00 e9 31 00 00 9f 2e 00 00 e9 31 00 00     .1...1.......1..
      9c:	e9 31 00 00 e9 31 00 00 e9 31 00 00 e9 31 00 00     .1...1...1...1..
      ac:	e9 31 00 00 e9 31 00 00 e9 31 00 00 e9 31 00 00     .1...1...1...1..
      bc:	e9 31 00 00 e9 31 00 00                             .1...1..

000000c4 <__do_global_dtors_aux>:
      c4:	b510      	push	{r4, lr}
      c6:	4c05      	ldr	r4, [pc, #20]	; (dc <__do_global_dtors_aux+0x18>)
      c8:	7823      	ldrb	r3, [r4, #0]
      ca:	b933      	cbnz	r3, da <__do_global_dtors_aux+0x16>
      cc:	4b04      	ldr	r3, [pc, #16]	; (e0 <__do_global_dtors_aux+0x1c>)
      ce:	b113      	cbz	r3, d6 <__do_global_dtors_aux+0x12>
      d0:	4804      	ldr	r0, [pc, #16]	; (e4 <__do_global_dtors_aux+0x20>)
      d2:	f3af 8000 	nop.w
      d6:	2301      	movs	r3, #1
      d8:	7023      	strb	r3, [r4, #0]
      da:	bd10      	pop	{r4, pc}
      dc:	10001298 	.word	0x10001298
      e0:	00000000 	.word	0x00000000
      e4:	0000a9a8 	.word	0x0000a9a8

000000e8 <frame_dummy>:
      e8:	4b0c      	ldr	r3, [pc, #48]	; (11c <frame_dummy+0x34>)
      ea:	b143      	cbz	r3, fe <frame_dummy+0x16>
      ec:	480c      	ldr	r0, [pc, #48]	; (120 <frame_dummy+0x38>)
      ee:	b510      	push	{r4, lr}
      f0:	490c      	ldr	r1, [pc, #48]	; (124 <frame_dummy+0x3c>)
      f2:	f3af 8000 	nop.w
      f6:	480c      	ldr	r0, [pc, #48]	; (128 <frame_dummy+0x40>)
      f8:	6803      	ldr	r3, [r0, #0]
      fa:	b923      	cbnz	r3, 106 <frame_dummy+0x1e>
      fc:	bd10      	pop	{r4, pc}
      fe:	480a      	ldr	r0, [pc, #40]	; (128 <frame_dummy+0x40>)
     100:	6803      	ldr	r3, [r0, #0]
     102:	b933      	cbnz	r3, 112 <frame_dummy+0x2a>
     104:	4770      	bx	lr
     106:	4b09      	ldr	r3, [pc, #36]	; (12c <frame_dummy+0x44>)
     108:	2b00      	cmp	r3, #0
     10a:	d0f7      	beq.n	fc <frame_dummy+0x14>
     10c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     110:	4718      	bx	r3
     112:	4b06      	ldr	r3, [pc, #24]	; (12c <frame_dummy+0x44>)
     114:	2b00      	cmp	r3, #0
     116:	d0f5      	beq.n	104 <frame_dummy+0x1c>
     118:	4718      	bx	r3
     11a:	bf00      	nop
     11c:	00000000 	.word	0x00000000
     120:	0000a9a8 	.word	0x0000a9a8
     124:	1000129c 	.word	0x1000129c
     128:	10000a94 	.word	0x10000a94
     12c:	00000000 	.word	0x00000000

00000130 <_mainCRTStartup>:
     130:	4b15      	ldr	r3, [pc, #84]	; (188 <_mainCRTStartup+0x58>)
     132:	2b00      	cmp	r3, #0
     134:	bf08      	it	eq
     136:	4b13      	ldreq	r3, [pc, #76]	; (184 <_mainCRTStartup+0x54>)
     138:	469d      	mov	sp, r3
     13a:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
     13e:	2100      	movs	r1, #0
     140:	468b      	mov	fp, r1
     142:	460f      	mov	r7, r1
     144:	4813      	ldr	r0, [pc, #76]	; (194 <_mainCRTStartup+0x64>)
     146:	4a14      	ldr	r2, [pc, #80]	; (198 <_mainCRTStartup+0x68>)
     148:	1a12      	subs	r2, r2, r0
     14a:	f005 fb0d 	bl	5768 <memset>
     14e:	4b0f      	ldr	r3, [pc, #60]	; (18c <_mainCRTStartup+0x5c>)
     150:	2b00      	cmp	r3, #0
     152:	d000      	beq.n	156 <_mainCRTStartup+0x26>
     154:	4798      	blx	r3
     156:	4b0e      	ldr	r3, [pc, #56]	; (190 <_mainCRTStartup+0x60>)
     158:	2b00      	cmp	r3, #0
     15a:	d000      	beq.n	15e <_mainCRTStartup+0x2e>
     15c:	4798      	blx	r3
     15e:	2000      	movs	r0, #0
     160:	2100      	movs	r1, #0
     162:	0004      	movs	r4, r0
     164:	000d      	movs	r5, r1
     166:	480d      	ldr	r0, [pc, #52]	; (19c <_mainCRTStartup+0x6c>)
     168:	2800      	cmp	r0, #0
     16a:	d002      	beq.n	172 <_mainCRTStartup+0x42>
     16c:	480c      	ldr	r0, [pc, #48]	; (1a0 <_mainCRTStartup+0x70>)
     16e:	f006 ff17 	bl	6fa0 <atexit>
     172:	f005 fa5b 	bl	562c <__libc_init_array>
     176:	0020      	movs	r0, r4
     178:	0029      	movs	r1, r5
     17a:	f002 ff71 	bl	3060 <main>
     17e:	f005 fa45 	bl	560c <exit>
     182:	bf00      	nop
     184:	00080000 	.word	0x00080000
     188:	10008000 	.word	0x10008000
	...
     194:	10001298 	.word	0x10001298
     198:	100034f0 	.word	0x100034f0
     19c:	00006fa1 	.word	0x00006fa1
     1a0:	00007f1d 	.word	0x00007f1d

000001a4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     1a4:	f100 0308 	add.w	r3, r0, #8
     1a8:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     1aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     1ae:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     1b0:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     1b2:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     1b4:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     1b6:	6003      	str	r3, [r0, #0]
     1b8:	4770      	bx	lr

000001ba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     1ba:	2300      	movs	r3, #0
     1bc:	6103      	str	r3, [r0, #16]
     1be:	4770      	bx	lr

000001c0 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
     1c0:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     1c2:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
     1c4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     1c6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     1c8:	689a      	ldr	r2, [r3, #8]
     1ca:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
     1cc:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
     1ce:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
     1d0:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
     1d2:	3301      	adds	r3, #1
     1d4:	6003      	str	r3, [r0, #0]
     1d6:	4770      	bx	lr

000001d8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     1d8:	680a      	ldr	r2, [r1, #0]
{
     1da:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     1dc:	1c53      	adds	r3, r2, #1
     1de:	d10a      	bne.n	1f6 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     1e0:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     1e2:	685a      	ldr	r2, [r3, #4]
     1e4:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     1e6:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
     1e8:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
     1ea:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
     1ec:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
     1ee:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
     1f0:	3301      	adds	r3, #1
     1f2:	6003      	str	r3, [r0, #0]
     1f4:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     1f6:	f100 0308 	add.w	r3, r0, #8
     1fa:	685c      	ldr	r4, [r3, #4]
     1fc:	6825      	ldr	r5, [r4, #0]
     1fe:	42aa      	cmp	r2, r5
     200:	d3ef      	bcc.n	1e2 <vListInsert+0xa>
     202:	4623      	mov	r3, r4
     204:	e7f9      	b.n	1fa <vListInsert+0x22>

00000206 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     206:	6841      	ldr	r1, [r0, #4]
     208:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     20a:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     20c:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     20e:	6882      	ldr	r2, [r0, #8]
     210:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     212:	6859      	ldr	r1, [r3, #4]
     214:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     216:	bf08      	it	eq
     218:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     21a:	2200      	movs	r2, #0
     21c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
     21e:	6818      	ldr	r0, [r3, #0]
     220:	3801      	subs	r0, #1
     222:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
     224:	4770      	bx	lr
	...

00000228 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
     228:	b570      	push	{r4, r5, r6, lr}
     22a:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
     22c:	f002 fbc4 	bl	29b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
     230:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     234:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
     238:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
     23a:	2d00      	cmp	r5, #0
     23c:	dc14      	bgt.n	268 <prvUnlockQueue+0x40>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
     23e:	23ff      	movs	r3, #255	; 0xff
     240:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
     244:	f002 fbda 	bl	29fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
     248:	f002 fbb6 	bl	29b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
     24c:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     250:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
     254:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
     256:	2d00      	cmp	r5, #0
     258:	dc12      	bgt.n	280 <prvUnlockQueue+0x58>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
     25a:	23ff      	movs	r3, #255	; 0xff
     25c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
     260:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
     264:	f002 bbca 	b.w	29fc <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     268:	6a63      	ldr	r3, [r4, #36]	; 0x24
     26a:	2b00      	cmp	r3, #0
     26c:	d0e7      	beq.n	23e <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     26e:	4630      	mov	r0, r6
     270:	f001 faaa 	bl	17c8 <xTaskRemoveFromEventList>
     274:	b108      	cbz	r0, 27a <prvUnlockQueue+0x52>
						vTaskMissedYield();
     276:	f001 fb63 	bl	1940 <vTaskMissedYield>
     27a:	3d01      	subs	r5, #1
     27c:	b26d      	sxtb	r5, r5
     27e:	e7dc      	b.n	23a <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     280:	6923      	ldr	r3, [r4, #16]
     282:	2b00      	cmp	r3, #0
     284:	d0e9      	beq.n	25a <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     286:	4630      	mov	r0, r6
     288:	f001 fa9e 	bl	17c8 <xTaskRemoveFromEventList>
     28c:	b108      	cbz	r0, 292 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
     28e:	f001 fb57 	bl	1940 <vTaskMissedYield>
     292:	3d01      	subs	r5, #1
     294:	b26d      	sxtb	r5, r5
     296:	e7de      	b.n	256 <prvUnlockQueue+0x2e>

00000298 <xQueueGenericReset>:
{
     298:	b538      	push	{r3, r4, r5, lr}
     29a:	460d      	mov	r5, r1
	configASSERT( pxQueue );
     29c:	4604      	mov	r4, r0
     29e:	b940      	cbnz	r0, 2b2 <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
     2a0:	f04f 0328 	mov.w	r3, #40	; 0x28
     2a4:	f383 8811 	msr	BASEPRI, r3
     2a8:	f3bf 8f6f 	isb	sy
     2ac:	f3bf 8f4f 	dsb	sy
     2b0:	e7fe      	b.n	2b0 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
     2b2:	f002 fb81 	bl	29b8 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
     2b6:	6c20      	ldr	r0, [r4, #64]	; 0x40
     2b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     2ba:	6822      	ldr	r2, [r4, #0]
     2bc:	4343      	muls	r3, r0
     2be:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
     2c0:	1a1b      	subs	r3, r3, r0
     2c2:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
     2c4:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
     2c6:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
     2c8:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
     2ca:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
     2cc:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
     2ce:	60a2      	str	r2, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
     2d0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
     2d4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
     2d8:	b995      	cbnz	r5, 300 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     2da:	6923      	ldr	r3, [r4, #16]
     2dc:	b163      	cbz	r3, 2f8 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     2de:	f104 0010 	add.w	r0, r4, #16
     2e2:	f001 fa71 	bl	17c8 <xTaskRemoveFromEventList>
     2e6:	b138      	cbz	r0, 2f8 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
     2e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     2ec:	4b09      	ldr	r3, [pc, #36]	; (314 <xQueueGenericReset+0x7c>)
     2ee:	601a      	str	r2, [r3, #0]
     2f0:	f3bf 8f4f 	dsb	sy
     2f4:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
     2f8:	f002 fb80 	bl	29fc <vPortExitCritical>
}
     2fc:	2001      	movs	r0, #1
     2fe:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
     300:	f104 0010 	add.w	r0, r4, #16
     304:	f7ff ff4e 	bl	1a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
     308:	f104 0024 	add.w	r0, r4, #36	; 0x24
     30c:	f7ff ff4a 	bl	1a4 <vListInitialise>
     310:	e7f2      	b.n	2f8 <xQueueGenericReset+0x60>
     312:	bf00      	nop
     314:	e000ed04 	.word	0xe000ed04

00000318 <xQueueGenericCreate>:
	{
     318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     31a:	460d      	mov	r5, r1
     31c:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
     31e:	4606      	mov	r6, r0
     320:	b940      	cbnz	r0, 334 <xQueueGenericCreate+0x1c>
     322:	f04f 0328 	mov.w	r3, #40	; 0x28
     326:	f383 8811 	msr	BASEPRI, r3
     32a:	f3bf 8f6f 	isb	sy
     32e:	f3bf 8f4f 	dsb	sy
     332:	e7fe      	b.n	332 <xQueueGenericCreate+0x1a>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     334:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
     336:	3050      	adds	r0, #80	; 0x50
     338:	f002 fc32 	bl	2ba0 <pvPortMalloc>
		if( pxNewQueue != NULL )
     33c:	4604      	mov	r4, r0
     33e:	b148      	cbz	r0, 354 <xQueueGenericCreate+0x3c>
	if( uxItemSize == ( UBaseType_t ) 0 )
     340:	b955      	cbnz	r5, 358 <xQueueGenericCreate+0x40>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
     342:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
     344:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
     346:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
     348:	2101      	movs	r1, #1
     34a:	4620      	mov	r0, r4
     34c:	f7ff ffa4 	bl	298 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
     350:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
     354:	4620      	mov	r0, r4
     356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
     358:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
     35c:	6003      	str	r3, [r0, #0]
     35e:	e7f1      	b.n	344 <xQueueGenericCreate+0x2c>

00000360 <xQueueCreateCountingSemaphore>:
	{
     360:	b510      	push	{r4, lr}
     362:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
     364:	b940      	cbnz	r0, 378 <xQueueCreateCountingSemaphore+0x18>
     366:	f04f 0328 	mov.w	r3, #40	; 0x28
     36a:	f383 8811 	msr	BASEPRI, r3
     36e:	f3bf 8f6f 	isb	sy
     372:	f3bf 8f4f 	dsb	sy
     376:	e7fe      	b.n	376 <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
     378:	4288      	cmp	r0, r1
     37a:	d208      	bcs.n	38e <xQueueCreateCountingSemaphore+0x2e>
     37c:	f04f 0328 	mov.w	r3, #40	; 0x28
     380:	f383 8811 	msr	BASEPRI, r3
     384:	f3bf 8f6f 	isb	sy
     388:	f3bf 8f4f 	dsb	sy
     38c:	e7fe      	b.n	38c <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
     38e:	2202      	movs	r2, #2
     390:	2100      	movs	r1, #0
     392:	f7ff ffc1 	bl	318 <xQueueGenericCreate>
		if( xHandle != NULL )
     396:	b100      	cbz	r0, 39a <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
     398:	6384      	str	r4, [r0, #56]	; 0x38
	}
     39a:	bd10      	pop	{r4, pc}

0000039c <xQueueGenericSend>:
{
     39c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
     3a0:	4689      	mov	r9, r1
     3a2:	9201      	str	r2, [sp, #4]
     3a4:	461f      	mov	r7, r3
	configASSERT( pxQueue );
     3a6:	4604      	mov	r4, r0
     3a8:	b940      	cbnz	r0, 3bc <xQueueGenericSend+0x20>
     3aa:	f04f 0328 	mov.w	r3, #40	; 0x28
     3ae:	f383 8811 	msr	BASEPRI, r3
     3b2:	f3bf 8f6f 	isb	sy
     3b6:	f3bf 8f4f 	dsb	sy
     3ba:	e7fe      	b.n	3ba <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
     3bc:	2900      	cmp	r1, #0
     3be:	f040 8088 	bne.w	4d2 <xQueueGenericSend+0x136>
     3c2:	6c03      	ldr	r3, [r0, #64]	; 0x40
     3c4:	2b00      	cmp	r3, #0
     3c6:	f000 8084 	beq.w	4d2 <xQueueGenericSend+0x136>
     3ca:	f04f 0328 	mov.w	r3, #40	; 0x28
     3ce:	f383 8811 	msr	BASEPRI, r3
     3d2:	f3bf 8f6f 	isb	sy
     3d6:	f3bf 8f4f 	dsb	sy
     3da:	e7fe      	b.n	3da <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
     3dc:	9e01      	ldr	r6, [sp, #4]
     3de:	2e00      	cmp	r6, #0
     3e0:	f000 8082 	beq.w	4e8 <xQueueGenericSend+0x14c>
     3e4:	f04f 0328 	mov.w	r3, #40	; 0x28
     3e8:	f383 8811 	msr	BASEPRI, r3
     3ec:	f3bf 8f6f 	isb	sy
     3f0:	f3bf 8f4f 	dsb	sy
     3f4:	e7fe      	b.n	3f4 <xQueueGenericSend+0x58>
				if( xTicksToWait == ( TickType_t ) 0 )
     3f6:	9d01      	ldr	r5, [sp, #4]
     3f8:	b91d      	cbnz	r5, 402 <xQueueGenericSend+0x66>
					taskEXIT_CRITICAL();
     3fa:	f002 faff 	bl	29fc <vPortExitCritical>
			return errQUEUE_FULL;
     3fe:	2000      	movs	r0, #0
     400:	e058      	b.n	4b4 <xQueueGenericSend+0x118>
				else if( xEntryTimeSet == pdFALSE )
     402:	b916      	cbnz	r6, 40a <xQueueGenericSend+0x6e>
					vTaskSetTimeOutState( &xTimeOut );
     404:	a802      	add	r0, sp, #8
     406:	f001 fa55 	bl	18b4 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
     40a:	f002 faf7 	bl	29fc <vPortExitCritical>
		vTaskSuspendAll();
     40e:	f000 ff05 	bl	121c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
     412:	f002 fad1 	bl	29b8 <vPortEnterCritical>
     416:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
     41a:	2bff      	cmp	r3, #255	; 0xff
     41c:	bf08      	it	eq
     41e:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
     422:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
     426:	2bff      	cmp	r3, #255	; 0xff
     428:	bf08      	it	eq
     42a:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
     42e:	f002 fae5 	bl	29fc <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     432:	a901      	add	r1, sp, #4
     434:	a802      	add	r0, sp, #8
     436:	f001 fa4b 	bl	18d0 <xTaskCheckForTimeOut>
     43a:	2800      	cmp	r0, #0
     43c:	d143      	bne.n	4c6 <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
     43e:	f002 fabb 	bl	29b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
     442:	6ba6      	ldr	r6, [r4, #56]	; 0x38
     444:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
     446:	f002 fad9 	bl	29fc <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
     44a:	42ae      	cmp	r6, r5
     44c:	d135      	bne.n	4ba <xQueueGenericSend+0x11e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
     44e:	9901      	ldr	r1, [sp, #4]
     450:	f104 0010 	add.w	r0, r4, #16
     454:	f001 f954 	bl	1700 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
     458:	4620      	mov	r0, r4
     45a:	f7ff fee5 	bl	228 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
     45e:	f000 ff7f 	bl	1360 <xTaskResumeAll>
     462:	b938      	cbnz	r0, 474 <xQueueGenericSend+0xd8>
					portYIELD_WITHIN_API();
     464:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     468:	f8ca 3000 	str.w	r3, [sl]
     46c:	f3bf 8f4f 	dsb	sy
     470:	f3bf 8f6f 	isb	sy
     474:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
     476:	f002 fa9f 	bl	29b8 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
     47a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
     47c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     47e:	429a      	cmp	r2, r3
     480:	d301      	bcc.n	486 <xQueueGenericSend+0xea>
     482:	2f02      	cmp	r7, #2
     484:	d1b7      	bne.n	3f6 <xQueueGenericSend+0x5a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
     486:	463a      	mov	r2, r7
     488:	4649      	mov	r1, r9
     48a:	4620      	mov	r0, r4
     48c:	f000 fb5c 	bl	b48 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     490:	6a63      	ldr	r3, [r4, #36]	; 0x24
     492:	b11b      	cbz	r3, 49c <xQueueGenericSend+0x100>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     494:	f104 0024 	add.w	r0, r4, #36	; 0x24
     498:	f001 f996 	bl	17c8 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
     49c:	b138      	cbz	r0, 4ae <xQueueGenericSend+0x112>
						queueYIELD_IF_USING_PREEMPTION();
     49e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     4a2:	4b18      	ldr	r3, [pc, #96]	; (504 <xQueueGenericSend+0x168>)
     4a4:	601a      	str	r2, [r3, #0]
     4a6:	f3bf 8f4f 	dsb	sy
     4aa:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
     4ae:	f002 faa5 	bl	29fc <vPortExitCritical>
				return pdPASS;
     4b2:	2001      	movs	r0, #1
}
     4b4:	b004      	add	sp, #16
     4b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
     4ba:	4620      	mov	r0, r4
     4bc:	f7ff feb4 	bl	228 <prvUnlockQueue>
				( void ) xTaskResumeAll();
     4c0:	f000 ff4e 	bl	1360 <xTaskResumeAll>
     4c4:	e7d6      	b.n	474 <xQueueGenericSend+0xd8>
			prvUnlockQueue( pxQueue );
     4c6:	4620      	mov	r0, r4
     4c8:	f7ff feae 	bl	228 <prvUnlockQueue>
			( void ) xTaskResumeAll();
     4cc:	f000 ff48 	bl	1360 <xTaskResumeAll>
     4d0:	e795      	b.n	3fe <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
     4d2:	2f02      	cmp	r7, #2
     4d4:	d102      	bne.n	4dc <xQueueGenericSend+0x140>
     4d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     4d8:	2b01      	cmp	r3, #1
     4da:	d10a      	bne.n	4f2 <xQueueGenericSend+0x156>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
     4dc:	f001 fafe 	bl	1adc <xTaskGetSchedulerState>
     4e0:	2800      	cmp	r0, #0
     4e2:	f43f af7b 	beq.w	3dc <xQueueGenericSend+0x40>
     4e6:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
     4e8:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
     4ec:	f8df a014 	ldr.w	sl, [pc, #20]	; 504 <xQueueGenericSend+0x168>
     4f0:	e7c1      	b.n	476 <xQueueGenericSend+0xda>
     4f2:	f04f 0328 	mov.w	r3, #40	; 0x28
     4f6:	f383 8811 	msr	BASEPRI, r3
     4fa:	f3bf 8f6f 	isb	sy
     4fe:	f3bf 8f4f 	dsb	sy
     502:	e7fe      	b.n	502 <xQueueGenericSend+0x166>
     504:	e000ed04 	.word	0xe000ed04

00000508 <xQueueCreateMutex>:
	{
     508:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
     50a:	4602      	mov	r2, r0
     50c:	2100      	movs	r1, #0
     50e:	2001      	movs	r0, #1
     510:	f7ff ff02 	bl	318 <xQueueGenericCreate>
		if( pxNewQueue != NULL )
     514:	4604      	mov	r4, r0
     516:	b138      	cbz	r0, 528 <xQueueCreateMutex+0x20>
			pxNewQueue->pxMutexHolder = NULL;
     518:	2300      	movs	r3, #0
     51a:	6043      	str	r3, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
     51c:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
     51e:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
     520:	461a      	mov	r2, r3
     522:	4619      	mov	r1, r3
     524:	f7ff ff3a 	bl	39c <xQueueGenericSend>
	}
     528:	4620      	mov	r0, r4
     52a:	bd10      	pop	{r4, pc}

0000052c <xQueueGiveMutexRecursive>:
	{
     52c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
     52e:	4604      	mov	r4, r0
     530:	b940      	cbnz	r0, 544 <xQueueGiveMutexRecursive+0x18>
     532:	f04f 0328 	mov.w	r3, #40	; 0x28
     536:	f383 8811 	msr	BASEPRI, r3
     53a:	f3bf 8f6f 	isb	sy
     53e:	f3bf 8f4f 	dsb	sy
     542:	e7fe      	b.n	542 <xQueueGiveMutexRecursive+0x16>
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
     544:	6845      	ldr	r5, [r0, #4]
     546:	f001 fac3 	bl	1ad0 <xTaskGetCurrentTaskHandle>
     54a:	4285      	cmp	r5, r0
     54c:	d10a      	bne.n	564 <xQueueGiveMutexRecursive+0x38>
			( pxMutex->u.uxRecursiveCallCount )--;
     54e:	68e3      	ldr	r3, [r4, #12]
     550:	3b01      	subs	r3, #1
     552:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
     554:	b923      	cbnz	r3, 560 <xQueueGiveMutexRecursive+0x34>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
     556:	461a      	mov	r2, r3
     558:	4619      	mov	r1, r3
     55a:	4620      	mov	r0, r4
     55c:	f7ff ff1e 	bl	39c <xQueueGenericSend>
			xReturn = pdPASS;
     560:	2001      	movs	r0, #1
	}
     562:	bd38      	pop	{r3, r4, r5, pc}
			xReturn = pdFAIL;
     564:	2000      	movs	r0, #0
     566:	bd38      	pop	{r3, r4, r5, pc}

00000568 <xQueueGenericSendFromISR>:
{
     568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     56c:	4688      	mov	r8, r1
     56e:	4691      	mov	r9, r2
     570:	461f      	mov	r7, r3
	configASSERT( pxQueue );
     572:	4604      	mov	r4, r0
     574:	b940      	cbnz	r0, 588 <xQueueGenericSendFromISR+0x20>
     576:	f04f 0328 	mov.w	r3, #40	; 0x28
     57a:	f383 8811 	msr	BASEPRI, r3
     57e:	f3bf 8f6f 	isb	sy
     582:	f3bf 8f4f 	dsb	sy
     586:	e7fe      	b.n	586 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
     588:	bb09      	cbnz	r1, 5ce <xQueueGenericSendFromISR+0x66>
     58a:	6c03      	ldr	r3, [r0, #64]	; 0x40
     58c:	b1fb      	cbz	r3, 5ce <xQueueGenericSendFromISR+0x66>
     58e:	f04f 0328 	mov.w	r3, #40	; 0x28
     592:	f383 8811 	msr	BASEPRI, r3
     596:	f3bf 8f6f 	isb	sy
     59a:	f3bf 8f4f 	dsb	sy
     59e:	e7fe      	b.n	59e <xQueueGenericSendFromISR+0x36>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     5a0:	f104 0024 	add.w	r0, r4, #36	; 0x24
     5a4:	f001 f910 	bl	17c8 <xTaskRemoveFromEventList>
     5a8:	2800      	cmp	r0, #0
     5aa:	d034      	beq.n	616 <xQueueGenericSendFromISR+0xae>
							if( pxHigherPriorityTaskWoken != NULL )
     5ac:	f1b9 0f00 	cmp.w	r9, #0
     5b0:	d031      	beq.n	616 <xQueueGenericSendFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
     5b2:	2001      	movs	r0, #1
     5b4:	f8c9 0000 	str.w	r0, [r9]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
     5b8:	f386 8811 	msr	BASEPRI, r6
}
     5bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
     5c0:	3501      	adds	r5, #1
     5c2:	b26d      	sxtb	r5, r5
     5c4:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
     5c8:	e025      	b.n	616 <xQueueGenericSendFromISR+0xae>
			xReturn = errQUEUE_FULL;
     5ca:	2000      	movs	r0, #0
     5cc:	e7f4      	b.n	5b8 <xQueueGenericSendFromISR+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
     5ce:	2f02      	cmp	r7, #2
     5d0:	d102      	bne.n	5d8 <xQueueGenericSendFromISR+0x70>
     5d2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     5d4:	2b01      	cmp	r3, #1
     5d6:	d120      	bne.n	61a <xQueueGenericSendFromISR+0xb2>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
     5d8:	f002 fab6 	bl	2b48 <vPortValidateInterruptPriority>
	__asm volatile
     5dc:	f3ef 8611 	mrs	r6, BASEPRI
     5e0:	f04f 0328 	mov.w	r3, #40	; 0x28
     5e4:	f383 8811 	msr	BASEPRI, r3
     5e8:	f3bf 8f6f 	isb	sy
     5ec:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
     5f0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
     5f2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     5f4:	429a      	cmp	r2, r3
     5f6:	d301      	bcc.n	5fc <xQueueGenericSendFromISR+0x94>
     5f8:	2f02      	cmp	r7, #2
     5fa:	d1e6      	bne.n	5ca <xQueueGenericSendFromISR+0x62>
			const int8_t cTxLock = pxQueue->cTxLock;
     5fc:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
     600:	463a      	mov	r2, r7
			const int8_t cTxLock = pxQueue->cTxLock;
     602:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
     604:	4641      	mov	r1, r8
     606:	4620      	mov	r0, r4
     608:	f000 fa9e 	bl	b48 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
     60c:	1c6b      	adds	r3, r5, #1
     60e:	d1d7      	bne.n	5c0 <xQueueGenericSendFromISR+0x58>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     610:	6a63      	ldr	r3, [r4, #36]	; 0x24
     612:	2b00      	cmp	r3, #0
     614:	d1c4      	bne.n	5a0 <xQueueGenericSendFromISR+0x38>
			xReturn = pdPASS;
     616:	2001      	movs	r0, #1
     618:	e7ce      	b.n	5b8 <xQueueGenericSendFromISR+0x50>
	__asm volatile
     61a:	f04f 0328 	mov.w	r3, #40	; 0x28
     61e:	f383 8811 	msr	BASEPRI, r3
     622:	f3bf 8f6f 	isb	sy
     626:	f3bf 8f4f 	dsb	sy
     62a:	e7fe      	b.n	62a <xQueueGenericSendFromISR+0xc2>

0000062c <xQueueGiveFromISR>:
{
     62c:	b570      	push	{r4, r5, r6, lr}
     62e:	460d      	mov	r5, r1
	configASSERT( pxQueue );
     630:	4604      	mov	r4, r0
     632:	b940      	cbnz	r0, 646 <xQueueGiveFromISR+0x1a>
     634:	f04f 0328 	mov.w	r3, #40	; 0x28
     638:	f383 8811 	msr	BASEPRI, r3
     63c:	f3bf 8f6f 	isb	sy
     640:	f3bf 8f4f 	dsb	sy
     644:	e7fe      	b.n	644 <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
     646:	6c03      	ldr	r3, [r0, #64]	; 0x40
     648:	b143      	cbz	r3, 65c <xQueueGiveFromISR+0x30>
     64a:	f04f 0328 	mov.w	r3, #40	; 0x28
     64e:	f383 8811 	msr	BASEPRI, r3
     652:	f3bf 8f6f 	isb	sy
     656:	f3bf 8f4f 	dsb	sy
     65a:	e7fe      	b.n	65a <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
     65c:	6803      	ldr	r3, [r0, #0]
     65e:	b90b      	cbnz	r3, 664 <xQueueGiveFromISR+0x38>
     660:	6843      	ldr	r3, [r0, #4]
     662:	bb73      	cbnz	r3, 6c2 <xQueueGiveFromISR+0x96>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
     664:	f002 fa70 	bl	2b48 <vPortValidateInterruptPriority>
	__asm volatile
     668:	f3ef 8611 	mrs	r6, BASEPRI
     66c:	f04f 0328 	mov.w	r3, #40	; 0x28
     670:	f383 8811 	msr	BASEPRI, r3
     674:	f3bf 8f6f 	isb	sy
     678:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
     67c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
     67e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     680:	429a      	cmp	r2, r3
     682:	d301      	bcc.n	688 <xQueueGiveFromISR+0x5c>
			xReturn = errQUEUE_FULL;
     684:	2000      	movs	r0, #0
     686:	e014      	b.n	6b2 <xQueueGiveFromISR+0x86>
			const int8_t cTxLock = pxQueue->cTxLock;
     688:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
     68c:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
     68e:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
     690:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
     692:	1c5a      	adds	r2, r3, #1
     694:	d110      	bne.n	6b8 <xQueueGiveFromISR+0x8c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     696:	6a63      	ldr	r3, [r4, #36]	; 0x24
     698:	b90b      	cbnz	r3, 69e <xQueueGiveFromISR+0x72>
			xReturn = pdPASS;
     69a:	2001      	movs	r0, #1
     69c:	e009      	b.n	6b2 <xQueueGiveFromISR+0x86>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     69e:	f104 0024 	add.w	r0, r4, #36	; 0x24
     6a2:	f001 f891 	bl	17c8 <xTaskRemoveFromEventList>
     6a6:	2800      	cmp	r0, #0
     6a8:	d0f7      	beq.n	69a <xQueueGiveFromISR+0x6e>
							if( pxHigherPriorityTaskWoken != NULL )
     6aa:	2d00      	cmp	r5, #0
     6ac:	d0f5      	beq.n	69a <xQueueGiveFromISR+0x6e>
								*pxHigherPriorityTaskWoken = pdTRUE;
     6ae:	2001      	movs	r0, #1
     6b0:	6028      	str	r0, [r5, #0]
	__asm volatile
     6b2:	f386 8811 	msr	BASEPRI, r6
}
     6b6:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
     6b8:	3301      	adds	r3, #1
     6ba:	b25b      	sxtb	r3, r3
     6bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
     6c0:	e7eb      	b.n	69a <xQueueGiveFromISR+0x6e>
	__asm volatile
     6c2:	f04f 0328 	mov.w	r3, #40	; 0x28
     6c6:	f383 8811 	msr	BASEPRI, r3
     6ca:	f3bf 8f6f 	isb	sy
     6ce:	f3bf 8f4f 	dsb	sy
     6d2:	e7fe      	b.n	6d2 <xQueueGiveFromISR+0xa6>

000006d4 <xQueueGenericReceive>:
{
     6d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
     6d8:	4688      	mov	r8, r1
     6da:	9201      	str	r2, [sp, #4]
     6dc:	4699      	mov	r9, r3
	configASSERT( pxQueue );
     6de:	4604      	mov	r4, r0
     6e0:	b940      	cbnz	r0, 6f4 <xQueueGenericReceive+0x20>
     6e2:	f04f 0328 	mov.w	r3, #40	; 0x28
     6e6:	f383 8811 	msr	BASEPRI, r3
     6ea:	f3bf 8f6f 	isb	sy
     6ee:	f3bf 8f4f 	dsb	sy
     6f2:	e7fe      	b.n	6f2 <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
     6f4:	2900      	cmp	r1, #0
     6f6:	f040 80a5 	bne.w	844 <xQueueGenericReceive+0x170>
     6fa:	6c03      	ldr	r3, [r0, #64]	; 0x40
     6fc:	2b00      	cmp	r3, #0
     6fe:	f000 80a1 	beq.w	844 <xQueueGenericReceive+0x170>
     702:	f04f 0328 	mov.w	r3, #40	; 0x28
     706:	f383 8811 	msr	BASEPRI, r3
     70a:	f3bf 8f6f 	isb	sy
     70e:	f3bf 8f4f 	dsb	sy
     712:	e7fe      	b.n	712 <xQueueGenericReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
     714:	9e01      	ldr	r6, [sp, #4]
     716:	2e00      	cmp	r6, #0
     718:	f000 809a 	beq.w	850 <xQueueGenericReceive+0x17c>
     71c:	f04f 0328 	mov.w	r3, #40	; 0x28
     720:	f383 8811 	msr	BASEPRI, r3
     724:	f3bf 8f6f 	isb	sy
     728:	f3bf 8f4f 	dsb	sy
     72c:	e7fe      	b.n	72c <xQueueGenericReceive+0x58>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     72e:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
     730:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     732:	2b00      	cmp	r3, #0
     734:	d06d      	beq.n	812 <xQueueGenericReceive+0x13e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     736:	f104 0024 	add.w	r0, r4, #36	; 0x24
     73a:	e05f      	b.n	7fc <xQueueGenericReceive+0x128>
				if( xTicksToWait == ( TickType_t ) 0 )
     73c:	9d01      	ldr	r5, [sp, #4]
     73e:	b91d      	cbnz	r5, 748 <xQueueGenericReceive+0x74>
					taskEXIT_CRITICAL();
     740:	f002 f95c 	bl	29fc <vPortExitCritical>
				return errQUEUE_EMPTY;
     744:	4628      	mov	r0, r5
     746:	e067      	b.n	818 <xQueueGenericReceive+0x144>
				else if( xEntryTimeSet == pdFALSE )
     748:	b916      	cbnz	r6, 750 <xQueueGenericReceive+0x7c>
					vTaskSetTimeOutState( &xTimeOut );
     74a:	a802      	add	r0, sp, #8
     74c:	f001 f8b2 	bl	18b4 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
     750:	f002 f954 	bl	29fc <vPortExitCritical>
		vTaskSuspendAll();
     754:	f000 fd62 	bl	121c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
     758:	f002 f92e 	bl	29b8 <vPortEnterCritical>
     75c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
     760:	2bff      	cmp	r3, #255	; 0xff
     762:	bf08      	it	eq
     764:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
     768:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
     76c:	2bff      	cmp	r3, #255	; 0xff
     76e:	bf08      	it	eq
     770:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
     774:	f002 f942 	bl	29fc <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     778:	a901      	add	r1, sp, #4
     77a:	a802      	add	r0, sp, #8
     77c:	f001 f8a8 	bl	18d0 <xTaskCheckForTimeOut>
     780:	2800      	cmp	r0, #0
     782:	d152      	bne.n	82a <xQueueGenericReceive+0x156>
	taskENTER_CRITICAL();
     784:	f002 f918 	bl	29b8 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
     788:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
     78a:	f002 f937 	bl	29fc <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     78e:	2d00      	cmp	r5, #0
     790:	d145      	bne.n	81e <xQueueGenericReceive+0x14a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     792:	6823      	ldr	r3, [r4, #0]
     794:	b933      	cbnz	r3, 7a4 <xQueueGenericReceive+0xd0>
						taskENTER_CRITICAL();
     796:	f002 f90f 	bl	29b8 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
     79a:	6860      	ldr	r0, [r4, #4]
     79c:	f001 f9ae 	bl	1afc <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
     7a0:	f002 f92c 	bl	29fc <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
     7a4:	9901      	ldr	r1, [sp, #4]
     7a6:	f104 0024 	add.w	r0, r4, #36	; 0x24
     7aa:	f000 ffa9 	bl	1700 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
     7ae:	4620      	mov	r0, r4
     7b0:	f7ff fd3a 	bl	228 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
     7b4:	f000 fdd4 	bl	1360 <xTaskResumeAll>
     7b8:	b938      	cbnz	r0, 7ca <xQueueGenericReceive+0xf6>
					portYIELD_WITHIN_API();
     7ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     7be:	f8ca 3000 	str.w	r3, [sl]
     7c2:	f3bf 8f4f 	dsb	sy
     7c6:	f3bf 8f6f 	isb	sy
     7ca:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
     7cc:	f002 f8f4 	bl	29b8 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
     7d0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
     7d2:	2d00      	cmp	r5, #0
     7d4:	d0b2      	beq.n	73c <xQueueGenericReceive+0x68>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
     7d6:	4641      	mov	r1, r8
     7d8:	4620      	mov	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
     7da:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
     7dc:	f000 f9e7 	bl	bae <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
     7e0:	f1b9 0f00 	cmp.w	r9, #0
     7e4:	d1a3      	bne.n	72e <xQueueGenericReceive+0x5a>
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     7e6:	6823      	ldr	r3, [r4, #0]
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
     7e8:	3d01      	subs	r5, #1
     7ea:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     7ec:	b913      	cbnz	r3, 7f4 <xQueueGenericReceive+0x120>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
     7ee:	f001 fa8b 	bl	1d08 <pvTaskIncrementMutexHeldCount>
     7f2:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     7f4:	6923      	ldr	r3, [r4, #16]
     7f6:	b163      	cbz	r3, 812 <xQueueGenericReceive+0x13e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     7f8:	f104 0010 	add.w	r0, r4, #16
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     7fc:	f000 ffe4 	bl	17c8 <xTaskRemoveFromEventList>
     800:	b138      	cbz	r0, 812 <xQueueGenericReceive+0x13e>
							queueYIELD_IF_USING_PREEMPTION();
     802:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     806:	4b14      	ldr	r3, [pc, #80]	; (858 <xQueueGenericReceive+0x184>)
     808:	601a      	str	r2, [r3, #0]
     80a:	f3bf 8f4f 	dsb	sy
     80e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
     812:	f002 f8f3 	bl	29fc <vPortExitCritical>
				return pdPASS;
     816:	2001      	movs	r0, #1
}
     818:	b004      	add	sp, #16
     81a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
     81e:	4620      	mov	r0, r4
     820:	f7ff fd02 	bl	228 <prvUnlockQueue>
				( void ) xTaskResumeAll();
     824:	f000 fd9c 	bl	1360 <xTaskResumeAll>
     828:	e7cf      	b.n	7ca <xQueueGenericReceive+0xf6>
			prvUnlockQueue( pxQueue );
     82a:	4620      	mov	r0, r4
     82c:	f7ff fcfc 	bl	228 <prvUnlockQueue>
			( void ) xTaskResumeAll();
     830:	f000 fd96 	bl	1360 <xTaskResumeAll>
	taskENTER_CRITICAL();
     834:	f002 f8c0 	bl	29b8 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
     838:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
     83a:	f002 f8df 	bl	29fc <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     83e:	2d00      	cmp	r5, #0
     840:	d1c3      	bne.n	7ca <xQueueGenericReceive+0xf6>
     842:	e77f      	b.n	744 <xQueueGenericReceive+0x70>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
     844:	f001 f94a 	bl	1adc <xTaskGetSchedulerState>
     848:	2800      	cmp	r0, #0
     84a:	f43f af63 	beq.w	714 <xQueueGenericReceive+0x40>
     84e:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
     850:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
     852:	f8df a004 	ldr.w	sl, [pc, #4]	; 858 <xQueueGenericReceive+0x184>
     856:	e7b9      	b.n	7cc <xQueueGenericReceive+0xf8>
     858:	e000ed04 	.word	0xe000ed04

0000085c <xQueueTakeMutexRecursive>:
	{
     85c:	b570      	push	{r4, r5, r6, lr}
     85e:	460d      	mov	r5, r1
		configASSERT( pxMutex );
     860:	4604      	mov	r4, r0
     862:	b940      	cbnz	r0, 876 <xQueueTakeMutexRecursive+0x1a>
     864:	f04f 0328 	mov.w	r3, #40	; 0x28
     868:	f383 8811 	msr	BASEPRI, r3
     86c:	f3bf 8f6f 	isb	sy
     870:	f3bf 8f4f 	dsb	sy
     874:	e7fe      	b.n	874 <xQueueTakeMutexRecursive+0x18>
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
     876:	6846      	ldr	r6, [r0, #4]
     878:	f001 f92a 	bl	1ad0 <xTaskGetCurrentTaskHandle>
     87c:	4286      	cmp	r6, r0
     87e:	d104      	bne.n	88a <xQueueTakeMutexRecursive+0x2e>
			( pxMutex->u.uxRecursiveCallCount )++;
     880:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
     882:	2001      	movs	r0, #1
			( pxMutex->u.uxRecursiveCallCount )++;
     884:	3301      	adds	r3, #1
     886:	60e3      	str	r3, [r4, #12]
     888:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueGenericReceive( pxMutex, NULL, xTicksToWait, pdFALSE );
     88a:	2300      	movs	r3, #0
     88c:	462a      	mov	r2, r5
     88e:	4619      	mov	r1, r3
     890:	4620      	mov	r0, r4
     892:	f7ff ff1f 	bl	6d4 <xQueueGenericReceive>
			if( xReturn != pdFAIL )
     896:	b110      	cbz	r0, 89e <xQueueTakeMutexRecursive+0x42>
				( pxMutex->u.uxRecursiveCallCount )++;
     898:	68e3      	ldr	r3, [r4, #12]
     89a:	3301      	adds	r3, #1
     89c:	60e3      	str	r3, [r4, #12]
	}
     89e:	bd70      	pop	{r4, r5, r6, pc}

000008a0 <xQueueReceiveFromISR>:
{
     8a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     8a4:	4689      	mov	r9, r1
     8a6:	4690      	mov	r8, r2
	configASSERT( pxQueue );
     8a8:	4605      	mov	r5, r0
     8aa:	b940      	cbnz	r0, 8be <xQueueReceiveFromISR+0x1e>
     8ac:	f04f 0328 	mov.w	r3, #40	; 0x28
     8b0:	f383 8811 	msr	BASEPRI, r3
     8b4:	f3bf 8f6f 	isb	sy
     8b8:	f3bf 8f4f 	dsb	sy
     8bc:	e7fe      	b.n	8bc <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
     8be:	bb71      	cbnz	r1, 91e <xQueueReceiveFromISR+0x7e>
     8c0:	6c03      	ldr	r3, [r0, #64]	; 0x40
     8c2:	b363      	cbz	r3, 91e <xQueueReceiveFromISR+0x7e>
     8c4:	f04f 0328 	mov.w	r3, #40	; 0x28
     8c8:	f383 8811 	msr	BASEPRI, r3
     8cc:	f3bf 8f6f 	isb	sy
     8d0:	f3bf 8f4f 	dsb	sy
     8d4:	e7fe      	b.n	8d4 <xQueueReceiveFromISR+0x34>
			const int8_t cRxLock = pxQueue->cRxLock;
     8d6:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
     8da:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
     8dc:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
     8de:	4628      	mov	r0, r5
     8e0:	f000 f965 	bl	bae <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
     8e4:	3c01      	subs	r4, #1
			if( cRxLock == queueUNLOCKED )
     8e6:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
     8e8:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
     8ea:	d113      	bne.n	914 <xQueueReceiveFromISR+0x74>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     8ec:	692b      	ldr	r3, [r5, #16]
     8ee:	b90b      	cbnz	r3, 8f4 <xQueueReceiveFromISR+0x54>
			xReturn = pdPASS;
     8f0:	2001      	movs	r0, #1
     8f2:	e00b      	b.n	90c <xQueueReceiveFromISR+0x6c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     8f4:	f105 0010 	add.w	r0, r5, #16
     8f8:	f000 ff66 	bl	17c8 <xTaskRemoveFromEventList>
     8fc:	2800      	cmp	r0, #0
     8fe:	d0f7      	beq.n	8f0 <xQueueReceiveFromISR+0x50>
						if( pxHigherPriorityTaskWoken != NULL )
     900:	f1b8 0f00 	cmp.w	r8, #0
     904:	d0f4      	beq.n	8f0 <xQueueReceiveFromISR+0x50>
							*pxHigherPriorityTaskWoken = pdTRUE;
     906:	2001      	movs	r0, #1
     908:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
     90c:	f387 8811 	msr	BASEPRI, r7
}
     910:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
     914:	3601      	adds	r6, #1
     916:	b276      	sxtb	r6, r6
     918:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
     91c:	e7e8      	b.n	8f0 <xQueueReceiveFromISR+0x50>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
     91e:	f002 f913 	bl	2b48 <vPortValidateInterruptPriority>
	__asm volatile
     922:	f3ef 8711 	mrs	r7, BASEPRI
     926:	f04f 0328 	mov.w	r3, #40	; 0x28
     92a:	f383 8811 	msr	BASEPRI, r3
     92e:	f3bf 8f6f 	isb	sy
     932:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
     936:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
     938:	2c00      	cmp	r4, #0
     93a:	d1cc      	bne.n	8d6 <xQueueReceiveFromISR+0x36>
			xReturn = pdFAIL;
     93c:	4620      	mov	r0, r4
     93e:	e7e5      	b.n	90c <xQueueReceiveFromISR+0x6c>

00000940 <xQueuePeekFromISR>:
{
     940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     942:	460d      	mov	r5, r1
	configASSERT( pxQueue );
     944:	4604      	mov	r4, r0
     946:	b940      	cbnz	r0, 95a <xQueuePeekFromISR+0x1a>
	__asm volatile
     948:	f04f 0328 	mov.w	r3, #40	; 0x28
     94c:	f383 8811 	msr	BASEPRI, r3
     950:	f3bf 8f6f 	isb	sy
     954:	f3bf 8f4f 	dsb	sy
     958:	e7fe      	b.n	958 <xQueuePeekFromISR+0x18>
     95a:	6c03      	ldr	r3, [r0, #64]	; 0x40
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
     95c:	b991      	cbnz	r1, 984 <xQueuePeekFromISR+0x44>
     95e:	b143      	cbz	r3, 972 <xQueuePeekFromISR+0x32>
     960:	f04f 0328 	mov.w	r3, #40	; 0x28
     964:	f383 8811 	msr	BASEPRI, r3
     968:	f3bf 8f6f 	isb	sy
     96c:	f3bf 8f4f 	dsb	sy
     970:	e7fe      	b.n	970 <xQueuePeekFromISR+0x30>
     972:	f04f 0328 	mov.w	r3, #40	; 0x28
     976:	f383 8811 	msr	BASEPRI, r3
     97a:	f3bf 8f6f 	isb	sy
     97e:	f3bf 8f4f 	dsb	sy
     982:	e7fe      	b.n	982 <xQueuePeekFromISR+0x42>
	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
     984:	2b00      	cmp	r3, #0
     986:	d0f4      	beq.n	972 <xQueuePeekFromISR+0x32>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
     988:	f002 f8de 	bl	2b48 <vPortValidateInterruptPriority>
	__asm volatile
     98c:	f3ef 8611 	mrs	r6, BASEPRI
     990:	f04f 0328 	mov.w	r3, #40	; 0x28
     994:	f383 8811 	msr	BASEPRI, r3
     998:	f3bf 8f6f 	isb	sy
     99c:	f3bf 8f4f 	dsb	sy
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
     9a0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
     9a2:	b130      	cbz	r0, 9b2 <xQueuePeekFromISR+0x72>
			prvCopyDataFromQueue( pxQueue, pvBuffer );
     9a4:	4620      	mov	r0, r4
     9a6:	4629      	mov	r1, r5
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
     9a8:	68e7      	ldr	r7, [r4, #12]
			prvCopyDataFromQueue( pxQueue, pvBuffer );
     9aa:	f000 f900 	bl	bae <prvCopyDataFromQueue>
			xReturn = pdPASS;
     9ae:	2001      	movs	r0, #1
			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
     9b0:	60e7      	str	r7, [r4, #12]
	__asm volatile
     9b2:	f386 8811 	msr	BASEPRI, r6
}
     9b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000009b8 <uxQueueMessagesWaiting>:
{
     9b8:	b510      	push	{r4, lr}
	configASSERT( xQueue );
     9ba:	4604      	mov	r4, r0
     9bc:	b940      	cbnz	r0, 9d0 <uxQueueMessagesWaiting+0x18>
	__asm volatile
     9be:	f04f 0328 	mov.w	r3, #40	; 0x28
     9c2:	f383 8811 	msr	BASEPRI, r3
     9c6:	f3bf 8f6f 	isb	sy
     9ca:	f3bf 8f4f 	dsb	sy
     9ce:	e7fe      	b.n	9ce <uxQueueMessagesWaiting+0x16>
	taskENTER_CRITICAL();
     9d0:	f001 fff2 	bl	29b8 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
     9d4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
     9d6:	f002 f811 	bl	29fc <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
     9da:	4620      	mov	r0, r4
     9dc:	bd10      	pop	{r4, pc}

000009de <uxQueueSpacesAvailable>:
{
     9de:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
     9e0:	4605      	mov	r5, r0
     9e2:	b940      	cbnz	r0, 9f6 <uxQueueSpacesAvailable+0x18>
     9e4:	f04f 0328 	mov.w	r3, #40	; 0x28
     9e8:	f383 8811 	msr	BASEPRI, r3
     9ec:	f3bf 8f6f 	isb	sy
     9f0:	f3bf 8f4f 	dsb	sy
     9f4:	e7fe      	b.n	9f4 <uxQueueSpacesAvailable+0x16>
	taskENTER_CRITICAL();
     9f6:	f001 ffdf 	bl	29b8 <vPortEnterCritical>
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
     9fa:	6ba8      	ldr	r0, [r5, #56]	; 0x38
     9fc:	6bec      	ldr	r4, [r5, #60]	; 0x3c
     9fe:	1a24      	subs	r4, r4, r0
	taskEXIT_CRITICAL();
     a00:	f001 fffc 	bl	29fc <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
     a04:	4620      	mov	r0, r4
     a06:	bd38      	pop	{r3, r4, r5, pc}

00000a08 <uxQueueMessagesWaitingFromISR>:
	configASSERT( xQueue );
     a08:	b940      	cbnz	r0, a1c <uxQueueMessagesWaitingFromISR+0x14>
     a0a:	f04f 0328 	mov.w	r3, #40	; 0x28
     a0e:	f383 8811 	msr	BASEPRI, r3
     a12:	f3bf 8f6f 	isb	sy
     a16:	f3bf 8f4f 	dsb	sy
     a1a:	e7fe      	b.n	a1a <uxQueueMessagesWaitingFromISR+0x12>
	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
     a1c:	6b80      	ldr	r0, [r0, #56]	; 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
     a1e:	4770      	bx	lr

00000a20 <uxQueueGetQueueNumber>:
	}
     a20:	6c80      	ldr	r0, [r0, #72]	; 0x48
     a22:	4770      	bx	lr

00000a24 <vQueueSetQueueNumber>:
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
     a24:	6481      	str	r1, [r0, #72]	; 0x48
     a26:	4770      	bx	lr

00000a28 <ucQueueGetQueueType>:
	}
     a28:	f890 004c 	ldrb.w	r0, [r0, #76]	; 0x4c
     a2c:	4770      	bx	lr

00000a2e <xQueueIsQueueEmptyFromISR>:
	configASSERT( xQueue );
     a2e:	b940      	cbnz	r0, a42 <xQueueIsQueueEmptyFromISR+0x14>
     a30:	f04f 0328 	mov.w	r3, #40	; 0x28
     a34:	f383 8811 	msr	BASEPRI, r3
     a38:	f3bf 8f6f 	isb	sy
     a3c:	f3bf 8f4f 	dsb	sy
     a40:	e7fe      	b.n	a40 <xQueueIsQueueEmptyFromISR+0x12>
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
     a42:	6b80      	ldr	r0, [r0, #56]	; 0x38
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     a44:	fab0 f080 	clz	r0, r0
     a48:	0940      	lsrs	r0, r0, #5
     a4a:	4770      	bx	lr

00000a4c <xQueueIsQueueFullFromISR>:

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
BaseType_t xReturn;

	configASSERT( xQueue );
     a4c:	b940      	cbnz	r0, a60 <xQueueIsQueueFullFromISR+0x14>
     a4e:	f04f 0328 	mov.w	r3, #40	; 0x28
     a52:	f383 8811 	msr	BASEPRI, r3
     a56:	f3bf 8f6f 	isb	sy
     a5a:	f3bf 8f4f 	dsb	sy
     a5e:	e7fe      	b.n	a5e <xQueueIsQueueFullFromISR+0x12>
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
     a60:	6b83      	ldr	r3, [r0, #56]	; 0x38
     a62:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
	{
		xReturn = pdFALSE;
	}

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     a64:	1ac3      	subs	r3, r0, r3
     a66:	4258      	negs	r0, r3
     a68:	4158      	adcs	r0, r3
     a6a:	4770      	bx	lr

00000a6c <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
     a6c:	2300      	movs	r3, #0
	{
     a6e:	b530      	push	{r4, r5, lr}
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
     a70:	4a06      	ldr	r2, [pc, #24]	; (a8c <vQueueAddToRegistry+0x20>)
     a72:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
     a76:	00dc      	lsls	r4, r3, #3
     a78:	b925      	cbnz	r5, a84 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
     a7a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
     a7e:	4422      	add	r2, r4
     a80:	6050      	str	r0, [r2, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
     a82:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
     a84:	3301      	adds	r3, #1
     a86:	2b08      	cmp	r3, #8
     a88:	d1f3      	bne.n	a72 <vQueueAddToRegistry+0x6>
     a8a:	bd30      	pop	{r4, r5, pc}
     a8c:	100012b4 	.word	0x100012b4

00000a90 <pcQueueGetName>:
	UBaseType_t ux;
	const char *pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */

		/* Note there is nothing here to protect against another task adding or
		removing entries from the registry while it is being searched. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
     a90:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
     a92:	4a07      	ldr	r2, [pc, #28]	; (ab0 <pcQueueGetName+0x20>)
     a94:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
     a98:	6849      	ldr	r1, [r1, #4]
     a9a:	4281      	cmp	r1, r0
     a9c:	d102      	bne.n	aa4 <pcQueueGetName+0x14>
			{
				pcReturn = xQueueRegistry[ ux ].pcQueueName;
     a9e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
				break;
     aa2:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
     aa4:	3301      	adds	r3, #1
     aa6:	2b08      	cmp	r3, #8
     aa8:	d1f4      	bne.n	a94 <pcQueueGetName+0x4>
	const char *pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
     aaa:	2000      	movs	r0, #0
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return pcReturn;
	}
     aac:	4770      	bx	lr
     aae:	bf00      	nop
     ab0:	100012b4 	.word	0x100012b4

00000ab4 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
     ab4:	2300      	movs	r3, #0
	{
     ab6:	b510      	push	{r4, lr}
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
     ab8:	4a07      	ldr	r2, [pc, #28]	; (ad8 <vQueueUnregisterQueue+0x24>)
     aba:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
     abe:	684c      	ldr	r4, [r1, #4]
     ac0:	4284      	cmp	r4, r0
     ac2:	d104      	bne.n	ace <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
     ac4:	2000      	movs	r0, #0
     ac6:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
     aca:	6048      	str	r0, [r1, #4]
				break;
     acc:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
     ace:	3301      	adds	r3, #1
     ad0:	2b08      	cmp	r3, #8
     ad2:	d1f2      	bne.n	aba <vQueueUnregisterQueue+0x6>
     ad4:	bd10      	pop	{r4, pc}
     ad6:	bf00      	nop
     ad8:	100012b4 	.word	0x100012b4

00000adc <vQueueDelete>:
{
     adc:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
     ade:	4604      	mov	r4, r0
     ae0:	b940      	cbnz	r0, af4 <vQueueDelete+0x18>
     ae2:	f04f 0328 	mov.w	r3, #40	; 0x28
     ae6:	f383 8811 	msr	BASEPRI, r3
     aea:	f3bf 8f6f 	isb	sy
     aee:	f3bf 8f4f 	dsb	sy
     af2:	e7fe      	b.n	af2 <vQueueDelete+0x16>
		vQueueUnregisterQueue( pxQueue );
     af4:	f7ff ffde 	bl	ab4 <vQueueUnregisterQueue>
		vPortFree( pxQueue );
     af8:	4620      	mov	r0, r4
}
     afa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		vPortFree( pxQueue );
     afe:	f002 b8ab 	b.w	2c58 <vPortFree>

00000b02 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
     b02:	b570      	push	{r4, r5, r6, lr}
     b04:	4604      	mov	r4, r0
     b06:	460d      	mov	r5, r1
     b08:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
     b0a:	f001 ff55 	bl	29b8 <vPortEnterCritical>
     b0e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
     b12:	2bff      	cmp	r3, #255	; 0xff
     b14:	bf04      	itt	eq
     b16:	2300      	moveq	r3, #0
     b18:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
     b1c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
     b20:	2bff      	cmp	r3, #255	; 0xff
     b22:	bf04      	itt	eq
     b24:	2300      	moveq	r3, #0
     b26:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
     b2a:	f001 ff67 	bl	29fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     b2e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     b30:	b92b      	cbnz	r3, b3e <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     b32:	4632      	mov	r2, r6
     b34:	4629      	mov	r1, r5
     b36:	f104 0024 	add.w	r0, r4, #36	; 0x24
     b3a:	f000 fe25 	bl	1788 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
     b3e:	4620      	mov	r0, r4
	}
     b40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
     b44:	f7ff bb70 	b.w	228 <prvUnlockQueue>

00000b48 <prvCopyDataToQueue>:
{
     b48:	b570      	push	{r4, r5, r6, lr}
     b4a:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
     b4c:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
     b4e:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
     b50:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
     b52:	b942      	cbnz	r2, b66 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     b54:	6805      	ldr	r5, [r0, #0]
     b56:	b99d      	cbnz	r5, b80 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
     b58:	6840      	ldr	r0, [r0, #4]
     b5a:	f001 f815 	bl	1b88 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
     b5e:	6065      	str	r5, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
     b60:	3601      	adds	r6, #1
     b62:	63a6      	str	r6, [r4, #56]	; 0x38
}
     b64:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
     b66:	b96d      	cbnz	r5, b84 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
     b68:	6880      	ldr	r0, [r0, #8]
     b6a:	f004 fd87 	bl	567c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
     b6e:	68a3      	ldr	r3, [r4, #8]
     b70:	6c22      	ldr	r2, [r4, #64]	; 0x40
     b72:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
     b74:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
     b76:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
     b78:	4293      	cmp	r3, r2
     b7a:	d301      	bcc.n	b80 <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
     b7c:	6823      	ldr	r3, [r4, #0]
     b7e:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
     b80:	2000      	movs	r0, #0
     b82:	e7ed      	b.n	b60 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     b84:	68c0      	ldr	r0, [r0, #12]
     b86:	f004 fd79 	bl	567c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
     b8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
     b8c:	68e2      	ldr	r2, [r4, #12]
     b8e:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
     b90:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
     b92:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
     b94:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
     b96:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
     b98:	bf3e      	ittt	cc
     b9a:	6862      	ldrcc	r2, [r4, #4]
     b9c:	189b      	addcc	r3, r3, r2
     b9e:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
     ba0:	2d02      	cmp	r5, #2
     ba2:	d1ed      	bne.n	b80 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
     ba4:	b10e      	cbz	r6, baa <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
     ba6:	3e01      	subs	r6, #1
     ba8:	e7ea      	b.n	b80 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
     baa:	4630      	mov	r0, r6
     bac:	e7d8      	b.n	b60 <prvCopyDataToQueue+0x18>

00000bae <prvCopyDataFromQueue>:
{
     bae:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
     bb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
     bb2:	b410      	push	{r4}
     bb4:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
     bb6:	b162      	cbz	r2, bd2 <prvCopyDataFromQueue+0x24>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
     bb8:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
     bba:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
     bbc:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
     bbe:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
     bc0:	60d9      	str	r1, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
     bc2:	bf28      	it	cs
     bc4:	6819      	ldrcs	r1, [r3, #0]
}
     bc6:	bc10      	pop	{r4}
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
     bc8:	bf28      	it	cs
     bca:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
     bcc:	68d9      	ldr	r1, [r3, #12]
     bce:	f004 bd55 	b.w	567c <memcpy>
}
     bd2:	bc10      	pop	{r4}
     bd4:	4770      	bx	lr
	...

00000bd8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
     bd8:	4b06      	ldr	r3, [pc, #24]	; (bf4 <prvResetNextTaskUnblockTime+0x1c>)
     bda:	681a      	ldr	r2, [r3, #0]
     bdc:	6812      	ldr	r2, [r2, #0]
     bde:	b91a      	cbnz	r2, be8 <prvResetNextTaskUnblockTime+0x10>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
     be0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
     be4:	605a      	str	r2, [r3, #4]
     be6:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
     be8:	681a      	ldr	r2, [r3, #0]
     bea:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
     bec:	68d2      	ldr	r2, [r2, #12]
     bee:	6852      	ldr	r2, [r2, #4]
     bf0:	e7f8      	b.n	be4 <prvResetNextTaskUnblockTime+0xc>
     bf2:	bf00      	nop
     bf4:	100012f4 	.word	0x100012f4

00000bf8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
     bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
     bfa:	4c18      	ldr	r4, [pc, #96]	; (c5c <prvAddCurrentTaskToDelayedList+0x64>)
{
     bfc:	4605      	mov	r5, r0
const TickType_t xConstTickCount = xTickCount;
     bfe:	68a6      	ldr	r6, [r4, #8]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
     c00:	68e0      	ldr	r0, [r4, #12]
{
     c02:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
     c04:	3004      	adds	r0, #4
     c06:	f7ff fafe 	bl	206 <uxListRemove>
     c0a:	b938      	cbnz	r0, c1c <prvAddCurrentTaskToDelayedList+0x24>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
     c0c:	68e2      	ldr	r2, [r4, #12]
     c0e:	6923      	ldr	r3, [r4, #16]
     c10:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
     c12:	2201      	movs	r2, #1
     c14:	408a      	lsls	r2, r1
     c16:	ea23 0302 	bic.w	r3, r3, r2
     c1a:	6123      	str	r3, [r4, #16]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
     c1c:	1c6b      	adds	r3, r5, #1
     c1e:	d107      	bne.n	c30 <prvAddCurrentTaskToDelayedList+0x38>
     c20:	b137      	cbz	r7, c30 <prvAddCurrentTaskToDelayedList+0x38>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
     c22:	68e1      	ldr	r1, [r4, #12]
     c24:	480e      	ldr	r0, [pc, #56]	; (c60 <prvAddCurrentTaskToDelayedList+0x68>)
     c26:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
     c28:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
     c2c:	f7ff bac8 	b.w	1c0 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
     c30:	4435      	add	r5, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
     c32:	68e3      	ldr	r3, [r4, #12]
			if( xTimeToWake < xConstTickCount )
     c34:	42ae      	cmp	r6, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
     c36:	605d      	str	r5, [r3, #4]
			if( xTimeToWake < xConstTickCount )
     c38:	d906      	bls.n	c48 <prvAddCurrentTaskToDelayedList+0x50>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
     c3a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
     c3c:	68e1      	ldr	r1, [r4, #12]
}
     c3e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
     c42:	3104      	adds	r1, #4
     c44:	f7ff bac8 	b.w	1d8 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
     c48:	6820      	ldr	r0, [r4, #0]
     c4a:	68e1      	ldr	r1, [r4, #12]
     c4c:	3104      	adds	r1, #4
     c4e:	f7ff fac3 	bl	1d8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
     c52:	6863      	ldr	r3, [r4, #4]
     c54:	429d      	cmp	r5, r3
					xNextTaskUnblockTime = xTimeToWake;
     c56:	bf38      	it	cc
     c58:	6065      	strcc	r5, [r4, #4]
     c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c5c:	100012f4 	.word	0x100012f4
     c60:	10001308 	.word	0x10001308

00000c64 <eTaskGetState.part.4>:
     c64:	f04f 0328 	mov.w	r3, #40	; 0x28
     c68:	f383 8811 	msr	BASEPRI, r3
     c6c:	f3bf 8f6f 	isb	sy
     c70:	f3bf 8f4f 	dsb	sy
     c74:	e7fe      	b.n	c74 <eTaskGetState.part.4+0x10>

00000c76 <prvTaskIsTaskSuspended>:
	{
     c76:	b508      	push	{r3, lr}
		configASSERT( xTask );
     c78:	b908      	cbnz	r0, c7e <prvTaskIsTaskSuspended+0x8>
     c7a:	f7ff fff3 	bl	c64 <eTaskGetState.part.4>
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
     c7e:	6943      	ldr	r3, [r0, #20]
     c80:	4a06      	ldr	r2, [pc, #24]	; (c9c <prvTaskIsTaskSuspended+0x26>)
     c82:	4293      	cmp	r3, r2
     c84:	d001      	beq.n	c8a <prvTaskIsTaskSuspended+0x14>
	BaseType_t xReturn = pdFALSE;
     c86:	2000      	movs	r0, #0
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
     c88:	bd08      	pop	{r3, pc}
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
     c8a:	6a80      	ldr	r0, [r0, #40]	; 0x28
     c8c:	3318      	adds	r3, #24
     c8e:	4298      	cmp	r0, r3
     c90:	d0f9      	beq.n	c86 <prvTaskIsTaskSuspended+0x10>
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
     c92:	fab0 f080 	clz	r0, r0
     c96:	0940      	lsrs	r0, r0, #5
		return xReturn;
     c98:	bd08      	pop	{r3, pc}
     c9a:	bf00      	nop
     c9c:	10001308 	.word	0x10001308

00000ca0 <xTaskCreate>:
	{
     ca0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     ca4:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
     ca8:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     caa:	4650      	mov	r0, sl
	{
     cac:	460c      	mov	r4, r1
     cae:	4699      	mov	r9, r3
     cb0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     cb2:	f001 ff75 	bl	2ba0 <pvPortMalloc>
			if( pxStack != NULL )
     cb6:	4607      	mov	r7, r0
     cb8:	2800      	cmp	r0, #0
     cba:	f000 80ac 	beq.w	e16 <xTaskCreate+0x176>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
     cbe:	205c      	movs	r0, #92	; 0x5c
     cc0:	f001 ff6e 	bl	2ba0 <pvPortMalloc>
				if( pxNewTCB != NULL )
     cc4:	4605      	mov	r5, r0
     cc6:	2800      	cmp	r0, #0
     cc8:	f000 80a2 	beq.w	e10 <xTaskCreate+0x170>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
     ccc:	4652      	mov	r2, sl
					pxNewTCB->pxStack = pxStack;
     cce:	6307      	str	r7, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
     cd0:	21a5      	movs	r1, #165	; 0xa5
     cd2:	4638      	mov	r0, r7
     cd4:	f004 fd48 	bl	5768 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
     cd8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
     cda:	f1aa 0a04 	sub.w	sl, sl, #4
     cde:	449a      	add	sl, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
     ce0:	f02a 0a07 	bic.w	sl, sl, #7
     ce4:	1e63      	subs	r3, r4, #1
     ce6:	f105 0234 	add.w	r2, r5, #52	; 0x34
     cea:	3409      	adds	r4, #9
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
     cec:	7859      	ldrb	r1, [r3, #1]
     cee:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
     cf2:	f813 1f01 	ldrb.w	r1, [r3, #1]!
     cf6:	b109      	cbz	r1, cfc <xTaskCreate+0x5c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
     cf8:	42a3      	cmp	r3, r4
     cfa:	d1f7      	bne.n	cec <xTaskCreate+0x4c>
     cfc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
     cfe:	f04f 0b00 	mov.w	fp, #0
     d02:	2c04      	cmp	r4, #4
     d04:	bf28      	it	cs
     d06:	2404      	movcs	r4, #4
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
     d08:	1d2f      	adds	r7, r5, #4
	pxNewTCB->uxPriority = uxPriority;
     d0a:	62ec      	str	r4, [r5, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
     d0c:	64ac      	str	r4, [r5, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
     d0e:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
     d10:	f885 b03d 	strb.w	fp, [r5, #61]	; 0x3d
		pxNewTCB->uxMutexesHeld = 0;
     d14:	f8c5 b04c 	str.w	fp, [r5, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
     d18:	f7ff fa4f 	bl	1ba <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     d1c:	f1c4 0405 	rsb	r4, r4, #5
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
     d20:	f105 0018 	add.w	r0, r5, #24
     d24:	f7ff fa49 	bl	1ba <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
     d28:	f8c5 b054 	str.w	fp, [r5, #84]	; 0x54
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
     d2c:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     d2e:	61ac      	str	r4, [r5, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
     d30:	626d      	str	r5, [r5, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
     d32:	f8c5 b050 	str.w	fp, [r5, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
     d36:	f885 b058 	strb.w	fp, [r5, #88]	; 0x58
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
     d3a:	464a      	mov	r2, r9
     d3c:	4641      	mov	r1, r8
     d3e:	4650      	mov	r0, sl
     d40:	f001 fe03 	bl	294a <pxPortInitialiseStack>
     d44:	6028      	str	r0, [r5, #0]
	if( ( void * ) pxCreatedTask != NULL )
     d46:	b106      	cbz	r6, d4a <xTaskCreate+0xaa>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
     d48:	6035      	str	r5, [r6, #0]
		uxCurrentNumberOfTasks++;
     d4a:	4c3a      	ldr	r4, [pc, #232]	; (e34 <xTaskCreate+0x194>)
	taskENTER_CRITICAL();
     d4c:	f001 fe34 	bl	29b8 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
     d50:	6c23      	ldr	r3, [r4, #64]	; 0x40
     d52:	f104 0844 	add.w	r8, r4, #68	; 0x44
     d56:	3301      	adds	r3, #1
     d58:	6423      	str	r3, [r4, #64]	; 0x40
		if( pxCurrentTCB == NULL )
     d5a:	68e3      	ldr	r3, [r4, #12]
     d5c:	2b00      	cmp	r3, #0
     d5e:	d15d      	bne.n	e1c <xTaskCreate+0x17c>
			pxCurrentTCB = pxNewTCB;
     d60:	60e5      	str	r5, [r4, #12]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
     d62:	6c23      	ldr	r3, [r4, #64]	; 0x40
     d64:	2b01      	cmp	r3, #1
     d66:	d12b      	bne.n	dc0 <xTaskCreate+0x120>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
     d68:	4640      	mov	r0, r8
     d6a:	f7ff fa1b 	bl	1a4 <vListInitialise>
     d6e:	f104 0058 	add.w	r0, r4, #88	; 0x58
     d72:	f7ff fa17 	bl	1a4 <vListInitialise>
     d76:	f104 006c 	add.w	r0, r4, #108	; 0x6c
     d7a:	f7ff fa13 	bl	1a4 <vListInitialise>
     d7e:	f104 0080 	add.w	r0, r4, #128	; 0x80
     d82:	f7ff fa0f 	bl	1a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList1 );
     d86:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
     d8a:	f104 0094 	add.w	r0, r4, #148	; 0x94
     d8e:	f7ff fa09 	bl	1a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
     d92:	f104 06bc 	add.w	r6, r4, #188	; 0xbc
	vListInitialise( &xDelayedTaskList1 );
     d96:	4648      	mov	r0, r9
     d98:	f7ff fa04 	bl	1a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
     d9c:	4630      	mov	r0, r6
     d9e:	f7ff fa01 	bl	1a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
     da2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
     da6:	f7ff f9fd 	bl	1a4 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
     daa:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
     dae:	f7ff f9f9 	bl	1a4 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
     db2:	f104 0014 	add.w	r0, r4, #20
     db6:	f7ff f9f5 	bl	1a4 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
     dba:	f8c4 9000 	str.w	r9, [r4]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
     dbe:	62a6      	str	r6, [r4, #40]	; 0x28
		prvAddTaskToReadyList( pxNewTCB );
     dc0:	2601      	movs	r6, #1
     dc2:	2014      	movs	r0, #20
		uxTaskNumber++;
     dc4:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
		prvAddTaskToReadyList( pxNewTCB );
     dc8:	6aea      	ldr	r2, [r5, #44]	; 0x2c
     dca:	6921      	ldr	r1, [r4, #16]
		uxTaskNumber++;
     dcc:	3301      	adds	r3, #1
     dce:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
			pxNewTCB->uxTCBNumber = uxTaskNumber;
     dd2:	642b      	str	r3, [r5, #64]	; 0x40
		prvAddTaskToReadyList( pxNewTCB );
     dd4:	fa06 f302 	lsl.w	r3, r6, r2
     dd8:	430b      	orrs	r3, r1
     dda:	fb00 8002 	mla	r0, r0, r2, r8
     dde:	4639      	mov	r1, r7
     de0:	6123      	str	r3, [r4, #16]
     de2:	f7ff f9ed 	bl	1c0 <vListInsertEnd>
	taskEXIT_CRITICAL();
     de6:	f001 fe09 	bl	29fc <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
     dea:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
     dee:	b163      	cbz	r3, e0a <xTaskCreate+0x16a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
     df0:	68e3      	ldr	r3, [r4, #12]
     df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     df4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
     df6:	429a      	cmp	r2, r3
     df8:	d207      	bcs.n	e0a <xTaskCreate+0x16a>
			taskYIELD_IF_USING_PREEMPTION();
     dfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     dfe:	4b0e      	ldr	r3, [pc, #56]	; (e38 <xTaskCreate+0x198>)
     e00:	601a      	str	r2, [r3, #0]
     e02:	f3bf 8f4f 	dsb	sy
     e06:	f3bf 8f6f 	isb	sy
	}
     e0a:	4630      	mov	r0, r6
     e0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
     e10:	4638      	mov	r0, r7
     e12:	f001 ff21 	bl	2c58 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
     e16:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
     e1a:	e7f6      	b.n	e0a <xTaskCreate+0x16a>
			if( xSchedulerRunning == pdFALSE )
     e1c:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
     e20:	2b00      	cmp	r3, #0
     e22:	d1cd      	bne.n	dc0 <xTaskCreate+0x120>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
     e24:	68e3      	ldr	r3, [r4, #12]
     e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     e28:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
     e2a:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
     e2c:	bf98      	it	ls
     e2e:	60e5      	strls	r5, [r4, #12]
     e30:	e7c6      	b.n	dc0 <xTaskCreate+0x120>
     e32:	bf00      	nop
     e34:	100012f4 	.word	0x100012f4
     e38:	e000ed04 	.word	0xe000ed04

00000e3c <vTaskDelete>:
	{
     e3c:	b570      	push	{r4, r5, r6, lr}
     e3e:	4605      	mov	r5, r0
     e40:	4c2a      	ldr	r4, [pc, #168]	; (eec <vTaskDelete+0xb0>)
		taskENTER_CRITICAL();
     e42:	f001 fdb9 	bl	29b8 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
     e46:	b905      	cbnz	r5, e4a <vTaskDelete+0xe>
     e48:	68e5      	ldr	r5, [r4, #12]
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
     e4a:	1d2e      	adds	r6, r5, #4
     e4c:	4630      	mov	r0, r6
     e4e:	f7ff f9da 	bl	206 <uxListRemove>
     e52:	b958      	cbnz	r0, e6c <vTaskDelete+0x30>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
     e54:	2114      	movs	r1, #20
     e56:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
     e58:	fb01 4100 	mla	r1, r1, r0, r4
     e5c:	6c4b      	ldr	r3, [r1, #68]	; 0x44
     e5e:	b92b      	cbnz	r3, e6c <vTaskDelete+0x30>
     e60:	2201      	movs	r2, #1
     e62:	6923      	ldr	r3, [r4, #16]
     e64:	4082      	lsls	r2, r0
     e66:	ea23 0302 	bic.w	r3, r3, r2
     e6a:	6123      	str	r3, [r4, #16]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
     e6c:	6aab      	ldr	r3, [r5, #40]	; 0x28
     e6e:	b11b      	cbz	r3, e78 <vTaskDelete+0x3c>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
     e70:	f105 0018 	add.w	r0, r5, #24
     e74:	f7ff f9c7 	bl	206 <uxListRemove>
			uxTaskNumber++;
     e78:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
     e7c:	3301      	adds	r3, #1
     e7e:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
			if( pxTCB == pxCurrentTCB )
     e82:	68e3      	ldr	r3, [r4, #12]
     e84:	429d      	cmp	r5, r3
     e86:	d11c      	bne.n	ec2 <vTaskDelete+0x86>
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
     e88:	4631      	mov	r1, r6
     e8a:	4819      	ldr	r0, [pc, #100]	; (ef0 <vTaskDelete+0xb4>)
     e8c:	f7ff f998 	bl	1c0 <vListInsertEnd>
				++uxDeletedTasksWaitingCleanUp;
     e90:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
     e94:	3301      	adds	r3, #1
     e96:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
		taskEXIT_CRITICAL();
     e9a:	f001 fdaf 	bl	29fc <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
     e9e:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
     ea2:	b313      	cbz	r3, eea <vTaskDelete+0xae>
			if( pxTCB == pxCurrentTCB )
     ea4:	68e3      	ldr	r3, [r4, #12]
     ea6:	429d      	cmp	r5, r3
     ea8:	d11f      	bne.n	eea <vTaskDelete+0xae>
				configASSERT( uxSchedulerSuspended == 0 );
     eaa:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
     eae:	b1a3      	cbz	r3, eda <vTaskDelete+0x9e>
     eb0:	f04f 0328 	mov.w	r3, #40	; 0x28
     eb4:	f383 8811 	msr	BASEPRI, r3
     eb8:	f3bf 8f6f 	isb	sy
     ebc:	f3bf 8f4f 	dsb	sy
     ec0:	e7fe      	b.n	ec0 <vTaskDelete+0x84>
				--uxCurrentNumberOfTasks;
     ec2:	6c23      	ldr	r3, [r4, #64]	; 0x40
			vPortFree( pxTCB->pxStack );
     ec4:	6b28      	ldr	r0, [r5, #48]	; 0x30
				--uxCurrentNumberOfTasks;
     ec6:	3b01      	subs	r3, #1
     ec8:	6423      	str	r3, [r4, #64]	; 0x40
			vPortFree( pxTCB->pxStack );
     eca:	f001 fec5 	bl	2c58 <vPortFree>
			vPortFree( pxTCB );
     ece:	4628      	mov	r0, r5
     ed0:	f001 fec2 	bl	2c58 <vPortFree>
				prvResetNextTaskUnblockTime();
     ed4:	f7ff fe80 	bl	bd8 <prvResetNextTaskUnblockTime>
     ed8:	e7df      	b.n	e9a <vTaskDelete+0x5e>
				portYIELD_WITHIN_API();
     eda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     ede:	4b05      	ldr	r3, [pc, #20]	; (ef4 <vTaskDelete+0xb8>)
     ee0:	601a      	str	r2, [r3, #0]
     ee2:	f3bf 8f4f 	dsb	sy
     ee6:	f3bf 8f6f 	isb	sy
     eea:	bd70      	pop	{r4, r5, r6, pc}
     eec:	100012f4 	.word	0x100012f4
     ef0:	100013c4 	.word	0x100013c4
     ef4:	e000ed04 	.word	0xe000ed04

00000ef8 <eTaskGetState>:
	{
     ef8:	b570      	push	{r4, r5, r6, lr}
		configASSERT( pxTCB );
     efa:	4606      	mov	r6, r0
     efc:	b908      	cbnz	r0, f02 <eTaskGetState+0xa>
     efe:	f7ff feb1 	bl	c64 <eTaskGetState.part.4>
		if( pxTCB == pxCurrentTCB )
     f02:	4c13      	ldr	r4, [pc, #76]	; (f50 <eTaskGetState+0x58>)
     f04:	68e3      	ldr	r3, [r4, #12]
     f06:	4298      	cmp	r0, r3
     f08:	d01c      	beq.n	f44 <eTaskGetState+0x4c>
			taskENTER_CRITICAL();
     f0a:	f001 fd55 	bl	29b8 <vPortEnterCritical>
				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
     f0e:	6975      	ldr	r5, [r6, #20]
			taskEXIT_CRITICAL();
     f10:	f001 fd74 	bl	29fc <vPortExitCritical>
			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
     f14:	6823      	ldr	r3, [r4, #0]
     f16:	429d      	cmp	r5, r3
     f18:	d016      	beq.n	f48 <eTaskGetState+0x50>
     f1a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     f1c:	429d      	cmp	r5, r3
     f1e:	d013      	beq.n	f48 <eTaskGetState+0x50>
				else if( pxStateList == &xSuspendedTaskList )
     f20:	f104 0314 	add.w	r3, r4, #20
     f24:	429d      	cmp	r5, r3
     f26:	d105      	bne.n	f34 <eTaskGetState+0x3c>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
     f28:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     f2a:	2b00      	cmp	r3, #0
						eReturn = eSuspended;
     f2c:	bf14      	ite	ne
     f2e:	2002      	movne	r0, #2
     f30:	2003      	moveq	r0, #3
     f32:	bd70      	pop	{r4, r5, r6, pc}
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
     f34:	34d0      	adds	r4, #208	; 0xd0
     f36:	42a5      	cmp	r5, r4
     f38:	d008      	beq.n	f4c <eTaskGetState+0x54>
     f3a:	2d00      	cmp	r5, #0
				eReturn = eReady;
     f3c:	bf0c      	ite	eq
     f3e:	2004      	moveq	r0, #4
     f40:	2001      	movne	r0, #1
     f42:	bd70      	pop	{r4, r5, r6, pc}
			eReturn = eRunning;
     f44:	2000      	movs	r0, #0
     f46:	bd70      	pop	{r4, r5, r6, pc}
						eReturn = eBlocked;
     f48:	2002      	movs	r0, #2
     f4a:	bd70      	pop	{r4, r5, r6, pc}
					eReturn = eDeleted;
     f4c:	2004      	movs	r0, #4
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
     f4e:	bd70      	pop	{r4, r5, r6, pc}
     f50:	100012f4 	.word	0x100012f4

00000f54 <uxTaskPriorityGet>:
	{
     f54:	b510      	push	{r4, lr}
     f56:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
     f58:	f001 fd2e 	bl	29b8 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
     f5c:	b90c      	cbnz	r4, f62 <uxTaskPriorityGet+0xe>
     f5e:	4b03      	ldr	r3, [pc, #12]	; (f6c <uxTaskPriorityGet+0x18>)
     f60:	68dc      	ldr	r4, [r3, #12]
			uxReturn = pxTCB->uxPriority;
     f62:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		taskEXIT_CRITICAL();
     f64:	f001 fd4a 	bl	29fc <vPortExitCritical>
	}
     f68:	4620      	mov	r0, r4
     f6a:	bd10      	pop	{r4, pc}
     f6c:	100012f4 	.word	0x100012f4

00000f70 <uxTaskPriorityGetFromISR>:
	{
     f70:	b510      	push	{r4, lr}
     f72:	4604      	mov	r4, r0
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
     f74:	f001 fde8 	bl	2b48 <vPortValidateInterruptPriority>
	__asm volatile
     f78:	f3ef 8311 	mrs	r3, BASEPRI
     f7c:	f04f 0228 	mov.w	r2, #40	; 0x28
     f80:	f382 8811 	msr	BASEPRI, r2
     f84:	f3bf 8f6f 	isb	sy
     f88:	f3bf 8f4f 	dsb	sy
			pxTCB = prvGetTCBFromHandle( xTask );
     f8c:	b90c      	cbnz	r4, f92 <uxTaskPriorityGetFromISR+0x22>
     f8e:	4a03      	ldr	r2, [pc, #12]	; (f9c <uxTaskPriorityGetFromISR+0x2c>)
     f90:	68d4      	ldr	r4, [r2, #12]
	__asm volatile
     f92:	f383 8811 	msr	BASEPRI, r3
	}
     f96:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
     f98:	bd10      	pop	{r4, pc}
     f9a:	bf00      	nop
     f9c:	100012f4 	.word	0x100012f4

00000fa0 <vTaskPrioritySet>:
		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
     fa0:	2904      	cmp	r1, #4
	{
     fa2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     fa6:	4604      	mov	r4, r0
     fa8:	460d      	mov	r5, r1
		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
     faa:	d908      	bls.n	fbe <vTaskPrioritySet+0x1e>
	__asm volatile
     fac:	f04f 0328 	mov.w	r3, #40	; 0x28
     fb0:	f383 8811 	msr	BASEPRI, r3
     fb4:	f3bf 8f6f 	isb	sy
     fb8:	f3bf 8f4f 	dsb	sy
     fbc:	e7fe      	b.n	fbc <vTaskPrioritySet+0x1c>
		taskENTER_CRITICAL();
     fbe:	f001 fcfb 	bl	29b8 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
     fc2:	b90c      	cbnz	r4, fc8 <vTaskPrioritySet+0x28>
     fc4:	4b28      	ldr	r3, [pc, #160]	; (1068 <vTaskPrioritySet+0xc8>)
     fc6:	68dc      	ldr	r4, [r3, #12]
				uxCurrentBasePriority = pxTCB->uxBasePriority;
     fc8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			if( uxCurrentBasePriority != uxNewPriority )
     fca:	429d      	cmp	r5, r3
     fcc:	d040      	beq.n	1050 <vTaskPrioritySet+0xb0>
     fce:	4f26      	ldr	r7, [pc, #152]	; (1068 <vTaskPrioritySet+0xc8>)
				if( uxNewPriority > uxCurrentBasePriority )
     fd0:	d942      	bls.n	1058 <vTaskPrioritySet+0xb8>
					if( pxTCB != pxCurrentTCB )
     fd2:	68fa      	ldr	r2, [r7, #12]
     fd4:	4294      	cmp	r4, r2
     fd6:	d044      	beq.n	1062 <vTaskPrioritySet+0xc2>
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
     fd8:	68fa      	ldr	r2, [r7, #12]
     fda:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
     fdc:	42b5      	cmp	r5, r6
     fde:	bf34      	ite	cc
     fe0:	2600      	movcc	r6, #0
     fe2:	2601      	movcs	r6, #1
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
     fe4:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
					pxTCB->uxBasePriority = uxNewPriority;
     fe8:	64a5      	str	r5, [r4, #72]	; 0x48
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
     fea:	4543      	cmp	r3, r8
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
     fec:	69a3      	ldr	r3, [r4, #24]
						pxTCB->uxPriority = uxNewPriority;
     fee:	bf08      	it	eq
     ff0:	62e5      	streq	r5, [r4, #44]	; 0x2c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
     ff2:	2b00      	cmp	r3, #0
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
     ff4:	f04f 0314 	mov.w	r3, #20
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     ff8:	bfa4      	itt	ge
     ffa:	f1c5 0505 	rsbge	r5, r5, #5
     ffe:	61a5      	strge	r5, [r4, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    1000:	4d1a      	ldr	r5, [pc, #104]	; (106c <vTaskPrioritySet+0xcc>)
    1002:	6962      	ldr	r2, [r4, #20]
    1004:	fb03 5308 	mla	r3, r3, r8, r5
    1008:	429a      	cmp	r2, r3
    100a:	d118      	bne.n	103e <vTaskPrioritySet+0x9e>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    100c:	f104 0904 	add.w	r9, r4, #4
    1010:	4648      	mov	r0, r9
    1012:	f7ff f8f8 	bl	206 <uxListRemove>
    1016:	b930      	cbnz	r0, 1026 <vTaskPrioritySet+0x86>
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
    1018:	2201      	movs	r2, #1
    101a:	693b      	ldr	r3, [r7, #16]
    101c:	fa02 f808 	lsl.w	r8, r2, r8
    1020:	ea23 0308 	bic.w	r3, r3, r8
    1024:	613b      	str	r3, [r7, #16]
					prvAddTaskToReadyList( pxTCB );
    1026:	2301      	movs	r3, #1
    1028:	2014      	movs	r0, #20
    102a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    102c:	6939      	ldr	r1, [r7, #16]
    102e:	4093      	lsls	r3, r2
    1030:	430b      	orrs	r3, r1
    1032:	fb00 5002 	mla	r0, r0, r2, r5
    1036:	4649      	mov	r1, r9
    1038:	613b      	str	r3, [r7, #16]
    103a:	f7ff f8c1 	bl	1c0 <vListInsertEnd>
				if( xYieldRequired != pdFALSE )
    103e:	b13e      	cbz	r6, 1050 <vTaskPrioritySet+0xb0>
					taskYIELD_IF_USING_PREEMPTION();
    1040:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    1044:	4b0a      	ldr	r3, [pc, #40]	; (1070 <vTaskPrioritySet+0xd0>)
    1046:	601a      	str	r2, [r3, #0]
    1048:	f3bf 8f4f 	dsb	sy
    104c:	f3bf 8f6f 	isb	sy
	}
    1050:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		taskEXIT_CRITICAL();
    1054:	f001 bcd2 	b.w	29fc <vPortExitCritical>
				else if( pxTCB == pxCurrentTCB )
    1058:	68fe      	ldr	r6, [r7, #12]
    105a:	1ba2      	subs	r2, r4, r6
    105c:	4256      	negs	r6, r2
    105e:	4156      	adcs	r6, r2
    1060:	e7c0      	b.n	fe4 <vTaskPrioritySet+0x44>
	BaseType_t xYieldRequired = pdFALSE;
    1062:	2600      	movs	r6, #0
    1064:	e7be      	b.n	fe4 <vTaskPrioritySet+0x44>
    1066:	bf00      	nop
    1068:	100012f4 	.word	0x100012f4
    106c:	10001338 	.word	0x10001338
    1070:	e000ed04 	.word	0xe000ed04

00001074 <vTaskResume>:
	{
    1074:	b570      	push	{r4, r5, r6, lr}
		configASSERT( xTaskToResume );
    1076:	4604      	mov	r4, r0
    1078:	b940      	cbnz	r0, 108c <vTaskResume+0x18>
    107a:	f04f 0328 	mov.w	r3, #40	; 0x28
    107e:	f383 8811 	msr	BASEPRI, r3
    1082:	f3bf 8f6f 	isb	sy
    1086:	f3bf 8f4f 	dsb	sy
    108a:	e7fe      	b.n	108a <vTaskResume+0x16>
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    108c:	4d16      	ldr	r5, [pc, #88]	; (10e8 <vTaskResume+0x74>)
    108e:	68eb      	ldr	r3, [r5, #12]
    1090:	4298      	cmp	r0, r3
    1092:	d028      	beq.n	10e6 <vTaskResume+0x72>
			taskENTER_CRITICAL();
    1094:	f001 fc90 	bl	29b8 <vPortEnterCritical>
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
    1098:	4620      	mov	r0, r4
    109a:	f7ff fdec 	bl	c76 <prvTaskIsTaskSuspended>
    109e:	b1f0      	cbz	r0, 10de <vTaskResume+0x6a>
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
    10a0:	1d26      	adds	r6, r4, #4
    10a2:	4630      	mov	r0, r6
    10a4:	f7ff f8af 	bl	206 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    10a8:	2301      	movs	r3, #1
    10aa:	2014      	movs	r0, #20
    10ac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    10ae:	6929      	ldr	r1, [r5, #16]
    10b0:	4093      	lsls	r3, r2
    10b2:	430b      	orrs	r3, r1
    10b4:	612b      	str	r3, [r5, #16]
    10b6:	f105 0344 	add.w	r3, r5, #68	; 0x44
    10ba:	fb00 3002 	mla	r0, r0, r2, r3
    10be:	4631      	mov	r1, r6
    10c0:	f7ff f87e 	bl	1c0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    10c4:	68eb      	ldr	r3, [r5, #12]
    10c6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    10c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    10ca:	429a      	cmp	r2, r3
    10cc:	d307      	bcc.n	10de <vTaskResume+0x6a>
						taskYIELD_IF_USING_PREEMPTION();
    10ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    10d2:	4b06      	ldr	r3, [pc, #24]	; (10ec <vTaskResume+0x78>)
    10d4:	601a      	str	r2, [r3, #0]
    10d6:	f3bf 8f4f 	dsb	sy
    10da:	f3bf 8f6f 	isb	sy
	}
    10de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			taskEXIT_CRITICAL();
    10e2:	f001 bc8b 	b.w	29fc <vPortExitCritical>
    10e6:	bd70      	pop	{r4, r5, r6, pc}
    10e8:	100012f4 	.word	0x100012f4
    10ec:	e000ed04 	.word	0xe000ed04

000010f0 <xTaskResumeFromISR>:
	{
    10f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		configASSERT( xTaskToResume );
    10f4:	4606      	mov	r6, r0
    10f6:	b940      	cbnz	r0, 110a <xTaskResumeFromISR+0x1a>
    10f8:	f04f 0328 	mov.w	r3, #40	; 0x28
    10fc:	f383 8811 	msr	BASEPRI, r3
    1100:	f3bf 8f6f 	isb	sy
    1104:	f3bf 8f4f 	dsb	sy
    1108:	e7fe      	b.n	1108 <xTaskResumeFromISR+0x18>
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
    110a:	f001 fd1d 	bl	2b48 <vPortValidateInterruptPriority>
	__asm volatile
    110e:	f3ef 8711 	mrs	r7, BASEPRI
    1112:	f04f 0328 	mov.w	r3, #40	; 0x28
    1116:	f383 8811 	msr	BASEPRI, r3
    111a:	f3bf 8f6f 	isb	sy
    111e:	f3bf 8f4f 	dsb	sy
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
    1122:	4630      	mov	r0, r6
    1124:	f7ff fda7 	bl	c76 <prvTaskIsTaskSuspended>
    1128:	b348      	cbz	r0, 117e <xTaskResumeFromISR+0x8e>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    112a:	4d16      	ldr	r5, [pc, #88]	; (1184 <xTaskResumeFromISR+0x94>)
    112c:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
    1130:	b9eb      	cbnz	r3, 116e <xTaskResumeFromISR+0x7e>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1132:	68eb      	ldr	r3, [r5, #12]
    1134:	6af4      	ldr	r4, [r6, #44]	; 0x2c
    1136:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    1138:	f106 0804 	add.w	r8, r6, #4
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    113c:	4284      	cmp	r4, r0
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    113e:	4640      	mov	r0, r8
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1140:	bf34      	ite	cc
    1142:	2400      	movcc	r4, #0
    1144:	2401      	movcs	r4, #1
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    1146:	f7ff f85e 	bl	206 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    114a:	2301      	movs	r3, #1
    114c:	2014      	movs	r0, #20
    114e:	6af2      	ldr	r2, [r6, #44]	; 0x2c
    1150:	6929      	ldr	r1, [r5, #16]
    1152:	4093      	lsls	r3, r2
    1154:	430b      	orrs	r3, r1
    1156:	612b      	str	r3, [r5, #16]
    1158:	3544      	adds	r5, #68	; 0x44
    115a:	4641      	mov	r1, r8
    115c:	fb00 5002 	mla	r0, r0, r2, r5
    1160:	f7ff f82e 	bl	1c0 <vListInsertEnd>
	__asm volatile
    1164:	f387 8811 	msr	BASEPRI, r7
	}
    1168:	4620      	mov	r0, r4
    116a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    116e:	f106 0118 	add.w	r1, r6, #24
    1172:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    1176:	f7ff f823 	bl	1c0 <vListInsertEnd>
	BaseType_t xYieldRequired = pdFALSE;
    117a:	2400      	movs	r4, #0
    117c:	e7f2      	b.n	1164 <xTaskResumeFromISR+0x74>
    117e:	4604      	mov	r4, r0
    1180:	e7f0      	b.n	1164 <xTaskResumeFromISR+0x74>
    1182:	bf00      	nop
    1184:	100012f4 	.word	0x100012f4

00001188 <vTaskStartScheduler>:
{
    1188:	b537      	push	{r0, r1, r2, r4, r5, lr}
		xReturn = xTaskCreate(	prvIdleTask,
    118a:	2500      	movs	r5, #0
    118c:	4c18      	ldr	r4, [pc, #96]	; (11f0 <vTaskStartScheduler+0x68>)
    118e:	9500      	str	r5, [sp, #0]
    1190:	f104 03f4 	add.w	r3, r4, #244	; 0xf4
    1194:	9301      	str	r3, [sp, #4]
    1196:	225a      	movs	r2, #90	; 0x5a
    1198:	462b      	mov	r3, r5
    119a:	4916      	ldr	r1, [pc, #88]	; (11f4 <vTaskStartScheduler+0x6c>)
    119c:	4816      	ldr	r0, [pc, #88]	; (11f8 <vTaskStartScheduler+0x70>)
    119e:	f7ff fd7f 	bl	ca0 <xTaskCreate>
		if( xReturn == pdPASS )
    11a2:	2801      	cmp	r0, #1
    11a4:	d116      	bne.n	11d4 <vTaskStartScheduler+0x4c>
			xReturn = xTimerCreateTimerTask();
    11a6:	f000 ffc5 	bl	2134 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
    11aa:	2801      	cmp	r0, #1
    11ac:	d112      	bne.n	11d4 <vTaskStartScheduler+0x4c>
	__asm volatile
    11ae:	f04f 0328 	mov.w	r3, #40	; 0x28
    11b2:	f383 8811 	msr	BASEPRI, r3
    11b6:	f3bf 8f6f 	isb	sy
    11ba:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
    11be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    11c2:	6063      	str	r3, [r4, #4]
		xSchedulerRunning = pdTRUE;
    11c4:	f8c4 00e4 	str.w	r0, [r4, #228]	; 0xe4
		xTickCount = ( TickType_t ) 0U;
    11c8:	60a5      	str	r5, [r4, #8]
}
    11ca:	b003      	add	sp, #12
    11cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		if( xPortStartScheduler() != pdFALSE )
    11d0:	f001 bc72 	b.w	2ab8 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    11d4:	3001      	adds	r0, #1
    11d6:	d108      	bne.n	11ea <vTaskStartScheduler+0x62>
    11d8:	f04f 0328 	mov.w	r3, #40	; 0x28
    11dc:	f383 8811 	msr	BASEPRI, r3
    11e0:	f3bf 8f6f 	isb	sy
    11e4:	f3bf 8f4f 	dsb	sy
    11e8:	e7fe      	b.n	11e8 <vTaskStartScheduler+0x60>
}
    11ea:	b003      	add	sp, #12
    11ec:	bd30      	pop	{r4, r5, pc}
    11ee:	bf00      	nop
    11f0:	100012f4 	.word	0x100012f4
    11f4:	0000a5f0 	.word	0x0000a5f0
    11f8:	00001515 	.word	0x00001515

000011fc <vTaskEndScheduler>:
    11fc:	f04f 0328 	mov.w	r3, #40	; 0x28
    1200:	f383 8811 	msr	BASEPRI, r3
    1204:	f3bf 8f6f 	isb	sy
    1208:	f3bf 8f4f 	dsb	sy
	xSchedulerRunning = pdFALSE;
    120c:	2200      	movs	r2, #0
    120e:	4b02      	ldr	r3, [pc, #8]	; (1218 <vTaskEndScheduler+0x1c>)
    1210:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	vPortEndScheduler();
    1214:	f001 bbbe 	b.w	2994 <vPortEndScheduler>
    1218:	100012f4 	.word	0x100012f4

0000121c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
    121c:	4a03      	ldr	r2, [pc, #12]	; (122c <vTaskSuspendAll+0x10>)
    121e:	f8d2 30f0 	ldr.w	r3, [r2, #240]	; 0xf0
    1222:	3301      	adds	r3, #1
    1224:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    1228:	4770      	bx	lr
    122a:	bf00      	nop
    122c:	100012f4 	.word	0x100012f4

00001230 <xTaskGetTickCount>:
		xTicks = xTickCount;
    1230:	4b01      	ldr	r3, [pc, #4]	; (1238 <xTaskGetTickCount+0x8>)
    1232:	6898      	ldr	r0, [r3, #8]
}
    1234:	4770      	bx	lr
    1236:	bf00      	nop
    1238:	100012f4 	.word	0x100012f4

0000123c <xTaskGetTickCountFromISR>:
{
    123c:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
    123e:	f001 fc83 	bl	2b48 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
    1242:	4b01      	ldr	r3, [pc, #4]	; (1248 <xTaskGetTickCountFromISR+0xc>)
    1244:	6898      	ldr	r0, [r3, #8]
}
    1246:	bd08      	pop	{r3, pc}
    1248:	100012f4 	.word	0x100012f4

0000124c <uxTaskGetNumberOfTasks>:
	return uxCurrentNumberOfTasks;
    124c:	4b01      	ldr	r3, [pc, #4]	; (1254 <uxTaskGetNumberOfTasks+0x8>)
    124e:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    1250:	4770      	bx	lr
    1252:	bf00      	nop
    1254:	100012f4 	.word	0x100012f4

00001258 <pcTaskGetName>:
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
    1258:	b958      	cbnz	r0, 1272 <pcTaskGetName+0x1a>
    125a:	4b07      	ldr	r3, [pc, #28]	; (1278 <pcTaskGetName+0x20>)
    125c:	68d8      	ldr	r0, [r3, #12]
	configASSERT( pxTCB );
    125e:	b940      	cbnz	r0, 1272 <pcTaskGetName+0x1a>
    1260:	f04f 0328 	mov.w	r3, #40	; 0x28
    1264:	f383 8811 	msr	BASEPRI, r3
    1268:	f3bf 8f6f 	isb	sy
    126c:	f3bf 8f4f 	dsb	sy
    1270:	e7fe      	b.n	1270 <pcTaskGetName+0x18>
}
    1272:	3034      	adds	r0, #52	; 0x34
    1274:	4770      	bx	lr
    1276:	bf00      	nop
    1278:	100012f4 	.word	0x100012f4

0000127c <xTaskIncrementTick>:
{
    127c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1280:	4b35      	ldr	r3, [pc, #212]	; (1358 <xTaskIncrementTick+0xdc>)
    1282:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    1286:	461c      	mov	r4, r3
    1288:	2a00      	cmp	r2, #0
    128a:	d13b      	bne.n	1304 <xTaskIncrementTick+0x88>
		const TickType_t xConstTickCount = xTickCount + 1;
    128c:	689e      	ldr	r6, [r3, #8]
    128e:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
    1290:	609e      	str	r6, [r3, #8]
		if( xConstTickCount == ( TickType_t ) 0U )
    1292:	b9b6      	cbnz	r6, 12c2 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
    1294:	681b      	ldr	r3, [r3, #0]
    1296:	681b      	ldr	r3, [r3, #0]
    1298:	b143      	cbz	r3, 12ac <xTaskIncrementTick+0x30>
    129a:	f04f 0328 	mov.w	r3, #40	; 0x28
    129e:	f383 8811 	msr	BASEPRI, r3
    12a2:	f3bf 8f6f 	isb	sy
    12a6:	f3bf 8f4f 	dsb	sy
    12aa:	e7fe      	b.n	12aa <xTaskIncrementTick+0x2e>
    12ac:	6823      	ldr	r3, [r4, #0]
    12ae:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    12b0:	6022      	str	r2, [r4, #0]
    12b2:	62a3      	str	r3, [r4, #40]	; 0x28
    12b4:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
    12b8:	3301      	adds	r3, #1
    12ba:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
    12be:	f7ff fc8b 	bl	bd8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
    12c2:	6863      	ldr	r3, [r4, #4]
    12c4:	2500      	movs	r5, #0
    12c6:	429e      	cmp	r6, r3
    12c8:	d30b      	bcc.n	12e2 <xTaskIncrementTick+0x66>
					prvAddTaskToReadyList( pxTCB );
    12ca:	f04f 0901 	mov.w	r9, #1
    12ce:	f04f 0b14 	mov.w	fp, #20
    12d2:	f8df a088 	ldr.w	sl, [pc, #136]	; 135c <xTaskIncrementTick+0xe0>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    12d6:	6823      	ldr	r3, [r4, #0]
    12d8:	681b      	ldr	r3, [r3, #0]
    12da:	b9d3      	cbnz	r3, 1312 <xTaskIncrementTick+0x96>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    12dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    12e0:	6063      	str	r3, [r4, #4]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    12e2:	2214      	movs	r2, #20
    12e4:	68e3      	ldr	r3, [r4, #12]
    12e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    12e8:	fb02 4303 	mla	r3, r2, r3, r4
    12ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
				xSwitchRequired = pdTRUE;
    12ee:	2b02      	cmp	r3, #2
    12f0:	bf28      	it	cs
    12f2:	2501      	movcs	r5, #1
		if( xYieldPending != pdFALSE )
    12f4:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
			xSwitchRequired = pdTRUE;
    12f8:	2b00      	cmp	r3, #0
    12fa:	bf18      	it	ne
    12fc:	2501      	movne	r5, #1
}
    12fe:	4628      	mov	r0, r5
    1300:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		++uxPendedTicks;
    1304:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
BaseType_t xSwitchRequired = pdFALSE;
    1308:	2500      	movs	r5, #0
		++uxPendedTicks;
    130a:	3301      	adds	r3, #1
    130c:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
    1310:	e7f0      	b.n	12f4 <xTaskIncrementTick+0x78>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    1312:	6823      	ldr	r3, [r4, #0]
    1314:	68db      	ldr	r3, [r3, #12]
    1316:	68df      	ldr	r7, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    1318:	687b      	ldr	r3, [r7, #4]
					if( xConstTickCount < xItemValue )
    131a:	429e      	cmp	r6, r3
    131c:	d3e0      	bcc.n	12e0 <xTaskIncrementTick+0x64>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    131e:	f107 0804 	add.w	r8, r7, #4
    1322:	4640      	mov	r0, r8
    1324:	f7fe ff6f 	bl	206 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    1328:	6abb      	ldr	r3, [r7, #40]	; 0x28
    132a:	b11b      	cbz	r3, 1334 <xTaskIncrementTick+0xb8>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    132c:	f107 0018 	add.w	r0, r7, #24
    1330:	f7fe ff69 	bl	206 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    1334:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    1336:	6922      	ldr	r2, [r4, #16]
    1338:	fa09 f300 	lsl.w	r3, r9, r0
    133c:	4313      	orrs	r3, r2
    133e:	4641      	mov	r1, r8
    1340:	fb0b a000 	mla	r0, fp, r0, sl
    1344:	6123      	str	r3, [r4, #16]
    1346:	f7fe ff3b 	bl	1c0 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    134a:	68e3      	ldr	r3, [r4, #12]
    134c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    134e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
    1350:	429a      	cmp	r2, r3
    1352:	bf28      	it	cs
    1354:	2501      	movcs	r5, #1
    1356:	e7be      	b.n	12d6 <xTaskIncrementTick+0x5a>
    1358:	100012f4 	.word	0x100012f4
    135c:	10001338 	.word	0x10001338

00001360 <xTaskResumeAll>:
{
    1360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
    1364:	4c31      	ldr	r4, [pc, #196]	; (142c <xTaskResumeAll+0xcc>)
    1366:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    136a:	b943      	cbnz	r3, 137e <xTaskResumeAll+0x1e>
    136c:	f04f 0328 	mov.w	r3, #40	; 0x28
    1370:	f383 8811 	msr	BASEPRI, r3
    1374:	f3bf 8f6f 	isb	sy
    1378:	f3bf 8f4f 	dsb	sy
    137c:	e7fe      	b.n	137c <xTaskResumeAll+0x1c>
	taskENTER_CRITICAL();
    137e:	f001 fb1b 	bl	29b8 <vPortEnterCritical>
		--uxSchedulerSuspended;
    1382:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    1386:	3b01      	subs	r3, #1
    1388:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    138c:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
    1390:	b12d      	cbz	r5, 139e <xTaskResumeAll+0x3e>
BaseType_t xAlreadyYielded = pdFALSE;
    1392:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
    1394:	f001 fb32 	bl	29fc <vPortExitCritical>
}
    1398:	4620      	mov	r0, r4
    139a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    139e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    13a0:	2b00      	cmp	r3, #0
    13a2:	d0f6      	beq.n	1392 <xTaskResumeAll+0x32>
					prvAddTaskToReadyList( pxTCB );
    13a4:	2601      	movs	r6, #1
    13a6:	f04f 0814 	mov.w	r8, #20
    13aa:	f104 0744 	add.w	r7, r4, #68	; 0x44
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    13ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    13b0:	b9eb      	cbnz	r3, 13ee <xTaskResumeAll+0x8e>
				if( pxTCB != NULL )
    13b2:	b10d      	cbz	r5, 13b8 <xTaskResumeAll+0x58>
					prvResetNextTaskUnblockTime();
    13b4:	f7ff fc10 	bl	bd8 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    13b8:	f8d4 50fc 	ldr.w	r5, [r4, #252]	; 0xfc
					if( uxPendedCounts > ( UBaseType_t ) 0U )
    13bc:	b14d      	cbz	r5, 13d2 <xTaskResumeAll+0x72>
								xYieldPending = pdTRUE;
    13be:	2601      	movs	r6, #1
							if( xTaskIncrementTick() != pdFALSE )
    13c0:	f7ff ff5c 	bl	127c <xTaskIncrementTick>
    13c4:	b108      	cbz	r0, 13ca <xTaskResumeAll+0x6a>
								xYieldPending = pdTRUE;
    13c6:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    13ca:	3d01      	subs	r5, #1
    13cc:	d1f8      	bne.n	13c0 <xTaskResumeAll+0x60>
						uxPendedTicks = 0;
    13ce:	f8c4 50fc 	str.w	r5, [r4, #252]	; 0xfc
				if( xYieldPending != pdFALSE )
    13d2:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    13d6:	2b00      	cmp	r3, #0
    13d8:	d0db      	beq.n	1392 <xTaskResumeAll+0x32>
					taskYIELD_IF_USING_PREEMPTION();
    13da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    13de:	4b14      	ldr	r3, [pc, #80]	; (1430 <xTaskResumeAll+0xd0>)
    13e0:	601a      	str	r2, [r3, #0]
    13e2:	f3bf 8f4f 	dsb	sy
    13e6:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
    13ea:	2401      	movs	r4, #1
    13ec:	e7d2      	b.n	1394 <xTaskResumeAll+0x34>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    13ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    13f0:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    13f2:	f105 0904 	add.w	r9, r5, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    13f6:	f105 0018 	add.w	r0, r5, #24
    13fa:	f7fe ff04 	bl	206 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    13fe:	4648      	mov	r0, r9
    1400:	f7fe ff01 	bl	206 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    1404:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    1406:	6922      	ldr	r2, [r4, #16]
    1408:	fa06 f300 	lsl.w	r3, r6, r0
    140c:	4313      	orrs	r3, r2
    140e:	4649      	mov	r1, r9
    1410:	fb08 7000 	mla	r0, r8, r0, r7
    1414:	6123      	str	r3, [r4, #16]
    1416:	f7fe fed3 	bl	1c0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    141a:	68e3      	ldr	r3, [r4, #12]
    141c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    141e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1420:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
    1422:	bf28      	it	cs
    1424:	f8c4 6100 	strcs.w	r6, [r4, #256]	; 0x100
    1428:	e7c1      	b.n	13ae <xTaskResumeAll+0x4e>
    142a:	bf00      	nop
    142c:	100012f4 	.word	0x100012f4
    1430:	e000ed04 	.word	0xe000ed04

00001434 <vTaskDelayUntil>:
	{
    1434:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
    1436:	b940      	cbnz	r0, 144a <vTaskDelayUntil+0x16>
    1438:	f04f 0328 	mov.w	r3, #40	; 0x28
    143c:	f383 8811 	msr	BASEPRI, r3
    1440:	f3bf 8f6f 	isb	sy
    1444:	f3bf 8f4f 	dsb	sy
    1448:	e7fe      	b.n	1448 <vTaskDelayUntil+0x14>
		configASSERT( ( xTimeIncrement > 0U ) );
    144a:	b941      	cbnz	r1, 145e <vTaskDelayUntil+0x2a>
    144c:	f04f 0328 	mov.w	r3, #40	; 0x28
    1450:	f383 8811 	msr	BASEPRI, r3
    1454:	f3bf 8f6f 	isb	sy
    1458:	f3bf 8f4f 	dsb	sy
    145c:	e7fe      	b.n	145c <vTaskDelayUntil+0x28>
		configASSERT( uxSchedulerSuspended == 0 );
    145e:	4d18      	ldr	r5, [pc, #96]	; (14c0 <vTaskDelayUntil+0x8c>)
    1460:	f8d5 40f0 	ldr.w	r4, [r5, #240]	; 0xf0
    1464:	b144      	cbz	r4, 1478 <vTaskDelayUntil+0x44>
    1466:	f04f 0328 	mov.w	r3, #40	; 0x28
    146a:	f383 8811 	msr	BASEPRI, r3
    146e:	f3bf 8f6f 	isb	sy
    1472:	f3bf 8f4f 	dsb	sy
    1476:	e7fe      	b.n	1476 <vTaskDelayUntil+0x42>
		vTaskSuspendAll();
    1478:	f7ff fed0 	bl	121c <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
    147c:	68ad      	ldr	r5, [r5, #8]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    147e:	6802      	ldr	r2, [r0, #0]
			if( xConstTickCount < *pxPreviousWakeTime )
    1480:	4295      	cmp	r5, r2
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    1482:	eb01 0302 	add.w	r3, r1, r2
			if( xConstTickCount < *pxPreviousWakeTime )
    1486:	d217      	bcs.n	14b8 <vTaskDelayUntil+0x84>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
    1488:	429a      	cmp	r2, r3
    148a:	d903      	bls.n	1494 <vTaskDelayUntil+0x60>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
    148c:	429d      	cmp	r5, r3
    148e:	bf2c      	ite	cs
    1490:	2400      	movcs	r4, #0
    1492:	2401      	movcc	r4, #1
			*pxPreviousWakeTime = xTimeToWake;
    1494:	6003      	str	r3, [r0, #0]
			if( xShouldDelay != pdFALSE )
    1496:	b11c      	cbz	r4, 14a0 <vTaskDelayUntil+0x6c>
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
    1498:	2100      	movs	r1, #0
    149a:	1b58      	subs	r0, r3, r5
    149c:	f7ff fbac 	bl	bf8 <prvAddCurrentTaskToDelayedList>
		xAlreadyYielded = xTaskResumeAll();
    14a0:	f7ff ff5e 	bl	1360 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
    14a4:	b938      	cbnz	r0, 14b6 <vTaskDelayUntil+0x82>
			portYIELD_WITHIN_API();
    14a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    14aa:	4b06      	ldr	r3, [pc, #24]	; (14c4 <vTaskDelayUntil+0x90>)
    14ac:	601a      	str	r2, [r3, #0]
    14ae:	f3bf 8f4f 	dsb	sy
    14b2:	f3bf 8f6f 	isb	sy
    14b6:	bd38      	pop	{r3, r4, r5, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
    14b8:	429a      	cmp	r2, r3
    14ba:	d9e7      	bls.n	148c <vTaskDelayUntil+0x58>
					xShouldDelay = pdTRUE;
    14bc:	2401      	movs	r4, #1
    14be:	e7e9      	b.n	1494 <vTaskDelayUntil+0x60>
    14c0:	100012f4 	.word	0x100012f4
    14c4:	e000ed04 	.word	0xe000ed04

000014c8 <vTaskDelay>:
	{
    14c8:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
    14ca:	b940      	cbnz	r0, 14de <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
    14cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    14d0:	4b0e      	ldr	r3, [pc, #56]	; (150c <vTaskDelay+0x44>)
    14d2:	601a      	str	r2, [r3, #0]
    14d4:	f3bf 8f4f 	dsb	sy
    14d8:	f3bf 8f6f 	isb	sy
    14dc:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
    14de:	4b0c      	ldr	r3, [pc, #48]	; (1510 <vTaskDelay+0x48>)
    14e0:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
    14e4:	b141      	cbz	r1, 14f8 <vTaskDelay+0x30>
    14e6:	f04f 0328 	mov.w	r3, #40	; 0x28
    14ea:	f383 8811 	msr	BASEPRI, r3
    14ee:	f3bf 8f6f 	isb	sy
    14f2:	f3bf 8f4f 	dsb	sy
    14f6:	e7fe      	b.n	14f6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
    14f8:	f7ff fe90 	bl	121c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    14fc:	f7ff fb7c 	bl	bf8 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
    1500:	f7ff ff2e 	bl	1360 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
    1504:	2800      	cmp	r0, #0
    1506:	d0e1      	beq.n	14cc <vTaskDelay+0x4>
    1508:	bd08      	pop	{r3, pc}
    150a:	bf00      	nop
    150c:	e000ed04 	.word	0xe000ed04
    1510:	100012f4 	.word	0x100012f4

00001514 <prvIdleTask>:
{
    1514:	b580      	push	{r7, lr}
				taskYIELD();
    1516:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    151a:	4c17      	ldr	r4, [pc, #92]	; (1578 <prvIdleTask+0x64>)
				taskYIELD();
    151c:	4e17      	ldr	r6, [pc, #92]	; (157c <prvIdleTask+0x68>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    151e:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
    1522:	b943      	cbnz	r3, 1536 <prvIdleTask+0x22>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    1524:	6c63      	ldr	r3, [r4, #68]	; 0x44
    1526:	2b01      	cmp	r3, #1
    1528:	d9f9      	bls.n	151e <prvIdleTask+0xa>
				taskYIELD();
    152a:	6037      	str	r7, [r6, #0]
    152c:	f3bf 8f4f 	dsb	sy
    1530:	f3bf 8f6f 	isb	sy
    1534:	e7f3      	b.n	151e <prvIdleTask+0xa>
			vTaskSuspendAll();
    1536:	f7ff fe71 	bl	121c <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    153a:	f8d4 50d0 	ldr.w	r5, [r4, #208]	; 0xd0
			( void ) xTaskResumeAll();
    153e:	f7ff ff0f 	bl	1360 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
    1542:	2d00      	cmp	r5, #0
    1544:	d0eb      	beq.n	151e <prvIdleTask+0xa>
				taskENTER_CRITICAL();
    1546:	f001 fa37 	bl	29b8 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    154a:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
    154e:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    1550:	1d28      	adds	r0, r5, #4
    1552:	f7fe fe58 	bl	206 <uxListRemove>
					--uxCurrentNumberOfTasks;
    1556:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1558:	3b01      	subs	r3, #1
    155a:	6423      	str	r3, [r4, #64]	; 0x40
					--uxDeletedTasksWaitingCleanUp;
    155c:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
    1560:	3b01      	subs	r3, #1
    1562:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
				taskEXIT_CRITICAL();
    1566:	f001 fa49 	bl	29fc <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
    156a:	6b28      	ldr	r0, [r5, #48]	; 0x30
    156c:	f001 fb74 	bl	2c58 <vPortFree>
			vPortFree( pxTCB );
    1570:	4628      	mov	r0, r5
    1572:	f001 fb71 	bl	2c58 <vPortFree>
    1576:	e7d2      	b.n	151e <prvIdleTask+0xa>
    1578:	100012f4 	.word	0x100012f4
    157c:	e000ed04 	.word	0xe000ed04

00001580 <vTaskSetApplicationTaskTag>:
	{
    1580:	b538      	push	{r3, r4, r5, lr}
    1582:	460d      	mov	r5, r1
		if( xTask == NULL )
    1584:	b940      	cbnz	r0, 1598 <vTaskSetApplicationTaskTag+0x18>
			xTCB = ( TCB_t * ) pxCurrentTCB;
    1586:	4b05      	ldr	r3, [pc, #20]	; (159c <vTaskSetApplicationTaskTag+0x1c>)
    1588:	68dc      	ldr	r4, [r3, #12]
		taskENTER_CRITICAL();
    158a:	f001 fa15 	bl	29b8 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
    158e:	6525      	str	r5, [r4, #80]	; 0x50
	}
    1590:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
    1594:	f001 ba32 	b.w	29fc <vPortExitCritical>
    1598:	4604      	mov	r4, r0
    159a:	e7f6      	b.n	158a <vTaskSetApplicationTaskTag+0xa>
    159c:	100012f4 	.word	0x100012f4

000015a0 <xTaskGetApplicationTaskTag>:
	{
    15a0:	b510      	push	{r4, lr}
		if( xTask == NULL )
    15a2:	b940      	cbnz	r0, 15b6 <xTaskGetApplicationTaskTag+0x16>
			xTCB = ( TCB_t * ) pxCurrentTCB;
    15a4:	4b05      	ldr	r3, [pc, #20]	; (15bc <xTaskGetApplicationTaskTag+0x1c>)
    15a6:	68dc      	ldr	r4, [r3, #12]
		taskENTER_CRITICAL();
    15a8:	f001 fa06 	bl	29b8 <vPortEnterCritical>
			xReturn = xTCB->pxTaskTag;
    15ac:	6d24      	ldr	r4, [r4, #80]	; 0x50
		taskEXIT_CRITICAL();
    15ae:	f001 fa25 	bl	29fc <vPortExitCritical>
	}
    15b2:	4620      	mov	r0, r4
    15b4:	bd10      	pop	{r4, pc}
    15b6:	4604      	mov	r4, r0
    15b8:	e7f6      	b.n	15a8 <xTaskGetApplicationTaskTag+0x8>
    15ba:	bf00      	nop
    15bc:	100012f4 	.word	0x100012f4

000015c0 <xTaskCallApplicationTaskHook>:
		if( xTask == NULL )
    15c0:	b908      	cbnz	r0, 15c6 <xTaskCallApplicationTaskHook+0x6>
			xTCB = ( TCB_t * ) pxCurrentTCB;
    15c2:	4b04      	ldr	r3, [pc, #16]	; (15d4 <xTaskCallApplicationTaskHook+0x14>)
    15c4:	68d8      	ldr	r0, [r3, #12]
		if( xTCB->pxTaskTag != NULL )
    15c6:	6d03      	ldr	r3, [r0, #80]	; 0x50
    15c8:	b10b      	cbz	r3, 15ce <xTaskCallApplicationTaskHook+0xe>
			xReturn = xTCB->pxTaskTag( pvParameter );
    15ca:	4608      	mov	r0, r1
    15cc:	4718      	bx	r3
	}
    15ce:	4618      	mov	r0, r3
    15d0:	4770      	bx	lr
    15d2:	bf00      	nop
    15d4:	100012f4 	.word	0x100012f4

000015d8 <vTaskSwitchContext>:
{
    15d8:	b538      	push	{r3, r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    15da:	4c1b      	ldr	r4, [pc, #108]	; (1648 <vTaskSwitchContext+0x70>)
    15dc:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    15e0:	4625      	mov	r5, r4
    15e2:	b11b      	cbz	r3, 15ec <vTaskSwitchContext+0x14>
		xYieldPending = pdTRUE;
    15e4:	2301      	movs	r3, #1
    15e6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    15ea:	bd38      	pop	{r3, r4, r5, pc}
		xYieldPending = pdFALSE;
    15ec:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
		traceTASK_SWITCHED_OUT();
    15f0:	f001 fc3e 	bl	2e70 <switchOUT>
		taskSELECT_HIGHEST_PRIORITY_TASK();
    15f4:	6923      	ldr	r3, [r4, #16]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
    15f6:	fab3 f383 	clz	r3, r3
    15fa:	2214      	movs	r2, #20
    15fc:	b2db      	uxtb	r3, r3
    15fe:	f1c3 031f 	rsb	r3, r3, #31
    1602:	435a      	muls	r2, r3
    1604:	4414      	add	r4, r2
    1606:	6c61      	ldr	r1, [r4, #68]	; 0x44
    1608:	b941      	cbnz	r1, 161c <vTaskSwitchContext+0x44>
	__asm volatile
    160a:	f04f 0328 	mov.w	r3, #40	; 0x28
    160e:	f383 8811 	msr	BASEPRI, r3
    1612:	f3bf 8f6f 	isb	sy
    1616:	f3bf 8f4f 	dsb	sy
    161a:	e7fe      	b.n	161a <vTaskSwitchContext+0x42>
    161c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    161e:	442a      	add	r2, r5
    1620:	6849      	ldr	r1, [r1, #4]
    1622:	324c      	adds	r2, #76	; 0x4c
    1624:	4291      	cmp	r1, r2
    1626:	bf08      	it	eq
    1628:	684a      	ldreq	r2, [r1, #4]
    162a:	64a1      	str	r1, [r4, #72]	; 0x48
    162c:	bf08      	it	eq
    162e:	64a2      	streq	r2, [r4, #72]	; 0x48
    1630:	2214      	movs	r2, #20
    1632:	fb02 5303 	mla	r3, r2, r3, r5
    1636:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    1638:	68db      	ldr	r3, [r3, #12]
    163a:	60eb      	str	r3, [r5, #12]
		traceTASK_SWITCHED_IN();
    163c:	68eb      	ldr	r3, [r5, #12]
    163e:	6d18      	ldr	r0, [r3, #80]	; 0x50
}
    1640:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		traceTASK_SWITCHED_IN();
    1644:	f001 bbfe 	b.w	2e44 <switchIN>
    1648:	100012f4 	.word	0x100012f4

0000164c <vTaskSuspend>:
	{
    164c:	b570      	push	{r4, r5, r6, lr}
    164e:	4605      	mov	r5, r0
    1650:	4c28      	ldr	r4, [pc, #160]	; (16f4 <vTaskSuspend+0xa8>)
		taskENTER_CRITICAL();
    1652:	f001 f9b1 	bl	29b8 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
    1656:	b905      	cbnz	r5, 165a <vTaskSuspend+0xe>
    1658:	68e5      	ldr	r5, [r4, #12]
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    165a:	1d2e      	adds	r6, r5, #4
    165c:	4630      	mov	r0, r6
    165e:	f7fe fdd2 	bl	206 <uxListRemove>
    1662:	b958      	cbnz	r0, 167c <vTaskSuspend+0x30>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
    1664:	2114      	movs	r1, #20
    1666:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    1668:	fb01 4100 	mla	r1, r1, r0, r4
    166c:	6c4b      	ldr	r3, [r1, #68]	; 0x44
    166e:	b92b      	cbnz	r3, 167c <vTaskSuspend+0x30>
    1670:	2201      	movs	r2, #1
    1672:	6923      	ldr	r3, [r4, #16]
    1674:	4082      	lsls	r2, r0
    1676:	ea23 0302 	bic.w	r3, r3, r2
    167a:	6123      	str	r3, [r4, #16]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    167c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    167e:	b11b      	cbz	r3, 1688 <vTaskSuspend+0x3c>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    1680:	f105 0018 	add.w	r0, r5, #24
    1684:	f7fe fdbf 	bl	206 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
    1688:	4631      	mov	r1, r6
    168a:	481b      	ldr	r0, [pc, #108]	; (16f8 <vTaskSuspend+0xac>)
    168c:	f7fe fd98 	bl	1c0 <vListInsertEnd>
		taskEXIT_CRITICAL();
    1690:	f001 f9b4 	bl	29fc <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
    1694:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    1698:	b12b      	cbz	r3, 16a6 <vTaskSuspend+0x5a>
			taskENTER_CRITICAL();
    169a:	f001 f98d 	bl	29b8 <vPortEnterCritical>
				prvResetNextTaskUnblockTime();
    169e:	f7ff fa9b 	bl	bd8 <prvResetNextTaskUnblockTime>
			taskEXIT_CRITICAL();
    16a2:	f001 f9ab 	bl	29fc <vPortExitCritical>
		if( pxTCB == pxCurrentTCB )
    16a6:	68e3      	ldr	r3, [r4, #12]
    16a8:	429d      	cmp	r5, r3
    16aa:	d121      	bne.n	16f0 <vTaskSuspend+0xa4>
			if( xSchedulerRunning != pdFALSE )
    16ac:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    16b0:	b1a3      	cbz	r3, 16dc <vTaskSuspend+0x90>
				configASSERT( uxSchedulerSuspended == 0 );
    16b2:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    16b6:	b143      	cbz	r3, 16ca <vTaskSuspend+0x7e>
    16b8:	f04f 0328 	mov.w	r3, #40	; 0x28
    16bc:	f383 8811 	msr	BASEPRI, r3
    16c0:	f3bf 8f6f 	isb	sy
    16c4:	f3bf 8f4f 	dsb	sy
    16c8:	e7fe      	b.n	16c8 <vTaskSuspend+0x7c>
				portYIELD_WITHIN_API();
    16ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    16ce:	4b0b      	ldr	r3, [pc, #44]	; (16fc <vTaskSuspend+0xb0>)
    16d0:	601a      	str	r2, [r3, #0]
    16d2:	f3bf 8f4f 	dsb	sy
    16d6:	f3bf 8f6f 	isb	sy
    16da:	bd70      	pop	{r4, r5, r6, pc}
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    16dc:	6c22      	ldr	r2, [r4, #64]	; 0x40
    16de:	6961      	ldr	r1, [r4, #20]
    16e0:	4291      	cmp	r1, r2
    16e2:	d101      	bne.n	16e8 <vTaskSuspend+0x9c>
					pxCurrentTCB = NULL;
    16e4:	60e3      	str	r3, [r4, #12]
    16e6:	bd70      	pop	{r4, r5, r6, pc}
	}
    16e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					vTaskSwitchContext();
    16ec:	f7ff bf74 	b.w	15d8 <vTaskSwitchContext>
    16f0:	bd70      	pop	{r4, r5, r6, pc}
    16f2:	bf00      	nop
    16f4:	100012f4 	.word	0x100012f4
    16f8:	10001308 	.word	0x10001308
    16fc:	e000ed04 	.word	0xe000ed04

00001700 <vTaskPlaceOnEventList>:
{
    1700:	b510      	push	{r4, lr}
    1702:	460c      	mov	r4, r1
	configASSERT( pxEventList );
    1704:	b940      	cbnz	r0, 1718 <vTaskPlaceOnEventList+0x18>
    1706:	f04f 0328 	mov.w	r3, #40	; 0x28
    170a:	f383 8811 	msr	BASEPRI, r3
    170e:	f3bf 8f6f 	isb	sy
    1712:	f3bf 8f4f 	dsb	sy
    1716:	e7fe      	b.n	1716 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    1718:	4b05      	ldr	r3, [pc, #20]	; (1730 <vTaskPlaceOnEventList+0x30>)
    171a:	68d9      	ldr	r1, [r3, #12]
    171c:	3118      	adds	r1, #24
    171e:	f7fe fd5b 	bl	1d8 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    1722:	4620      	mov	r0, r4
}
    1724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    1728:	2101      	movs	r1, #1
    172a:	f7ff ba65 	b.w	bf8 <prvAddCurrentTaskToDelayedList>
    172e:	bf00      	nop
    1730:	100012f4 	.word	0x100012f4

00001734 <vTaskPlaceOnUnorderedEventList>:
{
    1734:	b510      	push	{r4, lr}
    1736:	4614      	mov	r4, r2
	configASSERT( pxEventList );
    1738:	b940      	cbnz	r0, 174c <vTaskPlaceOnUnorderedEventList+0x18>
    173a:	f04f 0328 	mov.w	r3, #40	; 0x28
    173e:	f383 8811 	msr	BASEPRI, r3
    1742:	f3bf 8f6f 	isb	sy
    1746:	f3bf 8f4f 	dsb	sy
    174a:	e7fe      	b.n	174a <vTaskPlaceOnUnorderedEventList+0x16>
	configASSERT( uxSchedulerSuspended != 0 );
    174c:	4b0d      	ldr	r3, [pc, #52]	; (1784 <vTaskPlaceOnUnorderedEventList+0x50>)
    174e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    1752:	b942      	cbnz	r2, 1766 <vTaskPlaceOnUnorderedEventList+0x32>
    1754:	f04f 0328 	mov.w	r3, #40	; 0x28
    1758:	f383 8811 	msr	BASEPRI, r3
    175c:	f3bf 8f6f 	isb	sy
    1760:	f3bf 8f4f 	dsb	sy
    1764:	e7fe      	b.n	1764 <vTaskPlaceOnUnorderedEventList+0x30>
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    1766:	68da      	ldr	r2, [r3, #12]
    1768:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
    176c:	6191      	str	r1, [r2, #24]
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    176e:	68d9      	ldr	r1, [r3, #12]
    1770:	3118      	adds	r1, #24
    1772:	f7fe fd25 	bl	1c0 <vListInsertEnd>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    1776:	4620      	mov	r0, r4
}
    1778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    177c:	2101      	movs	r1, #1
    177e:	f7ff ba3b 	b.w	bf8 <prvAddCurrentTaskToDelayedList>
    1782:	bf00      	nop
    1784:	100012f4 	.word	0x100012f4

00001788 <vTaskPlaceOnEventListRestricted>:
	{
    1788:	b538      	push	{r3, r4, r5, lr}
    178a:	460d      	mov	r5, r1
    178c:	4614      	mov	r4, r2
		configASSERT( pxEventList );
    178e:	b940      	cbnz	r0, 17a2 <vTaskPlaceOnEventListRestricted+0x1a>
    1790:	f04f 0328 	mov.w	r3, #40	; 0x28
    1794:	f383 8811 	msr	BASEPRI, r3
    1798:	f3bf 8f6f 	isb	sy
    179c:	f3bf 8f4f 	dsb	sy
    17a0:	e7fe      	b.n	17a0 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    17a2:	4b08      	ldr	r3, [pc, #32]	; (17c4 <vTaskPlaceOnEventListRestricted+0x3c>)
    17a4:	68d9      	ldr	r1, [r3, #12]
    17a6:	3118      	adds	r1, #24
    17a8:	f7fe fd0a 	bl	1c0 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
    17ac:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    17ae:	4621      	mov	r1, r4
    17b0:	bf08      	it	eq
    17b2:	4628      	moveq	r0, r5
	}
    17b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    17b8:	bf18      	it	ne
    17ba:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    17be:	f7ff ba1b 	b.w	bf8 <prvAddCurrentTaskToDelayedList>
    17c2:	bf00      	nop
    17c4:	100012f4 	.word	0x100012f4

000017c8 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    17c8:	68c3      	ldr	r3, [r0, #12]
{
    17ca:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    17cc:	68dd      	ldr	r5, [r3, #12]
	configASSERT( pxUnblockedTCB );
    17ce:	b945      	cbnz	r5, 17e2 <xTaskRemoveFromEventList+0x1a>
    17d0:	f04f 0328 	mov.w	r3, #40	; 0x28
    17d4:	f383 8811 	msr	BASEPRI, r3
    17d8:	f3bf 8f6f 	isb	sy
    17dc:	f3bf 8f4f 	dsb	sy
    17e0:	e7fe      	b.n	17e0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    17e2:	f105 0618 	add.w	r6, r5, #24
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    17e6:	4c13      	ldr	r4, [pc, #76]	; (1834 <xTaskRemoveFromEventList+0x6c>)
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    17e8:	4630      	mov	r0, r6
    17ea:	f7fe fd0c 	bl	206 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    17ee:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    17f2:	b9db      	cbnz	r3, 182c <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    17f4:	1d2e      	adds	r6, r5, #4
    17f6:	4630      	mov	r0, r6
    17f8:	f7fe fd05 	bl	206 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
    17fc:	2301      	movs	r3, #1
    17fe:	2014      	movs	r0, #20
    1800:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    1802:	6921      	ldr	r1, [r4, #16]
    1804:	4093      	lsls	r3, r2
    1806:	430b      	orrs	r3, r1
    1808:	4631      	mov	r1, r6
    180a:	6123      	str	r3, [r4, #16]
    180c:	f104 0344 	add.w	r3, r4, #68	; 0x44
    1810:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    1814:	f7fe fcd4 	bl	1c0 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    1818:	68e3      	ldr	r3, [r4, #12]
    181a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    181c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    181e:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
    1820:	bf86      	itte	hi
    1822:	2001      	movhi	r0, #1
    1824:	f8c4 0100 	strhi.w	r0, [r4, #256]	; 0x100
		xReturn = pdFALSE;
    1828:	2000      	movls	r0, #0
}
    182a:	bd70      	pop	{r4, r5, r6, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    182c:	4631      	mov	r1, r6
    182e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    1832:	e7ef      	b.n	1814 <xTaskRemoveFromEventList+0x4c>
    1834:	100012f4 	.word	0x100012f4

00001838 <xTaskRemoveFromUnorderedEventList>:
{
    1838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended != pdFALSE );
    183a:	4d1d      	ldr	r5, [pc, #116]	; (18b0 <xTaskRemoveFromUnorderedEventList+0x78>)
    183c:	f8d5 20f0 	ldr.w	r2, [r5, #240]	; 0xf0
    1840:	b942      	cbnz	r2, 1854 <xTaskRemoveFromUnorderedEventList+0x1c>
    1842:	f04f 0328 	mov.w	r3, #40	; 0x28
    1846:	f383 8811 	msr	BASEPRI, r3
    184a:	f3bf 8f6f 	isb	sy
    184e:	f3bf 8f4f 	dsb	sy
    1852:	e7fe      	b.n	1852 <xTaskRemoveFromUnorderedEventList+0x1a>
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
    1854:	68c6      	ldr	r6, [r0, #12]
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    1856:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
    185a:	6001      	str	r1, [r0, #0]
	configASSERT( pxUnblockedTCB );
    185c:	b946      	cbnz	r6, 1870 <xTaskRemoveFromUnorderedEventList+0x38>
    185e:	f04f 0328 	mov.w	r3, #40	; 0x28
    1862:	f383 8811 	msr	BASEPRI, r3
    1866:	f3bf 8f6f 	isb	sy
    186a:	f3bf 8f4f 	dsb	sy
    186e:	e7fe      	b.n	186e <xTaskRemoveFromUnorderedEventList+0x36>
	prvAddTaskToReadyList( pxUnblockedTCB );
    1870:	2401      	movs	r4, #1
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    1872:	1d37      	adds	r7, r6, #4
	( void ) uxListRemove( pxEventListItem );
    1874:	f7fe fcc7 	bl	206 <uxListRemove>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    1878:	4638      	mov	r0, r7
    187a:	f7fe fcc4 	bl	206 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
    187e:	2014      	movs	r0, #20
    1880:	6af2      	ldr	r2, [r6, #44]	; 0x2c
    1882:	6929      	ldr	r1, [r5, #16]
    1884:	fa04 f302 	lsl.w	r3, r4, r2
    1888:	430b      	orrs	r3, r1
    188a:	612b      	str	r3, [r5, #16]
    188c:	f105 0344 	add.w	r3, r5, #68	; 0x44
    1890:	fb00 3002 	mla	r0, r0, r2, r3
    1894:	4639      	mov	r1, r7
    1896:	f7fe fc93 	bl	1c0 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    189a:	68eb      	ldr	r3, [r5, #12]
    189c:	6af2      	ldr	r2, [r6, #44]	; 0x2c
    189e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    18a0:	429a      	cmp	r2, r3
		xReturn = pdTRUE;
    18a2:	bf86      	itte	hi
    18a4:	4620      	movhi	r0, r4
		xYieldPending = pdTRUE;
    18a6:	f8c5 4100 	strhi.w	r4, [r5, #256]	; 0x100
		xReturn = pdFALSE;
    18aa:	2000      	movls	r0, #0
}
    18ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    18ae:	bf00      	nop
    18b0:	100012f4 	.word	0x100012f4

000018b4 <vTaskSetTimeOutState>:
{
    18b4:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
    18b6:	b908      	cbnz	r0, 18bc <vTaskSetTimeOutState+0x8>
    18b8:	f7ff f9d4 	bl	c64 <eTaskGetState.part.4>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    18bc:	4b03      	ldr	r3, [pc, #12]	; (18cc <vTaskSetTimeOutState+0x18>)
    18be:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
	pxTimeOut->xTimeOnEntering = xTickCount;
    18c2:	689b      	ldr	r3, [r3, #8]
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    18c4:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    18c6:	6043      	str	r3, [r0, #4]
    18c8:	bd08      	pop	{r3, pc}
    18ca:	bf00      	nop
    18cc:	100012f4 	.word	0x100012f4

000018d0 <xTaskCheckForTimeOut>:
{
    18d0:	b538      	push	{r3, r4, r5, lr}
    18d2:	460d      	mov	r5, r1
	configASSERT( pxTimeOut );
    18d4:	4604      	mov	r4, r0
    18d6:	b940      	cbnz	r0, 18ea <xTaskCheckForTimeOut+0x1a>
    18d8:	f04f 0328 	mov.w	r3, #40	; 0x28
    18dc:	f383 8811 	msr	BASEPRI, r3
    18e0:	f3bf 8f6f 	isb	sy
    18e4:	f3bf 8f4f 	dsb	sy
    18e8:	e7fe      	b.n	18e8 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
    18ea:	b941      	cbnz	r1, 18fe <xTaskCheckForTimeOut+0x2e>
    18ec:	f04f 0328 	mov.w	r3, #40	; 0x28
    18f0:	f383 8811 	msr	BASEPRI, r3
    18f4:	f3bf 8f6f 	isb	sy
    18f8:	f3bf 8f4f 	dsb	sy
    18fc:	e7fe      	b.n	18fc <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
    18fe:	f001 f85b 	bl	29b8 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
    1902:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
    1904:	4a0d      	ldr	r2, [pc, #52]	; (193c <xTaskCheckForTimeOut+0x6c>)
			if( *pxTicksToWait == portMAX_DELAY )
    1906:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
    1908:	6891      	ldr	r1, [r2, #8]
			if( *pxTicksToWait == portMAX_DELAY )
    190a:	d010      	beq.n	192e <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    190c:	f8d2 20f8 	ldr.w	r2, [r2, #248]	; 0xf8
    1910:	6820      	ldr	r0, [r4, #0]
    1912:	4290      	cmp	r0, r2
    1914:	6862      	ldr	r2, [r4, #4]
    1916:	d001      	beq.n	191c <xTaskCheckForTimeOut+0x4c>
    1918:	4291      	cmp	r1, r2
    191a:	d20d      	bcs.n	1938 <xTaskCheckForTimeOut+0x68>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    191c:	1a88      	subs	r0, r1, r2
    191e:	4283      	cmp	r3, r0
    1920:	d90a      	bls.n	1938 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
    1922:	1a5b      	subs	r3, r3, r1
    1924:	4413      	add	r3, r2
    1926:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
    1928:	4620      	mov	r0, r4
    192a:	f7ff ffc3 	bl	18b4 <vTaskSetTimeOutState>
				xReturn = pdFALSE;
    192e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
    1930:	f001 f864 	bl	29fc <vPortExitCritical>
}
    1934:	4620      	mov	r0, r4
    1936:	bd38      	pop	{r3, r4, r5, pc}
			xReturn = pdTRUE;
    1938:	2401      	movs	r4, #1
    193a:	e7f9      	b.n	1930 <xTaskCheckForTimeOut+0x60>
    193c:	100012f4 	.word	0x100012f4

00001940 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
    1940:	2201      	movs	r2, #1
    1942:	4b02      	ldr	r3, [pc, #8]	; (194c <vTaskMissedYield+0xc>)
    1944:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    1948:	4770      	bx	lr
    194a:	bf00      	nop
    194c:	100012f4 	.word	0x100012f4

00001950 <uxTaskGetTaskNumber>:
		if( xTask != NULL )
    1950:	b100      	cbz	r0, 1954 <uxTaskGetTaskNumber+0x4>
			uxReturn = pxTCB->uxTaskNumber;
    1952:	6c40      	ldr	r0, [r0, #68]	; 0x44
	}
    1954:	4770      	bx	lr

00001956 <vTaskSetTaskNumber>:
		if( xTask != NULL )
    1956:	b100      	cbz	r0, 195a <vTaskSetTaskNumber+0x4>
			pxTCB->uxTaskNumber = uxHandle;
    1958:	6441      	str	r1, [r0, #68]	; 0x44
    195a:	4770      	bx	lr

0000195c <vTaskGetInfo>:
	{
    195c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1960:	460c      	mov	r4, r1
    1962:	4617      	mov	r7, r2
    1964:	4698      	mov	r8, r3
		pxTCB = prvGetTCBFromHandle( xTask );
    1966:	4606      	mov	r6, r0
    1968:	bb60      	cbnz	r0, 19c4 <vTaskGetInfo+0x68>
    196a:	4b1b      	ldr	r3, [pc, #108]	; (19d8 <vTaskGetInfo+0x7c>)
    196c:	68dd      	ldr	r5, [r3, #12]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
    196e:	f105 0334 	add.w	r3, r5, #52	; 0x34
    1972:	6063      	str	r3, [r4, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
    1974:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
    1976:	6025      	str	r5, [r4, #0]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
    1978:	6123      	str	r3, [r4, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
    197a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    197c:	61e3      	str	r3, [r4, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
    197e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    1980:	60a3      	str	r3, [r4, #8]
			if( pxTaskStatus->eCurrentState == eSuspended )
    1982:	7b23      	ldrb	r3, [r4, #12]
    1984:	2b03      	cmp	r3, #3
    1986:	d107      	bne.n	1998 <vTaskGetInfo+0x3c>
				vTaskSuspendAll();
    1988:	f7ff fc48 	bl	121c <vTaskSuspendAll>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    198c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    198e:	b10b      	cbz	r3, 1994 <vTaskGetInfo+0x38>
						pxTaskStatus->eCurrentState = eBlocked;
    1990:	2302      	movs	r3, #2
    1992:	7323      	strb	r3, [r4, #12]
				xTaskResumeAll();
    1994:	f7ff fce4 	bl	1360 <xTaskResumeAll>
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
    1998:	6cab      	ldr	r3, [r5, #72]	; 0x48
		if( eState != eInvalid )
    199a:	f1b8 0f05 	cmp.w	r8, #5
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
    199e:	6163      	str	r3, [r4, #20]
			pxTaskStatus->ulRunTimeCounter = 0;
    19a0:	f04f 0300 	mov.w	r3, #0
    19a4:	61a3      	str	r3, [r4, #24]
		if( eState != eInvalid )
    19a6:	d00f      	beq.n	19c8 <vTaskGetInfo+0x6c>
			pxTaskStatus->eCurrentState = eState;
    19a8:	f884 800c 	strb.w	r8, [r4, #12]
		if( xGetFreeStackSpace != pdFALSE )
    19ac:	b18f      	cbz	r7, 19d2 <vTaskGetInfo+0x76>
    19ae:	6b29      	ldr	r1, [r5, #48]	; 0x30
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
    19b0:	460a      	mov	r2, r1
    19b2:	1a53      	subs	r3, r2, r1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
    19b4:	f812 0b01 	ldrb.w	r0, [r2], #1
    19b8:	28a5      	cmp	r0, #165	; 0xa5
    19ba:	d0fa      	beq.n	19b2 <vTaskGetInfo+0x56>
		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
    19bc:	089b      	lsrs	r3, r3, #2
		return ( uint16_t ) ulCount;
    19be:	8423      	strh	r3, [r4, #32]
    19c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    19c4:	4605      	mov	r5, r0
    19c6:	e7d2      	b.n	196e <vTaskGetInfo+0x12>
			pxTaskStatus->eCurrentState = eTaskGetState( xTask );
    19c8:	4630      	mov	r0, r6
    19ca:	f7ff fa95 	bl	ef8 <eTaskGetState>
    19ce:	7320      	strb	r0, [r4, #12]
    19d0:	e7ec      	b.n	19ac <vTaskGetInfo+0x50>
			pxTaskStatus->usStackHighWaterMark = 0;
    19d2:	8427      	strh	r7, [r4, #32]
    19d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    19d8:	100012f4 	.word	0x100012f4

000019dc <prvListTasksWithinSingleList>:
	{
    19dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
    19e0:	680d      	ldr	r5, [r1, #0]
	{
    19e2:	4681      	mov	r9, r0
    19e4:	460c      	mov	r4, r1
    19e6:	4693      	mov	fp, r2
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
    19e8:	b31d      	cbz	r5, 1a32 <prvListTasksWithinSingleList+0x56>
	UBaseType_t uxTask = 0;
    19ea:	2500      	movs	r5, #0
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
    19ec:	f04f 0a24 	mov.w	sl, #36	; 0x24
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
    19f0:	684b      	ldr	r3, [r1, #4]
    19f2:	f101 0708 	add.w	r7, r1, #8
    19f6:	685b      	ldr	r3, [r3, #4]
    19f8:	42bb      	cmp	r3, r7
    19fa:	604b      	str	r3, [r1, #4]
    19fc:	bf04      	itt	eq
    19fe:	68cb      	ldreq	r3, [r1, #12]
    1a00:	604b      	streq	r3, [r1, #4]
    1a02:	684b      	ldr	r3, [r1, #4]
    1a04:	f8d3 800c 	ldr.w	r8, [r3, #12]
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
    1a08:	6863      	ldr	r3, [r4, #4]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
    1a0a:	fb0a 9105 	mla	r1, sl, r5, r9
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
    1a0e:	685b      	ldr	r3, [r3, #4]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
    1a10:	2201      	movs	r2, #1
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
    1a12:	429f      	cmp	r7, r3
    1a14:	6063      	str	r3, [r4, #4]
    1a16:	bf08      	it	eq
    1a18:	68e3      	ldreq	r3, [r4, #12]
				uxTask++;
    1a1a:	f105 0501 	add.w	r5, r5, #1
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
    1a1e:	bf08      	it	eq
    1a20:	6063      	streq	r3, [r4, #4]
    1a22:	6863      	ldr	r3, [r4, #4]
    1a24:	68de      	ldr	r6, [r3, #12]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
    1a26:	465b      	mov	r3, fp
    1a28:	4630      	mov	r0, r6
    1a2a:	f7ff ff97 	bl	195c <vTaskGetInfo>
			} while( pxNextTCB != pxFirstTCB );
    1a2e:	45b0      	cmp	r8, r6
    1a30:	d1ea      	bne.n	1a08 <prvListTasksWithinSingleList+0x2c>
	}
    1a32:	4628      	mov	r0, r5
    1a34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00001a38 <uxTaskGetSystemState>:
	{
    1a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1a3c:	4606      	mov	r6, r0
    1a3e:	4617      	mov	r7, r2
		vTaskSuspendAll();
    1a40:	f7ff fbec 	bl	121c <vTaskSuspendAll>
			if( uxArraySize >= uxCurrentNumberOfTasks )
    1a44:	4d1f      	ldr	r5, [pc, #124]	; (1ac4 <uxTaskGetSystemState+0x8c>)
    1a46:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    1a48:	428b      	cmp	r3, r1
    1a4a:	d838      	bhi.n	1abe <uxTaskGetSystemState+0x86>
    1a4c:	f04f 0900 	mov.w	r9, #0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
    1a50:	f04f 0824 	mov.w	r8, #36	; 0x24
    1a54:	464c      	mov	r4, r9
    1a56:	f105 0a44 	add.w	sl, r5, #68	; 0x44
    1a5a:	f109 0150 	add.w	r1, r9, #80	; 0x50
    1a5e:	fb08 6004 	mla	r0, r8, r4, r6
    1a62:	2201      	movs	r2, #1
    1a64:	4451      	add	r1, sl
    1a66:	f7ff ffb9 	bl	19dc <prvListTasksWithinSingleList>
    1a6a:	f1a9 0914 	sub.w	r9, r9, #20
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1a6e:	f119 0f64 	cmn.w	r9, #100	; 0x64
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
    1a72:	4404      	add	r4, r0
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1a74:	d1f1      	bne.n	1a5a <uxTaskGetSystemState+0x22>
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
    1a76:	6829      	ldr	r1, [r5, #0]
    1a78:	2202      	movs	r2, #2
    1a7a:	fb08 6004 	mla	r0, r8, r4, r6
    1a7e:	f7ff ffad 	bl	19dc <prvListTasksWithinSingleList>
    1a82:	4404      	add	r4, r0
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
    1a84:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    1a86:	2202      	movs	r2, #2
    1a88:	fb08 6004 	mla	r0, r8, r4, r6
    1a8c:	f7ff ffa6 	bl	19dc <prvListTasksWithinSingleList>
    1a90:	4404      	add	r4, r0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
    1a92:	2204      	movs	r2, #4
    1a94:	490c      	ldr	r1, [pc, #48]	; (1ac8 <uxTaskGetSystemState+0x90>)
    1a96:	fb08 6004 	mla	r0, r8, r4, r6
    1a9a:	f7ff ff9f 	bl	19dc <prvListTasksWithinSingleList>
    1a9e:	4404      	add	r4, r0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
    1aa0:	fb08 6004 	mla	r0, r8, r4, r6
    1aa4:	2203      	movs	r2, #3
    1aa6:	4909      	ldr	r1, [pc, #36]	; (1acc <uxTaskGetSystemState+0x94>)
    1aa8:	f7ff ff98 	bl	19dc <prvListTasksWithinSingleList>
    1aac:	4404      	add	r4, r0
					if( pulTotalRunTime != NULL )
    1aae:	b10f      	cbz	r7, 1ab4 <uxTaskGetSystemState+0x7c>
						*pulTotalRunTime = 0;
    1ab0:	2300      	movs	r3, #0
    1ab2:	603b      	str	r3, [r7, #0]
		( void ) xTaskResumeAll();
    1ab4:	f7ff fc54 	bl	1360 <xTaskResumeAll>
	}
    1ab8:	4620      	mov	r0, r4
    1aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
    1abe:	2400      	movs	r4, #0
    1ac0:	e7f8      	b.n	1ab4 <uxTaskGetSystemState+0x7c>
    1ac2:	bf00      	nop
    1ac4:	100012f4 	.word	0x100012f4
    1ac8:	100013c4 	.word	0x100013c4
    1acc:	10001308 	.word	0x10001308

00001ad0 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
    1ad0:	4b01      	ldr	r3, [pc, #4]	; (1ad8 <xTaskGetCurrentTaskHandle+0x8>)
    1ad2:	68d8      	ldr	r0, [r3, #12]
	}
    1ad4:	4770      	bx	lr
    1ad6:	bf00      	nop
    1ad8:	100012f4 	.word	0x100012f4

00001adc <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
    1adc:	4b06      	ldr	r3, [pc, #24]	; (1af8 <xTaskGetSchedulerState+0x1c>)
    1ade:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    1ae2:	b132      	cbz	r2, 1af2 <xTaskGetSchedulerState+0x16>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1ae4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
    1ae8:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
    1aea:	bf0c      	ite	eq
    1aec:	2002      	moveq	r0, #2
    1aee:	2000      	movne	r0, #0
    1af0:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
    1af2:	2001      	movs	r0, #1
	}
    1af4:	4770      	bx	lr
    1af6:	bf00      	nop
    1af8:	100012f4 	.word	0x100012f4

00001afc <vTaskPriorityInherit>:
	{
    1afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
    1b00:	4605      	mov	r5, r0
    1b02:	2800      	cmp	r0, #0
    1b04:	d039      	beq.n	1b7a <vTaskPriorityInherit+0x7e>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    1b06:	4c1e      	ldr	r4, [pc, #120]	; (1b80 <vTaskPriorityInherit+0x84>)
    1b08:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    1b0a:	68e2      	ldr	r2, [r4, #12]
    1b0c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    1b0e:	4293      	cmp	r3, r2
    1b10:	d233      	bcs.n	1b7a <vTaskPriorityInherit+0x7e>
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    1b12:	2714      	movs	r7, #20
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    1b14:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    1b16:	4e1b      	ldr	r6, [pc, #108]	; (1b84 <vTaskPriorityInherit+0x88>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    1b18:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1b1a:	bfa8      	it	ge
    1b1c:	68e2      	ldrge	r2, [r4, #12]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    1b1e:	fb07 6303 	mla	r3, r7, r3, r6
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1b22:	bfa2      	ittt	ge
    1b24:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
    1b26:	f1c2 0205 	rsbge	r2, r2, #5
    1b2a:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    1b2c:	6942      	ldr	r2, [r0, #20]
    1b2e:	429a      	cmp	r2, r3
    1b30:	d120      	bne.n	1b74 <vTaskPriorityInherit+0x78>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    1b32:	f100 0804 	add.w	r8, r0, #4
    1b36:	4640      	mov	r0, r8
    1b38:	f7fe fb65 	bl	206 <uxListRemove>
    1b3c:	b950      	cbnz	r0, 1b54 <vTaskPriorityInherit+0x58>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
    1b3e:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    1b40:	fb07 4701 	mla	r7, r7, r1, r4
    1b44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1b46:	b92b      	cbnz	r3, 1b54 <vTaskPriorityInherit+0x58>
    1b48:	2201      	movs	r2, #1
    1b4a:	6923      	ldr	r3, [r4, #16]
    1b4c:	408a      	lsls	r2, r1
    1b4e:	ea23 0302 	bic.w	r3, r3, r2
    1b52:	6123      	str	r3, [r4, #16]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    1b54:	68e3      	ldr	r3, [r4, #12]
					prvAddTaskToReadyList( pxTCB );
    1b56:	2014      	movs	r0, #20
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    1b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
    1b5a:	2301      	movs	r3, #1
    1b5c:	6921      	ldr	r1, [r4, #16]
    1b5e:	4093      	lsls	r3, r2
    1b60:	430b      	orrs	r3, r1
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    1b62:	62ea      	str	r2, [r5, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
    1b64:	6123      	str	r3, [r4, #16]
    1b66:	4641      	mov	r1, r8
    1b68:	fb00 6002 	mla	r0, r0, r2, r6
	}
    1b6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					prvAddTaskToReadyList( pxTCB );
    1b70:	f7fe bb26 	b.w	1c0 <vListInsertEnd>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    1b74:	68e3      	ldr	r3, [r4, #12]
    1b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1b78:	62c3      	str	r3, [r0, #44]	; 0x2c
    1b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1b7e:	bf00      	nop
    1b80:	100012f4 	.word	0x100012f4
    1b84:	10001338 	.word	0x10001338

00001b88 <xTaskPriorityDisinherit>:
	{
    1b88:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
    1b8a:	4604      	mov	r4, r0
    1b8c:	b908      	cbnz	r0, 1b92 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
    1b8e:	2000      	movs	r0, #0
    1b90:	bd70      	pop	{r4, r5, r6, pc}
			configASSERT( pxTCB == pxCurrentTCB );
    1b92:	4d22      	ldr	r5, [pc, #136]	; (1c1c <xTaskPriorityDisinherit+0x94>)
    1b94:	68eb      	ldr	r3, [r5, #12]
    1b96:	4298      	cmp	r0, r3
    1b98:	d008      	beq.n	1bac <xTaskPriorityDisinherit+0x24>
    1b9a:	f04f 0328 	mov.w	r3, #40	; 0x28
    1b9e:	f383 8811 	msr	BASEPRI, r3
    1ba2:	f3bf 8f6f 	isb	sy
    1ba6:	f3bf 8f4f 	dsb	sy
    1baa:	e7fe      	b.n	1baa <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
    1bac:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    1bae:	b943      	cbnz	r3, 1bc2 <xTaskPriorityDisinherit+0x3a>
    1bb0:	f04f 0328 	mov.w	r3, #40	; 0x28
    1bb4:	f383 8811 	msr	BASEPRI, r3
    1bb8:	f3bf 8f6f 	isb	sy
    1bbc:	f3bf 8f4f 	dsb	sy
    1bc0:	e7fe      	b.n	1bc0 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    1bc2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    1bc4:	6c82      	ldr	r2, [r0, #72]	; 0x48
			( pxTCB->uxMutexesHeld )--;
    1bc6:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    1bc8:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
    1bca:	64c3      	str	r3, [r0, #76]	; 0x4c
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    1bcc:	d0df      	beq.n	1b8e <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    1bce:	2b00      	cmp	r3, #0
    1bd0:	d1dd      	bne.n	1b8e <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    1bd2:	1d06      	adds	r6, r0, #4
    1bd4:	4630      	mov	r0, r6
    1bd6:	f7fe fb16 	bl	206 <uxListRemove>
    1bda:	b958      	cbnz	r0, 1bf4 <xTaskPriorityDisinherit+0x6c>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
    1bdc:	2114      	movs	r1, #20
    1bde:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    1be0:	fb01 5100 	mla	r1, r1, r0, r5
    1be4:	6c4b      	ldr	r3, [r1, #68]	; 0x44
    1be6:	b92b      	cbnz	r3, 1bf4 <xTaskPriorityDisinherit+0x6c>
    1be8:	2201      	movs	r2, #1
    1bea:	692b      	ldr	r3, [r5, #16]
    1bec:	4082      	lsls	r2, r0
    1bee:	ea23 0302 	bic.w	r3, r3, r2
    1bf2:	612b      	str	r3, [r5, #16]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    1bf4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
					prvAddTaskToReadyList( pxTCB );
    1bf6:	2014      	movs	r0, #20
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1bf8:	f1c3 0205 	rsb	r2, r3, #5
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    1bfc:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1bfe:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
    1c00:	2401      	movs	r4, #1
    1c02:	6929      	ldr	r1, [r5, #16]
    1c04:	fa04 f203 	lsl.w	r2, r4, r3
    1c08:	430a      	orrs	r2, r1
    1c0a:	612a      	str	r2, [r5, #16]
    1c0c:	4a04      	ldr	r2, [pc, #16]	; (1c20 <xTaskPriorityDisinherit+0x98>)
    1c0e:	4631      	mov	r1, r6
    1c10:	fb00 2003 	mla	r0, r0, r3, r2
    1c14:	f7fe fad4 	bl	1c0 <vListInsertEnd>
					xReturn = pdTRUE;
    1c18:	4620      	mov	r0, r4
	}
    1c1a:	bd70      	pop	{r4, r5, r6, pc}
    1c1c:	100012f4 	.word	0x100012f4
    1c20:	10001338 	.word	0x10001338

00001c24 <vTaskList>:
	{
    1c24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
		*pcWriteBuffer = 0x00;
    1c28:	2700      	movs	r7, #0
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
    1c2a:	2424      	movs	r4, #36	; 0x24
		uxArraySize = uxCurrentNumberOfTasks;
    1c2c:	4b2d      	ldr	r3, [pc, #180]	; (1ce4 <vTaskList+0xc0>)
		*pcWriteBuffer = 0x00;
    1c2e:	7007      	strb	r7, [r0, #0]
		uxArraySize = uxCurrentNumberOfTasks;
    1c30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	{
    1c32:	4605      	mov	r5, r0
		uxArraySize = uxCurrentNumberOfTasks;
    1c34:	9202      	str	r2, [sp, #8]
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
    1c36:	6c18      	ldr	r0, [r3, #64]	; 0x40
    1c38:	4360      	muls	r0, r4
    1c3a:	f000 ffb1 	bl	2ba0 <pvPortMalloc>
		if( pxTaskStatusArray != NULL )
    1c3e:	4606      	mov	r6, r0
    1c40:	b178      	cbz	r0, 1c62 <vTaskList+0x3e>
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
    1c42:	463a      	mov	r2, r7
    1c44:	9902      	ldr	r1, [sp, #8]
    1c46:	f7ff fef7 	bl	1a38 <uxTaskGetSystemState>
    1c4a:	9002      	str	r0, [sp, #8]
			for( x = 0; x < uxArraySize; x++ )
    1c4c:	9703      	str	r7, [sp, #12]
    1c4e:	4627      	mov	r7, r4
    1c50:	f8df 8098 	ldr.w	r8, [pc, #152]	; 1cec <vTaskList+0xc8>
    1c54:	9a03      	ldr	r2, [sp, #12]
    1c56:	9b02      	ldr	r3, [sp, #8]
    1c58:	429a      	cmp	r2, r3
    1c5a:	d305      	bcc.n	1c68 <vTaskList+0x44>
			vPortFree( pxTaskStatusArray );
    1c5c:	4630      	mov	r0, r6
    1c5e:	f000 fffb 	bl	2c58 <vPortFree>
	}
    1c62:	b004      	add	sp, #16
    1c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				switch( pxTaskStatusArray[ x ].eCurrentState )
    1c68:	9b03      	ldr	r3, [sp, #12]
		strcpy( pcBuffer, pcTaskName );
    1c6a:	4628      	mov	r0, r5
				switch( pxTaskStatusArray[ x ].eCurrentState )
    1c6c:	fb04 6303 	mla	r3, r4, r3, r6
    1c70:	7b1b      	ldrb	r3, [r3, #12]
    1c72:	3b01      	subs	r3, #1
    1c74:	b2db      	uxtb	r3, r3
    1c76:	2b03      	cmp	r3, #3
    1c78:	bf98      	it	ls
    1c7a:	f818 a003 	ldrbls.w	sl, [r8, r3]
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
    1c7e:	9b03      	ldr	r3, [sp, #12]
				switch( pxTaskStatusArray[ x ].eCurrentState )
    1c80:	bf88      	it	hi
    1c82:	f04f 0a00 	movhi.w	sl, #0
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
    1c86:	fb07 6303 	mla	r3, r7, r3, r6
		strcpy( pcBuffer, pcTaskName );
    1c8a:	6859      	ldr	r1, [r3, #4]
    1c8c:	f003 fe02 	bl	5894 <strcpy>
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
    1c90:	4628      	mov	r0, r5
    1c92:	f003 fe5d 	bl	5950 <strlen>
			pcBuffer[ x ] = ' ';
    1c96:	2320      	movs	r3, #32
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
    1c98:	2808      	cmp	r0, #8
    1c9a:	d91f      	bls.n	1cdc <vTaskList+0xb8>
		pcBuffer[ x ] = 0x00;
    1c9c:	2300      	movs	r3, #0
    1c9e:	542b      	strb	r3, [r5, r0]
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
    1ca0:	9b03      	ldr	r3, [sp, #12]
    1ca2:	9a03      	ldr	r2, [sp, #12]
    1ca4:	9903      	ldr	r1, [sp, #12]
    1ca6:	fb04 6202 	mla	r2, r4, r2, r6
    1caa:	fb04 6101 	mla	r1, r4, r1, r6
    1cae:	6889      	ldr	r1, [r1, #8]
    1cb0:	fb04 6303 	mla	r3, r4, r3, r6
    1cb4:	9101      	str	r1, [sp, #4]
    1cb6:	8c12      	ldrh	r2, [r2, #32]
		pcBuffer[ x ] = 0x00;
    1cb8:	eb05 0900 	add.w	r9, r5, r0
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
    1cbc:	9200      	str	r2, [sp, #0]
    1cbe:	691b      	ldr	r3, [r3, #16]
    1cc0:	4652      	mov	r2, sl
    1cc2:	4909      	ldr	r1, [pc, #36]	; (1ce8 <vTaskList+0xc4>)
    1cc4:	4648      	mov	r0, r9
    1cc6:	f003 fdbf 	bl	5848 <sprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
    1cca:	4648      	mov	r0, r9
    1ccc:	f003 fe40 	bl	5950 <strlen>
			for( x = 0; x < uxArraySize; x++ )
    1cd0:	9b03      	ldr	r3, [sp, #12]
				pcWriteBuffer += strlen( pcWriteBuffer );
    1cd2:	eb09 0500 	add.w	r5, r9, r0
			for( x = 0; x < uxArraySize; x++ )
    1cd6:	3301      	adds	r3, #1
    1cd8:	9303      	str	r3, [sp, #12]
    1cda:	e7bb      	b.n	1c54 <vTaskList+0x30>
			pcBuffer[ x ] = ' ';
    1cdc:	542b      	strb	r3, [r5, r0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
    1cde:	3001      	adds	r0, #1
    1ce0:	e7da      	b.n	1c98 <vTaskList+0x74>
    1ce2:	bf00      	nop
    1ce4:	100012f4 	.word	0x100012f4
    1ce8:	0000a5f5 	.word	0x0000a5f5
    1cec:	0000a5ec 	.word	0x0000a5ec

00001cf0 <uxTaskResetEventItemValue>:
	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    1cf0:	4b04      	ldr	r3, [pc, #16]	; (1d04 <uxTaskResetEventItemValue+0x14>)
    1cf2:	68da      	ldr	r2, [r3, #12]
    1cf4:	6990      	ldr	r0, [r2, #24]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1cf6:	68da      	ldr	r2, [r3, #12]
    1cf8:	68db      	ldr	r3, [r3, #12]
    1cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1cfc:	f1c3 0305 	rsb	r3, r3, #5
    1d00:	6193      	str	r3, [r2, #24]
}
    1d02:	4770      	bx	lr
    1d04:	100012f4 	.word	0x100012f4

00001d08 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
    1d08:	4b04      	ldr	r3, [pc, #16]	; (1d1c <pvTaskIncrementMutexHeldCount+0x14>)
    1d0a:	68da      	ldr	r2, [r3, #12]
    1d0c:	b11a      	cbz	r2, 1d16 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
    1d0e:	68d9      	ldr	r1, [r3, #12]
    1d10:	6cca      	ldr	r2, [r1, #76]	; 0x4c
    1d12:	3201      	adds	r2, #1
    1d14:	64ca      	str	r2, [r1, #76]	; 0x4c
		return pxCurrentTCB;
    1d16:	68d8      	ldr	r0, [r3, #12]
	}
    1d18:	4770      	bx	lr
    1d1a:	bf00      	nop
    1d1c:	100012f4 	.word	0x100012f4

00001d20 <ulTaskNotifyTake>:
	{
    1d20:	b570      	push	{r4, r5, r6, lr}
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
    1d22:	4c16      	ldr	r4, [pc, #88]	; (1d7c <ulTaskNotifyTake+0x5c>)
	{
    1d24:	4606      	mov	r6, r0
    1d26:	460d      	mov	r5, r1
		taskENTER_CRITICAL();
    1d28:	f000 fe46 	bl	29b8 <vPortEnterCritical>
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
    1d2c:	68e3      	ldr	r3, [r4, #12]
    1d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    1d30:	b97b      	cbnz	r3, 1d52 <ulTaskNotifyTake+0x32>
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    1d32:	2101      	movs	r1, #1
    1d34:	68e3      	ldr	r3, [r4, #12]
    1d36:	f883 1058 	strb.w	r1, [r3, #88]	; 0x58
				if( xTicksToWait > ( TickType_t ) 0 )
    1d3a:	b155      	cbz	r5, 1d52 <ulTaskNotifyTake+0x32>
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    1d3c:	4628      	mov	r0, r5
    1d3e:	f7fe ff5b 	bl	bf8 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
    1d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    1d46:	4b0e      	ldr	r3, [pc, #56]	; (1d80 <ulTaskNotifyTake+0x60>)
    1d48:	601a      	str	r2, [r3, #0]
    1d4a:	f3bf 8f4f 	dsb	sy
    1d4e:	f3bf 8f6f 	isb	sy
		taskEXIT_CRITICAL();
    1d52:	f000 fe53 	bl	29fc <vPortExitCritical>
		taskENTER_CRITICAL();
    1d56:	f000 fe2f 	bl	29b8 <vPortEnterCritical>
			ulReturn = pxCurrentTCB->ulNotifiedValue;
    1d5a:	68e3      	ldr	r3, [r4, #12]
    1d5c:	6d5d      	ldr	r5, [r3, #84]	; 0x54
			if( ulReturn != 0UL )
    1d5e:	b11d      	cbz	r5, 1d68 <ulTaskNotifyTake+0x48>
					pxCurrentTCB->ulNotifiedValue = 0UL;
    1d60:	68e3      	ldr	r3, [r4, #12]
				if( xClearCountOnExit != pdFALSE )
    1d62:	b14e      	cbz	r6, 1d78 <ulTaskNotifyTake+0x58>
					pxCurrentTCB->ulNotifiedValue = 0UL;
    1d64:	2200      	movs	r2, #0
					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
    1d66:	655a      	str	r2, [r3, #84]	; 0x54
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    1d68:	2200      	movs	r2, #0
    1d6a:	68e3      	ldr	r3, [r4, #12]
    1d6c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		taskEXIT_CRITICAL();
    1d70:	f000 fe44 	bl	29fc <vPortExitCritical>
	}
    1d74:	4628      	mov	r0, r5
    1d76:	bd70      	pop	{r4, r5, r6, pc}
					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
    1d78:	1e6a      	subs	r2, r5, #1
    1d7a:	e7f4      	b.n	1d66 <ulTaskNotifyTake+0x46>
    1d7c:	100012f4 	.word	0x100012f4
    1d80:	e000ed04 	.word	0xe000ed04

00001d84 <xTaskNotifyWait>:
	{
    1d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
    1d88:	4c1e      	ldr	r4, [pc, #120]	; (1e04 <xTaskNotifyWait+0x80>)
	{
    1d8a:	461e      	mov	r6, r3
    1d8c:	4680      	mov	r8, r0
    1d8e:	460f      	mov	r7, r1
    1d90:	4615      	mov	r5, r2
		taskENTER_CRITICAL();
    1d92:	f000 fe11 	bl	29b8 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
    1d96:	68e3      	ldr	r3, [r4, #12]
    1d98:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
    1d9c:	2b02      	cmp	r3, #2
    1d9e:	d014      	beq.n	1dca <xTaskNotifyWait+0x46>
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    1da0:	2101      	movs	r1, #1
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
    1da2:	68e3      	ldr	r3, [r4, #12]
    1da4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    1da6:	ea22 0208 	bic.w	r2, r2, r8
    1daa:	655a      	str	r2, [r3, #84]	; 0x54
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    1dac:	68e3      	ldr	r3, [r4, #12]
    1dae:	f883 1058 	strb.w	r1, [r3, #88]	; 0x58
				if( xTicksToWait > ( TickType_t ) 0 )
    1db2:	b156      	cbz	r6, 1dca <xTaskNotifyWait+0x46>
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    1db4:	4630      	mov	r0, r6
    1db6:	f7fe ff1f 	bl	bf8 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
    1dba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    1dbe:	4b12      	ldr	r3, [pc, #72]	; (1e08 <xTaskNotifyWait+0x84>)
    1dc0:	601a      	str	r2, [r3, #0]
    1dc2:	f3bf 8f4f 	dsb	sy
    1dc6:	f3bf 8f6f 	isb	sy
		taskEXIT_CRITICAL();
    1dca:	f000 fe17 	bl	29fc <vPortExitCritical>
		taskENTER_CRITICAL();
    1dce:	f000 fdf3 	bl	29b8 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
    1dd2:	b115      	cbz	r5, 1dda <xTaskNotifyWait+0x56>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
    1dd4:	68e3      	ldr	r3, [r4, #12]
    1dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    1dd8:	602b      	str	r3, [r5, #0]
			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
    1dda:	68e3      	ldr	r3, [r4, #12]
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    1ddc:	2200      	movs	r2, #0
			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
    1dde:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
    1de2:	2b01      	cmp	r3, #1
				xReturn = pdTRUE;
    1de4:	bf17      	itett	ne
    1de6:	2501      	movne	r5, #1
				xReturn = pdFALSE;
    1de8:	2500      	moveq	r5, #0
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
    1dea:	68e3      	ldrne	r3, [r4, #12]
    1dec:	6d59      	ldrne	r1, [r3, #84]	; 0x54
    1dee:	bf1c      	itt	ne
    1df0:	43b9      	bicne	r1, r7
    1df2:	6559      	strne	r1, [r3, #84]	; 0x54
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    1df4:	68e3      	ldr	r3, [r4, #12]
    1df6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		taskEXIT_CRITICAL();
    1dfa:	f000 fdff 	bl	29fc <vPortExitCritical>
	}
    1dfe:	4628      	mov	r0, r5
    1e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1e04:	100012f4 	.word	0x100012f4
    1e08:	e000ed04 	.word	0xe000ed04

00001e0c <xTaskGenericNotify>:
	{
    1e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e0e:	460f      	mov	r7, r1
    1e10:	4616      	mov	r6, r2
    1e12:	461d      	mov	r5, r3
		configASSERT( xTaskToNotify );
    1e14:	4604      	mov	r4, r0
    1e16:	b940      	cbnz	r0, 1e2a <xTaskGenericNotify+0x1e>
    1e18:	f04f 0328 	mov.w	r3, #40	; 0x28
    1e1c:	f383 8811 	msr	BASEPRI, r3
    1e20:	f3bf 8f6f 	isb	sy
    1e24:	f3bf 8f4f 	dsb	sy
    1e28:	e7fe      	b.n	1e28 <xTaskGenericNotify+0x1c>
		taskENTER_CRITICAL();
    1e2a:	f000 fdc5 	bl	29b8 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
    1e2e:	b10d      	cbz	r5, 1e34 <xTaskGenericNotify+0x28>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    1e30:	6d63      	ldr	r3, [r4, #84]	; 0x54
    1e32:	602b      	str	r3, [r5, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    1e34:	2302      	movs	r3, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
    1e36:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
			switch( eAction )
    1e3a:	1e72      	subs	r2, r6, #1
			ucOriginalNotifyState = pxTCB->ucNotifyState;
    1e3c:	b2ed      	uxtb	r5, r5
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    1e3e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
			switch( eAction )
    1e42:	2a03      	cmp	r2, #3
    1e44:	d80a      	bhi.n	1e5c <xTaskGenericNotify+0x50>
    1e46:	e8df f002 	tbb	[pc, r2]
    1e4a:	0602      	.short	0x0602
    1e4c:	1004      	.short	0x1004
					pxTCB->ulNotifiedValue |= ulValue;
    1e4e:	6d61      	ldr	r1, [r4, #84]	; 0x54
    1e50:	430f      	orrs	r7, r1
						pxTCB->ulNotifiedValue = ulValue;
    1e52:	6567      	str	r7, [r4, #84]	; 0x54
    1e54:	e002      	b.n	1e5c <xTaskGenericNotify+0x50>
					( pxTCB->ulNotifiedValue )++;
    1e56:	6d63      	ldr	r3, [r4, #84]	; 0x54
    1e58:	3301      	adds	r3, #1
    1e5a:	6563      	str	r3, [r4, #84]	; 0x54
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    1e5c:	2d01      	cmp	r5, #1
    1e5e:	d008      	beq.n	1e72 <xTaskGenericNotify+0x66>
	{
    1e60:	2501      	movs	r5, #1
		taskEXIT_CRITICAL();
    1e62:	f000 fdcb 	bl	29fc <vPortExitCritical>
	}
    1e66:	4628      	mov	r0, r5
    1e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    1e6a:	2d02      	cmp	r5, #2
    1e6c:	d1f1      	bne.n	1e52 <xTaskGenericNotify+0x46>
						xReturn = pdFAIL;
    1e6e:	2500      	movs	r5, #0
    1e70:	e7f7      	b.n	1e62 <xTaskGenericNotify+0x56>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    1e72:	1d27      	adds	r7, r4, #4
    1e74:	4638      	mov	r0, r7
    1e76:	f7fe f9c6 	bl	206 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
    1e7a:	2014      	movs	r0, #20
    1e7c:	4e13      	ldr	r6, [pc, #76]	; (1ecc <xTaskGenericNotify+0xc0>)
    1e7e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    1e80:	6931      	ldr	r1, [r6, #16]
    1e82:	fa05 f302 	lsl.w	r3, r5, r2
    1e86:	430b      	orrs	r3, r1
    1e88:	6133      	str	r3, [r6, #16]
    1e8a:	f106 0344 	add.w	r3, r6, #68	; 0x44
    1e8e:	fb00 3002 	mla	r0, r0, r2, r3
    1e92:	4639      	mov	r1, r7
    1e94:	f7fe f994 	bl	1c0 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
    1e98:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1e9a:	b143      	cbz	r3, 1eae <xTaskGenericNotify+0xa2>
    1e9c:	f04f 0328 	mov.w	r3, #40	; 0x28
    1ea0:	f383 8811 	msr	BASEPRI, r3
    1ea4:	f3bf 8f6f 	isb	sy
    1ea8:	f3bf 8f4f 	dsb	sy
    1eac:	e7fe      	b.n	1eac <xTaskGenericNotify+0xa0>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    1eae:	68f3      	ldr	r3, [r6, #12]
    1eb0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    1eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1eb4:	429a      	cmp	r2, r3
    1eb6:	d9d3      	bls.n	1e60 <xTaskGenericNotify+0x54>
					taskYIELD_IF_USING_PREEMPTION();
    1eb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    1ebc:	4b04      	ldr	r3, [pc, #16]	; (1ed0 <xTaskGenericNotify+0xc4>)
    1ebe:	601a      	str	r2, [r3, #0]
    1ec0:	f3bf 8f4f 	dsb	sy
    1ec4:	f3bf 8f6f 	isb	sy
    1ec8:	e7cb      	b.n	1e62 <xTaskGenericNotify+0x56>
    1eca:	bf00      	nop
    1ecc:	100012f4 	.word	0x100012f4
    1ed0:	e000ed04 	.word	0xe000ed04

00001ed4 <xTaskGenericNotifyFromISR>:
	{
    1ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1ed8:	f8dd 8020 	ldr.w	r8, [sp, #32]
    1edc:	4689      	mov	r9, r1
    1ede:	4615      	mov	r5, r2
    1ee0:	461e      	mov	r6, r3
		configASSERT( xTaskToNotify );
    1ee2:	4604      	mov	r4, r0
    1ee4:	b940      	cbnz	r0, 1ef8 <xTaskGenericNotifyFromISR+0x24>
    1ee6:	f04f 0328 	mov.w	r3, #40	; 0x28
    1eea:	f383 8811 	msr	BASEPRI, r3
    1eee:	f3bf 8f6f 	isb	sy
    1ef2:	f3bf 8f4f 	dsb	sy
    1ef6:	e7fe      	b.n	1ef6 <xTaskGenericNotifyFromISR+0x22>
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
    1ef8:	f000 fe26 	bl	2b48 <vPortValidateInterruptPriority>
	__asm volatile
    1efc:	f3ef 8711 	mrs	r7, BASEPRI
    1f00:	f04f 0328 	mov.w	r3, #40	; 0x28
    1f04:	f383 8811 	msr	BASEPRI, r3
    1f08:	f3bf 8f6f 	isb	sy
    1f0c:	f3bf 8f4f 	dsb	sy
			if( pulPreviousNotificationValue != NULL )
    1f10:	b10e      	cbz	r6, 1f16 <xTaskGenericNotifyFromISR+0x42>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    1f12:	6d63      	ldr	r3, [r4, #84]	; 0x54
    1f14:	6033      	str	r3, [r6, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    1f16:	2302      	movs	r3, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
    1f18:	f894 6058 	ldrb.w	r6, [r4, #88]	; 0x58
			switch( eAction )
    1f1c:	1e6a      	subs	r2, r5, #1
			ucOriginalNotifyState = pxTCB->ucNotifyState;
    1f1e:	b2f6      	uxtb	r6, r6
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    1f20:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
			switch( eAction )
    1f24:	2a03      	cmp	r2, #3
    1f26:	d807      	bhi.n	1f38 <xTaskGenericNotifyFromISR+0x64>
    1f28:	e8df f002 	tbb	[pc, r2]
    1f2c:	11130d02 	.word	0x11130d02
					pxTCB->ulNotifiedValue |= ulValue;
    1f30:	6d61      	ldr	r1, [r4, #84]	; 0x54
    1f32:	ea41 0109 	orr.w	r1, r1, r9
    1f36:	6561      	str	r1, [r4, #84]	; 0x54
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    1f38:	2e01      	cmp	r6, #1
    1f3a:	d00d      	beq.n	1f58 <xTaskGenericNotifyFromISR+0x84>
	{
    1f3c:	2001      	movs	r0, #1
	__asm volatile
    1f3e:	f387 8811 	msr	BASEPRI, r7
	}
    1f42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					( pxTCB->ulNotifiedValue )++;
    1f46:	6d63      	ldr	r3, [r4, #84]	; 0x54
    1f48:	3301      	adds	r3, #1
    1f4a:	6563      	str	r3, [r4, #84]	; 0x54
					break;
    1f4c:	e7f4      	b.n	1f38 <xTaskGenericNotifyFromISR+0x64>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    1f4e:	2e02      	cmp	r6, #2
    1f50:	d037      	beq.n	1fc2 <xTaskGenericNotifyFromISR+0xee>
						pxTCB->ulNotifiedValue = ulValue;
    1f52:	f8c4 9054 	str.w	r9, [r4, #84]	; 0x54
    1f56:	e7ef      	b.n	1f38 <xTaskGenericNotifyFromISR+0x64>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
    1f58:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1f5a:	b143      	cbz	r3, 1f6e <xTaskGenericNotifyFromISR+0x9a>
	__asm volatile
    1f5c:	f04f 0328 	mov.w	r3, #40	; 0x28
    1f60:	f383 8811 	msr	BASEPRI, r3
    1f64:	f3bf 8f6f 	isb	sy
    1f68:	f3bf 8f4f 	dsb	sy
    1f6c:	e7fe      	b.n	1f6c <xTaskGenericNotifyFromISR+0x98>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1f6e:	4d16      	ldr	r5, [pc, #88]	; (1fc8 <xTaskGenericNotifyFromISR+0xf4>)
    1f70:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
    1f74:	b9eb      	cbnz	r3, 1fb2 <xTaskGenericNotifyFromISR+0xde>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    1f76:	f104 0904 	add.w	r9, r4, #4
    1f7a:	4648      	mov	r0, r9
    1f7c:	f7fe f943 	bl	206 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    1f80:	2014      	movs	r0, #20
    1f82:	4649      	mov	r1, r9
    1f84:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1f86:	692a      	ldr	r2, [r5, #16]
    1f88:	409e      	lsls	r6, r3
    1f8a:	4316      	orrs	r6, r2
    1f8c:	f105 0244 	add.w	r2, r5, #68	; 0x44
    1f90:	fb00 2003 	mla	r0, r0, r3, r2
    1f94:	612e      	str	r6, [r5, #16]
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    1f96:	f7fe f913 	bl	1c0 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    1f9a:	68eb      	ldr	r3, [r5, #12]
    1f9c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    1f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1fa0:	429a      	cmp	r2, r3
    1fa2:	d9cb      	bls.n	1f3c <xTaskGenericNotifyFromISR+0x68>
    1fa4:	2001      	movs	r0, #1
					if( pxHigherPriorityTaskWoken != NULL )
    1fa6:	f1b8 0f00 	cmp.w	r8, #0
    1faa:	d007      	beq.n	1fbc <xTaskGenericNotifyFromISR+0xe8>
						*pxHigherPriorityTaskWoken = pdTRUE;
    1fac:	f8c8 0000 	str.w	r0, [r8]
    1fb0:	e7c5      	b.n	1f3e <xTaskGenericNotifyFromISR+0x6a>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    1fb2:	f104 0118 	add.w	r1, r4, #24
    1fb6:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    1fba:	e7ec      	b.n	1f96 <xTaskGenericNotifyFromISR+0xc2>
						xYieldPending = pdTRUE;
    1fbc:	f8c5 0100 	str.w	r0, [r5, #256]	; 0x100
    1fc0:	e7bd      	b.n	1f3e <xTaskGenericNotifyFromISR+0x6a>
						xReturn = pdFAIL;
    1fc2:	2000      	movs	r0, #0
    1fc4:	e7bb      	b.n	1f3e <xTaskGenericNotifyFromISR+0x6a>
    1fc6:	bf00      	nop
    1fc8:	100012f4 	.word	0x100012f4

00001fcc <vTaskNotifyGiveFromISR>:
	{
    1fcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1fd0:	460f      	mov	r7, r1
		configASSERT( xTaskToNotify );
    1fd2:	4604      	mov	r4, r0
    1fd4:	b940      	cbnz	r0, 1fe8 <vTaskNotifyGiveFromISR+0x1c>
    1fd6:	f04f 0328 	mov.w	r3, #40	; 0x28
    1fda:	f383 8811 	msr	BASEPRI, r3
    1fde:	f3bf 8f6f 	isb	sy
    1fe2:	f3bf 8f4f 	dsb	sy
    1fe6:	e7fe      	b.n	1fe6 <vTaskNotifyGiveFromISR+0x1a>
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
    1fe8:	f000 fdae 	bl	2b48 <vPortValidateInterruptPriority>
	__asm volatile
    1fec:	f3ef 8811 	mrs	r8, BASEPRI
    1ff0:	f04f 0328 	mov.w	r3, #40	; 0x28
    1ff4:	f383 8811 	msr	BASEPRI, r3
    1ff8:	f3bf 8f6f 	isb	sy
    1ffc:	f3bf 8f4f 	dsb	sy
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    2000:	2302      	movs	r3, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
    2002:	f894 6058 	ldrb.w	r6, [r4, #88]	; 0x58
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    2006:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
			( pxTCB->ulNotifiedValue )++;
    200a:	6d63      	ldr	r3, [r4, #84]	; 0x54
			ucOriginalNotifyState = pxTCB->ucNotifyState;
    200c:	b2f6      	uxtb	r6, r6
			( pxTCB->ulNotifiedValue )++;
    200e:	3301      	adds	r3, #1
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    2010:	2e01      	cmp	r6, #1
			( pxTCB->ulNotifiedValue )++;
    2012:	6563      	str	r3, [r4, #84]	; 0x54
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    2014:	d128      	bne.n	2068 <vTaskNotifyGiveFromISR+0x9c>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
    2016:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2018:	b143      	cbz	r3, 202c <vTaskNotifyGiveFromISR+0x60>
	__asm volatile
    201a:	f04f 0328 	mov.w	r3, #40	; 0x28
    201e:	f383 8811 	msr	BASEPRI, r3
    2022:	f3bf 8f6f 	isb	sy
    2026:	f3bf 8f4f 	dsb	sy
    202a:	e7fe      	b.n	202a <vTaskNotifyGiveFromISR+0x5e>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    202c:	4d14      	ldr	r5, [pc, #80]	; (2080 <vTaskNotifyGiveFromISR+0xb4>)
    202e:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
    2032:	b9eb      	cbnz	r3, 2070 <vTaskNotifyGiveFromISR+0xa4>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    2034:	f104 0904 	add.w	r9, r4, #4
    2038:	4648      	mov	r0, r9
    203a:	f7fe f8e4 	bl	206 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    203e:	2014      	movs	r0, #20
    2040:	4649      	mov	r1, r9
    2042:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2044:	692a      	ldr	r2, [r5, #16]
    2046:	409e      	lsls	r6, r3
    2048:	4316      	orrs	r6, r2
    204a:	f105 0244 	add.w	r2, r5, #68	; 0x44
    204e:	fb00 2003 	mla	r0, r0, r3, r2
    2052:	612e      	str	r6, [r5, #16]
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    2054:	f7fe f8b4 	bl	1c0 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    2058:	68eb      	ldr	r3, [r5, #12]
    205a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    205c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    205e:	429a      	cmp	r2, r3
    2060:	d902      	bls.n	2068 <vTaskNotifyGiveFromISR+0x9c>
    2062:	2301      	movs	r3, #1
					if( pxHigherPriorityTaskWoken != NULL )
    2064:	b14f      	cbz	r7, 207a <vTaskNotifyGiveFromISR+0xae>
						*pxHigherPriorityTaskWoken = pdTRUE;
    2066:	603b      	str	r3, [r7, #0]
	__asm volatile
    2068:	f388 8811 	msr	BASEPRI, r8
    206c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    2070:	f104 0118 	add.w	r1, r4, #24
    2074:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    2078:	e7ec      	b.n	2054 <vTaskNotifyGiveFromISR+0x88>
						xYieldPending = pdTRUE;
    207a:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
    207e:	e7f3      	b.n	2068 <vTaskNotifyGiveFromISR+0x9c>
    2080:	100012f4 	.word	0x100012f4

00002084 <xTaskNotifyStateClear>:
	{
    2084:	b510      	push	{r4, lr}
		pxTCB = prvGetTCBFromHandle( xTask );
    2086:	b980      	cbnz	r0, 20aa <xTaskNotifyStateClear+0x26>
    2088:	4b09      	ldr	r3, [pc, #36]	; (20b0 <xTaskNotifyStateClear+0x2c>)
    208a:	68dc      	ldr	r4, [r3, #12]
		taskENTER_CRITICAL();
    208c:	f000 fc94 	bl	29b8 <vPortEnterCritical>
    2090:	2000      	movs	r0, #0
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    2092:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
    2096:	2b02      	cmp	r3, #2
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    2098:	bf0a      	itet	eq
    209a:	f884 0058 	strbeq.w	r0, [r4, #88]	; 0x58
				xReturn = pdFAIL;
    209e:	4604      	movne	r4, r0
				xReturn = pdPASS;
    20a0:	2401      	moveq	r4, #1
		taskEXIT_CRITICAL();
    20a2:	f000 fcab 	bl	29fc <vPortExitCritical>
	}
    20a6:	4620      	mov	r0, r4
    20a8:	bd10      	pop	{r4, pc}
    20aa:	4604      	mov	r4, r0
    20ac:	e7ee      	b.n	208c <xTaskNotifyStateClear+0x8>
    20ae:	bf00      	nop
    20b0:	100012f4 	.word	0x100012f4

000020b4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    20b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
    20b6:	4c0f      	ldr	r4, [pc, #60]	; (20f4 <prvCheckForValidListAndQueue+0x40>)
	taskENTER_CRITICAL();
    20b8:	f000 fc7e 	bl	29b8 <vPortEnterCritical>
		if( xTimerQueue == NULL )
    20bc:	6825      	ldr	r5, [r4, #0]
    20be:	b9a5      	cbnz	r5, 20ea <prvCheckForValidListAndQueue+0x36>
		{
			vListInitialise( &xActiveTimerList1 );
    20c0:	1d27      	adds	r7, r4, #4
    20c2:	4638      	mov	r0, r7
			vListInitialise( &xActiveTimerList2 );
    20c4:	f104 0618 	add.w	r6, r4, #24
			vListInitialise( &xActiveTimerList1 );
    20c8:	f7fe f86c 	bl	1a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
    20cc:	4630      	mov	r0, r6
    20ce:	f7fe f869 	bl	1a4 <vListInitialise>

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    20d2:	462a      	mov	r2, r5
    20d4:	2110      	movs	r1, #16
    20d6:	200a      	movs	r0, #10
			pxCurrentTimerList = &xActiveTimerList1;
    20d8:	62e7      	str	r7, [r4, #44]	; 0x2c
			pxOverflowTimerList = &xActiveTimerList2;
    20da:	6326      	str	r6, [r4, #48]	; 0x30
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    20dc:	f7fe f91c 	bl	318 <xQueueGenericCreate>
    20e0:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
    20e2:	b110      	cbz	r0, 20ea <prvCheckForValidListAndQueue+0x36>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
    20e4:	4904      	ldr	r1, [pc, #16]	; (20f8 <prvCheckForValidListAndQueue+0x44>)
    20e6:	f7fe fcc1 	bl	a6c <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
    20ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
    20ee:	f000 bc85 	b.w	29fc <vPortExitCritical>
    20f2:	bf00      	nop
    20f4:	100013f8 	.word	0x100013f8
    20f8:	0000a604 	.word	0x0000a604

000020fc <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
    20fc:	4291      	cmp	r1, r2
{
    20fe:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    2100:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2102:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
    2104:	d80a      	bhi.n	211c <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2106:	1ad2      	subs	r2, r2, r3
    2108:	6983      	ldr	r3, [r0, #24]
    210a:	429a      	cmp	r2, r3
    210c:	d20e      	bcs.n	212c <prvInsertTimerInActiveList+0x30>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    210e:	4b08      	ldr	r3, [pc, #32]	; (2130 <prvInsertTimerInActiveList+0x34>)
    2110:	1d01      	adds	r1, r0, #4
    2112:	6b18      	ldr	r0, [r3, #48]	; 0x30
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2114:	f7fe f860 	bl	1d8 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
    2118:	2000      	movs	r0, #0
    211a:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    211c:	429a      	cmp	r2, r3
    211e:	d201      	bcs.n	2124 <prvInsertTimerInActiveList+0x28>
    2120:	4299      	cmp	r1, r3
    2122:	d203      	bcs.n	212c <prvInsertTimerInActiveList+0x30>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2124:	4b02      	ldr	r3, [pc, #8]	; (2130 <prvInsertTimerInActiveList+0x34>)
    2126:	1d01      	adds	r1, r0, #4
    2128:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    212a:	e7f3      	b.n	2114 <prvInsertTimerInActiveList+0x18>
			xProcessTimerNow = pdTRUE;
    212c:	2001      	movs	r0, #1
}
    212e:	bd08      	pop	{r3, pc}
    2130:	100013f8 	.word	0x100013f8

00002134 <xTimerCreateTimerTask>:
{
    2134:	b507      	push	{r0, r1, r2, lr}
	prvCheckForValidListAndQueue();
    2136:	f7ff ffbd 	bl	20b4 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
    213a:	4b0d      	ldr	r3, [pc, #52]	; (2170 <xTimerCreateTimerTask+0x3c>)
    213c:	681a      	ldr	r2, [r3, #0]
    213e:	b152      	cbz	r2, 2156 <xTimerCreateTimerTask+0x22>
			xReturn = xTaskCreate(	prvTimerTask,
    2140:	3334      	adds	r3, #52	; 0x34
    2142:	9301      	str	r3, [sp, #4]
    2144:	2302      	movs	r3, #2
    2146:	22b4      	movs	r2, #180	; 0xb4
    2148:	9300      	str	r3, [sp, #0]
    214a:	490a      	ldr	r1, [pc, #40]	; (2174 <xTimerCreateTimerTask+0x40>)
    214c:	2300      	movs	r3, #0
    214e:	480a      	ldr	r0, [pc, #40]	; (2178 <xTimerCreateTimerTask+0x44>)
    2150:	f7fe fda6 	bl	ca0 <xTaskCreate>
	configASSERT( xReturn );
    2154:	b940      	cbnz	r0, 2168 <xTimerCreateTimerTask+0x34>
	__asm volatile
    2156:	f04f 0328 	mov.w	r3, #40	; 0x28
    215a:	f383 8811 	msr	BASEPRI, r3
    215e:	f3bf 8f6f 	isb	sy
    2162:	f3bf 8f4f 	dsb	sy
    2166:	e7fe      	b.n	2166 <xTimerCreateTimerTask+0x32>
}
    2168:	b003      	add	sp, #12
    216a:	f85d fb04 	ldr.w	pc, [sp], #4
    216e:	bf00      	nop
    2170:	100013f8 	.word	0x100013f8
    2174:	0000a609 	.word	0x0000a609
    2178:	00002295 	.word	0x00002295

0000217c <xTimerCreate>:
	{
    217c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2180:	4680      	mov	r8, r0
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
    2182:	202c      	movs	r0, #44	; 0x2c
	{
    2184:	460d      	mov	r5, r1
    2186:	4617      	mov	r7, r2
    2188:	461e      	mov	r6, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
    218a:	f000 fd09 	bl	2ba0 <pvPortMalloc>
		if( pxNewTimer != NULL )
    218e:	4604      	mov	r4, r0
    2190:	b1a8      	cbz	r0, 21be <xTimerCreate+0x42>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
    2192:	b945      	cbnz	r5, 21a6 <xTimerCreate+0x2a>
    2194:	f04f 0328 	mov.w	r3, #40	; 0x28
    2198:	f383 8811 	msr	BASEPRI, r3
    219c:	f3bf 8f6f 	isb	sy
    21a0:	f3bf 8f4f 	dsb	sy
    21a4:	e7fe      	b.n	21a4 <xTimerCreate+0x28>
		prvCheckForValidListAndQueue();
    21a6:	f7ff ff85 	bl	20b4 <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
    21aa:	9b06      	ldr	r3, [sp, #24]
		pxNewTimer->pcTimerName = pcTimerName;
    21ac:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
    21b0:	61a5      	str	r5, [r4, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
    21b2:	61e7      	str	r7, [r4, #28]
		pxNewTimer->pvTimerID = pvTimerID;
    21b4:	6226      	str	r6, [r4, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
    21b6:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
    21b8:	1d20      	adds	r0, r4, #4
    21ba:	f7fd fffe 	bl	1ba <vListInitialiseItem>
	}
    21be:	4620      	mov	r0, r4
    21c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000021c4 <xTimerGenericCommand>:
{
    21c4:	b530      	push	{r4, r5, lr}
    21c6:	4615      	mov	r5, r2
    21c8:	b085      	sub	sp, #20
    21ca:	461a      	mov	r2, r3
	configASSERT( xTimer );
    21cc:	4603      	mov	r3, r0
    21ce:	b940      	cbnz	r0, 21e2 <xTimerGenericCommand+0x1e>
    21d0:	f04f 0328 	mov.w	r3, #40	; 0x28
    21d4:	f383 8811 	msr	BASEPRI, r3
    21d8:	f3bf 8f6f 	isb	sy
    21dc:	f3bf 8f4f 	dsb	sy
    21e0:	e7fe      	b.n	21e0 <xTimerGenericCommand+0x1c>
	if( xTimerQueue != NULL )
    21e2:	4c0d      	ldr	r4, [pc, #52]	; (2218 <xTimerGenericCommand+0x54>)
    21e4:	6820      	ldr	r0, [r4, #0]
    21e6:	b178      	cbz	r0, 2208 <xTimerGenericCommand+0x44>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    21e8:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    21ea:	e88d 0022 	stmia.w	sp, {r1, r5}
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    21ee:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    21f0:	dc0c      	bgt.n	220c <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    21f2:	f7ff fc73 	bl	1adc <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    21f6:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    21f8:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    21fa:	bf0c      	ite	eq
    21fc:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    21fe:	461a      	movne	r2, r3
    2200:	4669      	mov	r1, sp
    2202:	6820      	ldr	r0, [r4, #0]
    2204:	f7fe f8ca 	bl	39c <xQueueGenericSend>
}
    2208:	b005      	add	sp, #20
    220a:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    220c:	2300      	movs	r3, #0
    220e:	4669      	mov	r1, sp
    2210:	f7fe f9aa 	bl	568 <xQueueGenericSendFromISR>
    2214:	e7f8      	b.n	2208 <xTimerGenericCommand+0x44>
    2216:	bf00      	nop
    2218:	100013f8 	.word	0x100013f8

0000221c <prvSwitchTimerLists>:
{
    221c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2220:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2224:	4d1a      	ldr	r5, [pc, #104]	; (2290 <prvSwitchTimerLists+0x74>)
    2226:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    2228:	681a      	ldr	r2, [r3, #0]
    222a:	b92a      	cbnz	r2, 2238 <prvSwitchTimerLists+0x1c>
	pxCurrentTimerList = pxOverflowTimerList;
    222c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
	pxOverflowTimerList = pxTemp;
    222e:	632b      	str	r3, [r5, #48]	; 0x30
	pxCurrentTimerList = pxOverflowTimerList;
    2230:	62ea      	str	r2, [r5, #44]	; 0x2c
}
    2232:	b002      	add	sp, #8
    2234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2238:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    223a:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    223c:	681e      	ldr	r6, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    223e:	1d27      	adds	r7, r4, #4
    2240:	4638      	mov	r0, r7
    2242:	f7fd ffe0 	bl	206 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2246:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2248:	4620      	mov	r0, r4
    224a:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    224c:	69e3      	ldr	r3, [r4, #28]
    224e:	2b01      	cmp	r3, #1
    2250:	d1e9      	bne.n	2226 <prvSwitchTimerLists+0xa>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2252:	69a3      	ldr	r3, [r4, #24]
    2254:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
    2256:	429e      	cmp	r6, r3
    2258:	d206      	bcs.n	2268 <prvSwitchTimerLists+0x4c>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    225a:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    225c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    225e:	4639      	mov	r1, r7
    2260:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    2262:	f7fd ffb9 	bl	1d8 <vListInsert>
    2266:	e7de      	b.n	2226 <prvSwitchTimerLists+0xa>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2268:	2300      	movs	r3, #0
    226a:	f8cd 8000 	str.w	r8, [sp]
    226e:	4632      	mov	r2, r6
    2270:	4619      	mov	r1, r3
    2272:	4620      	mov	r0, r4
    2274:	f7ff ffa6 	bl	21c4 <xTimerGenericCommand>
				configASSERT( xResult );
    2278:	2800      	cmp	r0, #0
    227a:	d1d4      	bne.n	2226 <prvSwitchTimerLists+0xa>
    227c:	f04f 0328 	mov.w	r3, #40	; 0x28
    2280:	f383 8811 	msr	BASEPRI, r3
    2284:	f3bf 8f6f 	isb	sy
    2288:	f3bf 8f4f 	dsb	sy
    228c:	e7fe      	b.n	228c <prvSwitchTimerLists+0x70>
    228e:	bf00      	nop
    2290:	100013f8 	.word	0x100013f8

00002294 <prvTimerTask>:
{
    2294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    2298:	4e6c      	ldr	r6, [pc, #432]	; (244c <prvTimerTask+0x1b8>)
					portYIELD_WITHIN_API();
    229a:	4f6d      	ldr	r7, [pc, #436]	; (2450 <prvTimerTask+0x1bc>)
    229c:	4635      	mov	r5, r6
{
    229e:	b086      	sub	sp, #24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    22a0:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    22a2:	f8d3 8000 	ldr.w	r8, [r3]
	if( *pxListWasEmpty == pdFALSE )
    22a6:	f1b8 0f00 	cmp.w	r8, #0
    22aa:	d03f      	beq.n	232c <prvTimerTask+0x98>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    22ac:	68db      	ldr	r3, [r3, #12]
    22ae:	f8d3 9000 	ldr.w	r9, [r3]
	vTaskSuspendAll();
    22b2:	f7fe ffb3 	bl	121c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
    22b6:	f7fe ffbb 	bl	1230 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
    22ba:	6bab      	ldr	r3, [r5, #56]	; 0x38
	xTimeNow = xTaskGetTickCount();
    22bc:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
    22be:	4298      	cmp	r0, r3
    22c0:	d236      	bcs.n	2330 <prvTimerTask+0x9c>
		prvSwitchTimerLists();
    22c2:	f7ff ffab 	bl	221c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
    22c6:	2401      	movs	r4, #1
	xLastTime = xTimeNow;
    22c8:	f8c5 a038 	str.w	sl, [r5, #56]	; 0x38
		if( xTimerListsWereSwitched == pdFALSE )
    22cc:	2c00      	cmp	r4, #0
    22ce:	f040 8082 	bne.w	23d6 <prvTimerTask+0x142>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    22d2:	f1b8 0f00 	cmp.w	r8, #0
    22d6:	d066      	beq.n	23a6 <prvTimerTask+0x112>
    22d8:	45d1      	cmp	r9, sl
    22da:	d87a      	bhi.n	23d2 <prvTimerTask+0x13e>
				( void ) xTaskResumeAll();
    22dc:	f7ff f840 	bl	1360 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    22e0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    22e2:	68db      	ldr	r3, [r3, #12]
    22e4:	f8d3 800c 	ldr.w	r8, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    22e8:	f108 0004 	add.w	r0, r8, #4
    22ec:	f7fd ff8b 	bl	206 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    22f0:	f8d8 301c 	ldr.w	r3, [r8, #28]
    22f4:	2b01      	cmp	r3, #1
    22f6:	d11d      	bne.n	2334 <prvTimerTask+0xa0>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    22f8:	f8d8 1018 	ldr.w	r1, [r8, #24]
    22fc:	464b      	mov	r3, r9
    22fe:	4652      	mov	r2, sl
    2300:	4449      	add	r1, r9
    2302:	4640      	mov	r0, r8
    2304:	f7ff fefa 	bl	20fc <prvInsertTimerInActiveList>
    2308:	b1a0      	cbz	r0, 2334 <prvTimerTask+0xa0>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    230a:	9400      	str	r4, [sp, #0]
    230c:	4623      	mov	r3, r4
    230e:	464a      	mov	r2, r9
    2310:	4621      	mov	r1, r4
    2312:	4640      	mov	r0, r8
    2314:	f7ff ff56 	bl	21c4 <xTimerGenericCommand>
			configASSERT( xResult );
    2318:	b960      	cbnz	r0, 2334 <prvTimerTask+0xa0>
    231a:	f04f 0328 	mov.w	r3, #40	; 0x28
    231e:	f383 8811 	msr	BASEPRI, r3
    2322:	f3bf 8f6f 	isb	sy
    2326:	f3bf 8f4f 	dsb	sy
    232a:	e7fe      	b.n	232a <prvTimerTask+0x96>
		xNextExpireTime = ( TickType_t ) 0U;
    232c:	46c1      	mov	r9, r8
    232e:	e7c0      	b.n	22b2 <prvTimerTask+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
    2330:	2400      	movs	r4, #0
    2332:	e7c9      	b.n	22c8 <prvTimerTask+0x34>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2334:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
    2338:	4640      	mov	r0, r8
    233a:	4798      	blx	r3
    233c:	f04f 0901 	mov.w	r9, #1
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2340:	2300      	movs	r3, #0
    2342:	a902      	add	r1, sp, #8
    2344:	461a      	mov	r2, r3
    2346:	6828      	ldr	r0, [r5, #0]
    2348:	f7fe f9c4 	bl	6d4 <xQueueGenericReceive>
    234c:	2800      	cmp	r0, #0
    234e:	d0a7      	beq.n	22a0 <prvTimerTask+0xc>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
    2350:	9b02      	ldr	r3, [sp, #8]
    2352:	2b00      	cmp	r3, #0
    2354:	da03      	bge.n	235e <prvTimerTask+0xca>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
    2356:	9905      	ldr	r1, [sp, #20]
    2358:	9804      	ldr	r0, [sp, #16]
    235a:	9b03      	ldr	r3, [sp, #12]
    235c:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    235e:	9b02      	ldr	r3, [sp, #8]
    2360:	2b00      	cmp	r3, #0
    2362:	dbed      	blt.n	2340 <prvTimerTask+0xac>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    2364:	9c04      	ldr	r4, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
    2366:	6963      	ldr	r3, [r4, #20]
    2368:	b113      	cbz	r3, 2370 <prvTimerTask+0xdc>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    236a:	1d20      	adds	r0, r4, #4
    236c:	f7fd ff4b 	bl	206 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
    2370:	f7fe ff5e 	bl	1230 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
    2374:	6bab      	ldr	r3, [r5, #56]	; 0x38
	xTimeNow = xTaskGetTickCount();
    2376:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
    2378:	4298      	cmp	r0, r3
    237a:	d201      	bcs.n	2380 <prvTimerTask+0xec>
		prvSwitchTimerLists();
    237c:	f7ff ff4e 	bl	221c <prvSwitchTimerLists>
    2380:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
    2382:	f8c5 8038 	str.w	r8, [r5, #56]	; 0x38
    2386:	2b09      	cmp	r3, #9
    2388:	d8da      	bhi.n	2340 <prvTimerTask+0xac>
    238a:	fa09 f303 	lsl.w	r3, r9, r3
    238e:	f413 7a04 	ands.w	sl, r3, #528	; 0x210
    2392:	d147      	bne.n	2424 <prvTimerTask+0x190>
    2394:	f013 0fc7 	tst.w	r3, #199	; 0xc7
    2398:	d120      	bne.n	23dc <prvTimerTask+0x148>
    239a:	069b      	lsls	r3, r3, #26
    239c:	d5d0      	bpl.n	2340 <prvTimerTask+0xac>
						vPortFree( pxTimer );
    239e:	4620      	mov	r0, r4
    23a0:	f000 fc5a 	bl	2c58 <vPortFree>
    23a4:	e7cc      	b.n	2340 <prvTimerTask+0xac>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    23a6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    23a8:	681a      	ldr	r2, [r3, #0]
    23aa:	fab2 f282 	clz	r2, r2
    23ae:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    23b0:	eba9 010a 	sub.w	r1, r9, sl
    23b4:	6828      	ldr	r0, [r5, #0]
    23b6:	f7fe fba4 	bl	b02 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
    23ba:	f7fe ffd1 	bl	1360 <xTaskResumeAll>
    23be:	2800      	cmp	r0, #0
    23c0:	d1bc      	bne.n	233c <prvTimerTask+0xa8>
					portYIELD_WITHIN_API();
    23c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    23c6:	603b      	str	r3, [r7, #0]
    23c8:	f3bf 8f4f 	dsb	sy
    23cc:	f3bf 8f6f 	isb	sy
    23d0:	e7b4      	b.n	233c <prvTimerTask+0xa8>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    23d2:	4622      	mov	r2, r4
    23d4:	e7ec      	b.n	23b0 <prvTimerTask+0x11c>
			( void ) xTaskResumeAll();
    23d6:	f7fe ffc3 	bl	1360 <xTaskResumeAll>
    23da:	e7af      	b.n	233c <prvTimerTask+0xa8>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    23dc:	69a1      	ldr	r1, [r4, #24]
    23de:	9b03      	ldr	r3, [sp, #12]
    23e0:	4642      	mov	r2, r8
    23e2:	4419      	add	r1, r3
    23e4:	4620      	mov	r0, r4
    23e6:	f7ff fe89 	bl	20fc <prvInsertTimerInActiveList>
    23ea:	2800      	cmp	r0, #0
    23ec:	d0a8      	beq.n	2340 <prvTimerTask+0xac>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    23ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
    23f0:	4620      	mov	r0, r4
    23f2:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    23f4:	69e3      	ldr	r3, [r4, #28]
    23f6:	2b01      	cmp	r3, #1
    23f8:	d1a2      	bne.n	2340 <prvTimerTask+0xac>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    23fa:	69a2      	ldr	r2, [r4, #24]
    23fc:	9903      	ldr	r1, [sp, #12]
    23fe:	f8cd a000 	str.w	sl, [sp]
    2402:	440a      	add	r2, r1
    2404:	4653      	mov	r3, sl
    2406:	4651      	mov	r1, sl
    2408:	4620      	mov	r0, r4
    240a:	f7ff fedb 	bl	21c4 <xTimerGenericCommand>
							configASSERT( xResult );
    240e:	2800      	cmp	r0, #0
    2410:	d196      	bne.n	2340 <prvTimerTask+0xac>
    2412:	f04f 0328 	mov.w	r3, #40	; 0x28
    2416:	f383 8811 	msr	BASEPRI, r3
    241a:	f3bf 8f6f 	isb	sy
    241e:	f3bf 8f4f 	dsb	sy
    2422:	e7fe      	b.n	2422 <prvTimerTask+0x18e>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    2424:	9903      	ldr	r1, [sp, #12]
    2426:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    2428:	b941      	cbnz	r1, 243c <prvTimerTask+0x1a8>
    242a:	f04f 0328 	mov.w	r3, #40	; 0x28
    242e:	f383 8811 	msr	BASEPRI, r3
    2432:	f3bf 8f6f 	isb	sy
    2436:	f3bf 8f4f 	dsb	sy
    243a:	e7fe      	b.n	243a <prvTimerTask+0x1a6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    243c:	4643      	mov	r3, r8
    243e:	4642      	mov	r2, r8
    2440:	4441      	add	r1, r8
    2442:	4620      	mov	r0, r4
    2444:	f7ff fe5a 	bl	20fc <prvInsertTimerInActiveList>
    2448:	e77a      	b.n	2340 <prvTimerTask+0xac>
    244a:	bf00      	nop
    244c:	100013f8 	.word	0x100013f8
    2450:	e000ed04 	.word	0xe000ed04

00002454 <xTimerGetTimerDaemonTaskHandle>:
	configASSERT( ( xTimerTaskHandle != NULL ) );
    2454:	4b06      	ldr	r3, [pc, #24]	; (2470 <xTimerGetTimerDaemonTaskHandle+0x1c>)
    2456:	6b58      	ldr	r0, [r3, #52]	; 0x34
    2458:	b940      	cbnz	r0, 246c <xTimerGetTimerDaemonTaskHandle+0x18>
    245a:	f04f 0328 	mov.w	r3, #40	; 0x28
    245e:	f383 8811 	msr	BASEPRI, r3
    2462:	f3bf 8f6f 	isb	sy
    2466:	f3bf 8f4f 	dsb	sy
    246a:	e7fe      	b.n	246a <xTimerGetTimerDaemonTaskHandle+0x16>
}
    246c:	4770      	bx	lr
    246e:	bf00      	nop
    2470:	100013f8 	.word	0x100013f8

00002474 <xTimerGetPeriod>:
	configASSERT( xTimer );
    2474:	b940      	cbnz	r0, 2488 <xTimerGetPeriod+0x14>
    2476:	f04f 0328 	mov.w	r3, #40	; 0x28
    247a:	f383 8811 	msr	BASEPRI, r3
    247e:	f3bf 8f6f 	isb	sy
    2482:	f3bf 8f4f 	dsb	sy
    2486:	e7fe      	b.n	2486 <xTimerGetPeriod+0x12>
}
    2488:	6980      	ldr	r0, [r0, #24]
    248a:	4770      	bx	lr

0000248c <xTimerGetExpiryTime>:
	configASSERT( xTimer );
    248c:	b940      	cbnz	r0, 24a0 <xTimerGetExpiryTime+0x14>
    248e:	f04f 0328 	mov.w	r3, #40	; 0x28
    2492:	f383 8811 	msr	BASEPRI, r3
    2496:	f3bf 8f6f 	isb	sy
    249a:	f3bf 8f4f 	dsb	sy
    249e:	e7fe      	b.n	249e <xTimerGetExpiryTime+0x12>
}
    24a0:	6840      	ldr	r0, [r0, #4]
    24a2:	4770      	bx	lr

000024a4 <pcTimerGetName>:
	configASSERT( xTimer );
    24a4:	b940      	cbnz	r0, 24b8 <pcTimerGetName+0x14>
    24a6:	f04f 0328 	mov.w	r3, #40	; 0x28
    24aa:	f383 8811 	msr	BASEPRI, r3
    24ae:	f3bf 8f6f 	isb	sy
    24b2:	f3bf 8f4f 	dsb	sy
    24b6:	e7fe      	b.n	24b6 <pcTimerGetName+0x12>
}
    24b8:	6800      	ldr	r0, [r0, #0]
    24ba:	4770      	bx	lr

000024bc <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
    24bc:	b510      	push	{r4, lr}
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;

	configASSERT( xTimer );
    24be:	4604      	mov	r4, r0
    24c0:	b940      	cbnz	r0, 24d4 <xTimerIsTimerActive+0x18>
    24c2:	f04f 0328 	mov.w	r3, #40	; 0x28
    24c6:	f383 8811 	msr	BASEPRI, r3
    24ca:	f3bf 8f6f 	isb	sy
    24ce:	f3bf 8f4f 	dsb	sy
    24d2:	e7fe      	b.n	24d2 <xTimerIsTimerActive+0x16>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
    24d4:	f000 fa70 	bl	29b8 <vPortEnterCritical>
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
    24d8:	6964      	ldr	r4, [r4, #20]
    24da:	3400      	adds	r4, #0
    24dc:	bf18      	it	ne
    24de:	2401      	movne	r4, #1
	}
	taskEXIT_CRITICAL();
    24e0:	f000 fa8c 	bl	29fc <vPortExitCritical>

	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
    24e4:	4620      	mov	r0, r4
    24e6:	bd10      	pop	{r4, pc}

000024e8 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
    24e8:	b510      	push	{r4, lr}
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );
    24ea:	4604      	mov	r4, r0
    24ec:	b940      	cbnz	r0, 2500 <pvTimerGetTimerID+0x18>
    24ee:	f04f 0328 	mov.w	r3, #40	; 0x28
    24f2:	f383 8811 	msr	BASEPRI, r3
    24f6:	f3bf 8f6f 	isb	sy
    24fa:	f3bf 8f4f 	dsb	sy
    24fe:	e7fe      	b.n	24fe <pvTimerGetTimerID+0x16>

	taskENTER_CRITICAL();
    2500:	f000 fa5a 	bl	29b8 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
    2504:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
    2506:	f000 fa79 	bl	29fc <vPortExitCritical>

	return pvReturn;
}
    250a:	4620      	mov	r0, r4
    250c:	bd10      	pop	{r4, pc}

0000250e <vTimerSetTimerID>:
/*-----------------------------------------------------------*/

void vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID )
{
    250e:	b538      	push	{r3, r4, r5, lr}
    2510:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) xTimer;

	configASSERT( xTimer );
    2512:	4604      	mov	r4, r0
    2514:	b940      	cbnz	r0, 2528 <vTimerSetTimerID+0x1a>
    2516:	f04f 0328 	mov.w	r3, #40	; 0x28
    251a:	f383 8811 	msr	BASEPRI, r3
    251e:	f3bf 8f6f 	isb	sy
    2522:	f3bf 8f4f 	dsb	sy
    2526:	e7fe      	b.n	2526 <vTimerSetTimerID+0x18>

	taskENTER_CRITICAL();
    2528:	f000 fa46 	bl	29b8 <vPortEnterCritical>
	{
		pxTimer->pvTimerID = pvNewID;
    252c:	6225      	str	r5, [r4, #32]
	}
	taskEXIT_CRITICAL();
}
    252e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	taskEXIT_CRITICAL();
    2532:	f000 ba63 	b.w	29fc <vPortExitCritical>

00002536 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
    2536:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    2538:	461c      	mov	r4, r3
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
    253a:	f06f 0301 	mvn.w	r3, #1
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
    253e:	9001      	str	r0, [sp, #4]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2540:	4805      	ldr	r0, [pc, #20]	; (2558 <xTimerPendFunctionCallFromISR+0x22>)
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
    2542:	9300      	str	r3, [sp, #0]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
    2544:	9102      	str	r1, [sp, #8]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
    2546:	9203      	str	r2, [sp, #12]
		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2548:	2300      	movs	r3, #0
    254a:	4622      	mov	r2, r4
    254c:	4669      	mov	r1, sp
    254e:	6800      	ldr	r0, [r0, #0]
    2550:	f7fe f80a 	bl	568 <xQueueGenericSendFromISR>

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
	}
    2554:	b004      	add	sp, #16
    2556:	bd10      	pop	{r4, pc}
    2558:	100013f8 	.word	0x100013f8

0000255c <xTimerPendFunctionCall>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCall( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, TickType_t xTicksToWait )
	{
    255c:	b530      	push	{r4, r5, lr}
    255e:	4614      	mov	r4, r2
    2560:	461a      	mov	r2, r3
	BaseType_t xReturn;

		/* This function can only be called after a timer has been created or
		after the scheduler has been started because, until then, the timer
		queue does not exist. */
		configASSERT( xTimerQueue );
    2562:	4b0d      	ldr	r3, [pc, #52]	; (2598 <xTimerPendFunctionCall+0x3c>)
	{
    2564:	4605      	mov	r5, r0
		configASSERT( xTimerQueue );
    2566:	6818      	ldr	r0, [r3, #0]
	{
    2568:	b085      	sub	sp, #20
		configASSERT( xTimerQueue );
    256a:	b940      	cbnz	r0, 257e <xTimerPendFunctionCall+0x22>
    256c:	f04f 0328 	mov.w	r3, #40	; 0x28
    2570:	f383 8811 	msr	BASEPRI, r3
    2574:	f3bf 8f6f 	isb	sy
    2578:	f3bf 8f4f 	dsb	sy
    257c:	e7fe      	b.n	257c <xTimerPendFunctionCall+0x20>

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK;
    257e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
    2582:	9102      	str	r1, [sp, #8]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
    2584:	e88d 0028 	stmia.w	sp, {r3, r5}
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;

		xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2588:	4669      	mov	r1, sp
    258a:	2300      	movs	r3, #0
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
    258c:	9403      	str	r4, [sp, #12]
		xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    258e:	f7fd ff05 	bl	39c <xQueueGenericSend>

		tracePEND_FUNC_CALL( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
	}
    2592:	b005      	add	sp, #20
    2594:	bd30      	pop	{r4, r5, pc}
    2596:	bf00      	nop
    2598:	100013f8 	.word	0x100013f8

0000259c <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
    259c:	b510      	push	{r4, lr}
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
    259e:	201c      	movs	r0, #28
    25a0:	f000 fafe 	bl	2ba0 <pvPortMalloc>

		if( pxEventBits != NULL )
    25a4:	4604      	mov	r4, r0
    25a6:	b120      	cbz	r0, 25b2 <xEventGroupCreate+0x16>
		{
			pxEventBits->uxEventBits = 0;
    25a8:	2300      	movs	r3, #0
    25aa:	f840 3b04 	str.w	r3, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
    25ae:	f7fd fdf9 	bl	1a4 <vListInitialise>
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
	}
    25b2:	4620      	mov	r0, r4
    25b4:	bd10      	pop	{r4, pc}

000025b6 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
    25b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    25ba:	9f08      	ldr	r7, [sp, #32]
    25bc:	460d      	mov	r5, r1
    25be:	4690      	mov	r8, r2
    25c0:	4699      	mov	r9, r3
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
    25c2:	4606      	mov	r6, r0
    25c4:	b940      	cbnz	r0, 25d8 <xEventGroupWaitBits+0x22>
    25c6:	f04f 0328 	mov.w	r3, #40	; 0x28
    25ca:	f383 8811 	msr	BASEPRI, r3
    25ce:	f3bf 8f6f 	isb	sy
    25d2:	f3bf 8f4f 	dsb	sy
    25d6:	e7fe      	b.n	25d6 <xEventGroupWaitBits+0x20>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
    25d8:	f011 4a7f 	ands.w	sl, r1, #4278190080	; 0xff000000
    25dc:	d008      	beq.n	25f0 <xEventGroupWaitBits+0x3a>
    25de:	f04f 0328 	mov.w	r3, #40	; 0x28
    25e2:	f383 8811 	msr	BASEPRI, r3
    25e6:	f3bf 8f6f 	isb	sy
    25ea:	f3bf 8f4f 	dsb	sy
    25ee:	e7fe      	b.n	25ee <xEventGroupWaitBits+0x38>
	configASSERT( uxBitsToWaitFor != 0 );
    25f0:	b941      	cbnz	r1, 2604 <xEventGroupWaitBits+0x4e>
    25f2:	f04f 0328 	mov.w	r3, #40	; 0x28
    25f6:	f383 8811 	msr	BASEPRI, r3
    25fa:	f3bf 8f6f 	isb	sy
    25fe:	f3bf 8f4f 	dsb	sy
    2602:	e7fe      	b.n	2602 <xEventGroupWaitBits+0x4c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    2604:	f7ff fa6a 	bl	1adc <xTaskGetSchedulerState>
    2608:	bb48      	cbnz	r0, 265e <xEventGroupWaitBits+0xa8>
    260a:	b347      	cbz	r7, 265e <xEventGroupWaitBits+0xa8>
    260c:	f04f 0328 	mov.w	r3, #40	; 0x28
    2610:	f383 8811 	msr	BASEPRI, r3
    2614:	f3bf 8f6f 	isb	sy
    2618:	f3bf 8f4f 	dsb	sy
    261c:	e7fe      	b.n	261c <xEventGroupWaitBits+0x66>

	if( xWaitForAllBits == pdFALSE )
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
    261e:	bb43      	cbnz	r3, 2672 <xEventGroupWaitBits+0xbc>
		else if( xTicksToWait == ( TickType_t ) 0 )
    2620:	b197      	cbz	r7, 2648 <xEventGroupWaitBits+0x92>
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
    2622:	f1b8 0f00 	cmp.w	r8, #0
    2626:	bf0c      	ite	eq
    2628:	2100      	moveq	r1, #0
    262a:	f04f 7180 	movne.w	r1, #16777216	; 0x1000000
			if( xWaitForAllBits != pdFALSE )
    262e:	f1b9 0f00 	cmp.w	r9, #0
    2632:	d001      	beq.n	2638 <xEventGroupWaitBits+0x82>
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
    2634:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
    2638:	463a      	mov	r2, r7
    263a:	4329      	orrs	r1, r5
    263c:	1d30      	adds	r0, r6, #4
    263e:	f7ff f879 	bl	1734 <vTaskPlaceOnUnorderedEventList>
    2642:	46ba      	mov	sl, r7
			uxReturn = 0;
    2644:	2400      	movs	r4, #0
    2646:	e01a      	b.n	267e <xEventGroupWaitBits+0xc8>
    2648:	46ba      	mov	sl, r7
    264a:	e018      	b.n	267e <xEventGroupWaitBits+0xc8>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
    264c:	429d      	cmp	r5, r3
    264e:	d133      	bne.n	26b8 <xEventGroupWaitBits+0x102>
					if( xClearOnExit != pdFALSE )
    2650:	f1b8 0f00 	cmp.w	r8, #0
    2654:	d030      	beq.n	26b8 <xEventGroupWaitBits+0x102>
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    2656:	ea24 0505 	bic.w	r5, r4, r5
    265a:	6035      	str	r5, [r6, #0]
    265c:	e02c      	b.n	26b8 <xEventGroupWaitBits+0x102>
	vTaskSuspendAll();
    265e:	f7fe fddd 	bl	121c <vTaskSuspendAll>
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
    2662:	6834      	ldr	r4, [r6, #0]
    2664:	ea05 0304 	and.w	r3, r5, r4
	if( xWaitForAllBits == pdFALSE )
    2668:	f1b9 0f00 	cmp.w	r9, #0
    266c:	d0d7      	beq.n	261e <xEventGroupWaitBits+0x68>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
    266e:	429d      	cmp	r5, r3
    2670:	d1d6      	bne.n	2620 <xEventGroupWaitBits+0x6a>
			if( xClearOnExit != pdFALSE )
    2672:	f1b8 0f00 	cmp.w	r8, #0
    2676:	d002      	beq.n	267e <xEventGroupWaitBits+0xc8>
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    2678:	ea24 0305 	bic.w	r3, r4, r5
    267c:	6033      	str	r3, [r6, #0]
	xAlreadyYielded = xTaskResumeAll();
    267e:	f7fe fe6f 	bl	1360 <xTaskResumeAll>
	if( xTicksToWait != ( TickType_t ) 0 )
    2682:	f1ba 0f00 	cmp.w	sl, #0
    2686:	d01b      	beq.n	26c0 <xEventGroupWaitBits+0x10a>
		if( xAlreadyYielded == pdFALSE )
    2688:	b938      	cbnz	r0, 269a <xEventGroupWaitBits+0xe4>
			portYIELD_WITHIN_API();
    268a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    268e:	4b0e      	ldr	r3, [pc, #56]	; (26c8 <xEventGroupWaitBits+0x112>)
    2690:	601a      	str	r2, [r3, #0]
    2692:	f3bf 8f4f 	dsb	sy
    2696:	f3bf 8f6f 	isb	sy
		uxReturn = uxTaskResetEventItemValue();
    269a:	f7ff fb29 	bl	1cf0 <uxTaskResetEventItemValue>
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
    269e:	0183      	lsls	r3, r0, #6
		uxReturn = uxTaskResetEventItemValue();
    26a0:	4604      	mov	r4, r0
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
    26a2:	d40b      	bmi.n	26bc <xEventGroupWaitBits+0x106>
			taskENTER_CRITICAL();
    26a4:	f000 f988 	bl	29b8 <vPortEnterCritical>
				uxReturn = pxEventBits->uxEventBits;
    26a8:	6834      	ldr	r4, [r6, #0]
    26aa:	ea05 0304 	and.w	r3, r5, r4
	if( xWaitForAllBits == pdFALSE )
    26ae:	f1b9 0f00 	cmp.w	r9, #0
    26b2:	d1cb      	bne.n	264c <xEventGroupWaitBits+0x96>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
    26b4:	2b00      	cmp	r3, #0
    26b6:	d1cb      	bne.n	2650 <xEventGroupWaitBits+0x9a>
			taskEXIT_CRITICAL();
    26b8:	f000 f9a0 	bl	29fc <vPortExitCritical>
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
    26bc:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
}
    26c0:	4620      	mov	r0, r4
    26c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    26c6:	bf00      	nop
    26c8:	e000ed04 	.word	0xe000ed04

000026cc <xEventGroupClearBits>:
{
    26cc:	b570      	push	{r4, r5, r6, lr}
    26ce:	460c      	mov	r4, r1
	configASSERT( xEventGroup );
    26d0:	4605      	mov	r5, r0
    26d2:	b940      	cbnz	r0, 26e6 <xEventGroupClearBits+0x1a>
    26d4:	f04f 0328 	mov.w	r3, #40	; 0x28
    26d8:	f383 8811 	msr	BASEPRI, r3
    26dc:	f3bf 8f6f 	isb	sy
    26e0:	f3bf 8f4f 	dsb	sy
    26e4:	e7fe      	b.n	26e4 <xEventGroupClearBits+0x18>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
    26e6:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
    26ea:	d008      	beq.n	26fe <xEventGroupClearBits+0x32>
    26ec:	f04f 0328 	mov.w	r3, #40	; 0x28
    26f0:	f383 8811 	msr	BASEPRI, r3
    26f4:	f3bf 8f6f 	isb	sy
    26f8:	f3bf 8f4f 	dsb	sy
    26fc:	e7fe      	b.n	26fc <xEventGroupClearBits+0x30>
	taskENTER_CRITICAL();
    26fe:	f000 f95b 	bl	29b8 <vPortEnterCritical>
		uxReturn = pxEventBits->uxEventBits;
    2702:	682e      	ldr	r6, [r5, #0]
		pxEventBits->uxEventBits &= ~uxBitsToClear;
    2704:	ea26 0404 	bic.w	r4, r6, r4
    2708:	602c      	str	r4, [r5, #0]
	taskEXIT_CRITICAL();
    270a:	f000 f977 	bl	29fc <vPortExitCritical>
}
    270e:	4630      	mov	r0, r6
    2710:	bd70      	pop	{r4, r5, r6, pc}

00002712 <vEventGroupClearBitsCallback>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
    2712:	f7ff bfdb 	b.w	26cc <xEventGroupClearBits>

00002716 <xEventGroupClearBitsFromISR>:
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL );
    2716:	460a      	mov	r2, r1
    2718:	2300      	movs	r3, #0
    271a:	4601      	mov	r1, r0
    271c:	4801      	ldr	r0, [pc, #4]	; (2724 <xEventGroupClearBitsFromISR+0xe>)
    271e:	f7ff bf0a 	b.w	2536 <xTimerPendFunctionCallFromISR>
    2722:	bf00      	nop
    2724:	00002713 	.word	0x00002713

00002728 <xEventGroupGetBitsFromISR>:
	__asm volatile
    2728:	f3ef 8311 	mrs	r3, BASEPRI
    272c:	f04f 0228 	mov.w	r2, #40	; 0x28
    2730:	f382 8811 	msr	BASEPRI, r2
    2734:	f3bf 8f6f 	isb	sy
    2738:	f3bf 8f4f 	dsb	sy
	__asm volatile
    273c:	f383 8811 	msr	BASEPRI, r3
}
    2740:	6800      	ldr	r0, [r0, #0]
    2742:	4770      	bx	lr

00002744 <xEventGroupSetBits>:
{
    2744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2746:	460f      	mov	r7, r1
	configASSERT( xEventGroup );
    2748:	4604      	mov	r4, r0
    274a:	b940      	cbnz	r0, 275e <xEventGroupSetBits+0x1a>
	__asm volatile
    274c:	f04f 0328 	mov.w	r3, #40	; 0x28
    2750:	f383 8811 	msr	BASEPRI, r3
    2754:	f3bf 8f6f 	isb	sy
    2758:	f3bf 8f4f 	dsb	sy
    275c:	e7fe      	b.n	275c <xEventGroupSetBits+0x18>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
    275e:	f011 457f 	ands.w	r5, r1, #4278190080	; 0xff000000
    2762:	d008      	beq.n	2776 <xEventGroupSetBits+0x32>
    2764:	f04f 0328 	mov.w	r3, #40	; 0x28
    2768:	f383 8811 	msr	BASEPRI, r3
    276c:	f3bf 8f6f 	isb	sy
    2770:	f3bf 8f4f 	dsb	sy
    2774:	e7fe      	b.n	2774 <xEventGroupSetBits+0x30>
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2776:	f100 060c 	add.w	r6, r0, #12
	vTaskSuspendAll();
    277a:	f7fe fd4f 	bl	121c <vTaskSuspendAll>
		pxEventBits->uxEventBits |= uxBitsToSet;
    277e:	6823      	ldr	r3, [r4, #0]
		pxListItem = listGET_HEAD_ENTRY( pxList );
    2780:	6920      	ldr	r0, [r4, #16]
		pxEventBits->uxEventBits |= uxBitsToSet;
    2782:	433b      	orrs	r3, r7
    2784:	6023      	str	r3, [r4, #0]
		while( pxListItem != pxListEnd )
    2786:	4286      	cmp	r6, r0
    2788:	6821      	ldr	r1, [r4, #0]
    278a:	d106      	bne.n	279a <xEventGroupSetBits+0x56>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
    278c:	ea21 0105 	bic.w	r1, r1, r5
    2790:	6021      	str	r1, [r4, #0]
	( void ) xTaskResumeAll();
    2792:	f7fe fde5 	bl	1360 <xTaskResumeAll>
    2796:	6820      	ldr	r0, [r4, #0]
}
    2798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
    279a:	e890 0088 	ldmia.w	r0, {r3, r7}
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
    279e:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
    27a2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
    27a6:	d103      	bne.n	27b0 <xEventGroupSetBits+0x6c>
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
    27a8:	420a      	tst	r2, r1
    27aa:	d104      	bne.n	27b6 <xEventGroupSetBits+0x72>
{
    27ac:	4638      	mov	r0, r7
    27ae:	e7ea      	b.n	2786 <xEventGroupSetBits+0x42>
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
    27b0:	ea32 0e01 	bics.w	lr, r2, r1
    27b4:	d1fa      	bne.n	27ac <xEventGroupSetBits+0x68>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
    27b6:	01db      	lsls	r3, r3, #7
    27b8:	d500      	bpl.n	27bc <xEventGroupSetBits+0x78>
					uxBitsToClear |= uxBitsWaitedFor;
    27ba:	4315      	orrs	r5, r2
				( void ) xTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
    27bc:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
    27c0:	f7ff f83a 	bl	1838 <xTaskRemoveFromUnorderedEventList>
    27c4:	e7f2      	b.n	27ac <xEventGroupSetBits+0x68>

000027c6 <xEventGroupSync>:
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
    27c6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
{
    27ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    27ce:	4606      	mov	r6, r0
    27d0:	4688      	mov	r8, r1
    27d2:	4615      	mov	r5, r2
    27d4:	461f      	mov	r7, r3
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
    27d6:	d008      	beq.n	27ea <xEventGroupSync+0x24>
    27d8:	f04f 0328 	mov.w	r3, #40	; 0x28
    27dc:	f383 8811 	msr	BASEPRI, r3
    27e0:	f3bf 8f6f 	isb	sy
    27e4:	f3bf 8f4f 	dsb	sy
    27e8:	e7fe      	b.n	27e8 <xEventGroupSync+0x22>
	configASSERT( uxBitsToWaitFor != 0 );
    27ea:	b942      	cbnz	r2, 27fe <xEventGroupSync+0x38>
    27ec:	f04f 0328 	mov.w	r3, #40	; 0x28
    27f0:	f383 8811 	msr	BASEPRI, r3
    27f4:	f3bf 8f6f 	isb	sy
    27f8:	f3bf 8f4f 	dsb	sy
    27fc:	e7fe      	b.n	27fc <xEventGroupSync+0x36>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    27fe:	f7ff f96d 	bl	1adc <xTaskGetSchedulerState>
    2802:	b9a0      	cbnz	r0, 282e <xEventGroupSync+0x68>
    2804:	b19f      	cbz	r7, 282e <xEventGroupSync+0x68>
    2806:	f04f 0328 	mov.w	r3, #40	; 0x28
    280a:	f383 8811 	msr	BASEPRI, r3
    280e:	f3bf 8f6f 	isb	sy
    2812:	f3bf 8f4f 	dsb	sy
    2816:	e7fe      	b.n	2816 <xEventGroupSync+0x50>
			if( xTicksToWait != ( TickType_t ) 0 )
    2818:	b13f      	cbz	r7, 282a <xEventGroupSync+0x64>
				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
    281a:	463a      	mov	r2, r7
    281c:	f045 61a0 	orr.w	r1, r5, #83886080	; 0x5000000
    2820:	1d30      	adds	r0, r6, #4
    2822:	f7fe ff87 	bl	1734 <vTaskPlaceOnUnorderedEventList>
				uxReturn = 0;
    2826:	2400      	movs	r4, #0
    2828:	e012      	b.n	2850 <xEventGroupSync+0x8a>
				uxReturn = pxEventBits->uxEventBits;
    282a:	6834      	ldr	r4, [r6, #0]
    282c:	e010      	b.n	2850 <xEventGroupSync+0x8a>
	vTaskSuspendAll();
    282e:	f7fe fcf5 	bl	121c <vTaskSuspendAll>
		uxOriginalBitValue = pxEventBits->uxEventBits;
    2832:	6834      	ldr	r4, [r6, #0]
		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
    2834:	4641      	mov	r1, r8
    2836:	4630      	mov	r0, r6
		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
    2838:	ea44 0408 	orr.w	r4, r4, r8
		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
    283c:	f7ff ff82 	bl	2744 <xEventGroupSetBits>
		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
    2840:	ea35 0304 	bics.w	r3, r5, r4
    2844:	d1e8      	bne.n	2818 <xEventGroupSync+0x52>
			xTicksToWait = 0;
    2846:	2700      	movs	r7, #0
			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    2848:	6833      	ldr	r3, [r6, #0]
    284a:	ea23 0305 	bic.w	r3, r3, r5
    284e:	6033      	str	r3, [r6, #0]
	xAlreadyYielded = xTaskResumeAll();
    2850:	f7fe fd86 	bl	1360 <xTaskResumeAll>
	if( xTicksToWait != ( TickType_t ) 0 )
    2854:	b1d7      	cbz	r7, 288c <xEventGroupSync+0xc6>
		if( xAlreadyYielded == pdFALSE )
    2856:	b938      	cbnz	r0, 2868 <xEventGroupSync+0xa2>
			portYIELD_WITHIN_API();
    2858:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    285c:	4b0d      	ldr	r3, [pc, #52]	; (2894 <xEventGroupSync+0xce>)
    285e:	601a      	str	r2, [r3, #0]
    2860:	f3bf 8f4f 	dsb	sy
    2864:	f3bf 8f6f 	isb	sy
		uxReturn = uxTaskResetEventItemValue();
    2868:	f7ff fa42 	bl	1cf0 <uxTaskResetEventItemValue>
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
    286c:	0183      	lsls	r3, r0, #6
		uxReturn = uxTaskResetEventItemValue();
    286e:	4604      	mov	r4, r0
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
    2870:	d40a      	bmi.n	2888 <xEventGroupSync+0xc2>
			taskENTER_CRITICAL();
    2872:	f000 f8a1 	bl	29b8 <vPortEnterCritical>
				uxReturn = pxEventBits->uxEventBits;
    2876:	6834      	ldr	r4, [r6, #0]
				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
    2878:	ea35 0304 	bics.w	r3, r5, r4
					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    287c:	bf04      	itt	eq
    287e:	ea24 0505 	biceq.w	r5, r4, r5
    2882:	6035      	streq	r5, [r6, #0]
			taskEXIT_CRITICAL();
    2884:	f000 f8ba 	bl	29fc <vPortExitCritical>
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
    2888:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
}
    288c:	4620      	mov	r0, r4
    288e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2892:	bf00      	nop
    2894:	e000ed04 	.word	0xe000ed04

00002898 <vEventGroupSetBitsCallback>:
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
    2898:	f7ff bf54 	b.w	2744 <xEventGroupSetBits>

0000289c <vEventGroupDelete>:
{
    289c:	b538      	push	{r3, r4, r5, lr}
    289e:	4604      	mov	r4, r0
	vTaskSuspendAll();
    28a0:	f7fe fcbc 	bl	121c <vTaskSuspendAll>
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
    28a4:	f104 050c 	add.w	r5, r4, #12
		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
    28a8:	6863      	ldr	r3, [r4, #4]
    28aa:	b933      	cbnz	r3, 28ba <vEventGroupDelete+0x1e>
			vPortFree( pxEventBits );
    28ac:	4620      	mov	r0, r4
    28ae:	f000 f9d3 	bl	2c58 <vPortFree>
}
    28b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	( void ) xTaskResumeAll();
    28b6:	f7fe bd53 	b.w	1360 <xTaskResumeAll>
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
    28ba:	6920      	ldr	r0, [r4, #16]
    28bc:	42a8      	cmp	r0, r5
    28be:	d108      	bne.n	28d2 <vEventGroupDelete+0x36>
    28c0:	f04f 0328 	mov.w	r3, #40	; 0x28
    28c4:	f383 8811 	msr	BASEPRI, r3
    28c8:	f3bf 8f6f 	isb	sy
    28cc:	f3bf 8f4f 	dsb	sy
    28d0:	e7fe      	b.n	28d0 <vEventGroupDelete+0x34>
			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
    28d2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
    28d6:	f7fe ffaf 	bl	1838 <xTaskRemoveFromUnorderedEventList>
    28da:	e7e5      	b.n	28a8 <vEventGroupDelete+0xc>

000028dc <xEventGroupSetBitsFromISR>:
	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
    28dc:	4613      	mov	r3, r2
    28de:	460a      	mov	r2, r1
    28e0:	4601      	mov	r1, r0
    28e2:	4801      	ldr	r0, [pc, #4]	; (28e8 <xEventGroupSetBitsFromISR+0xc>)
    28e4:	f7ff be27 	b.w	2536 <xTimerPendFunctionCallFromISR>
    28e8:	00002899 	.word	0x00002899

000028ec <uxEventGroupGetNumber>:
	UBaseType_t uxEventGroupGetNumber( void* xEventGroup )
	{
	UBaseType_t xReturn;
	EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;

		if( xEventGroup == NULL )
    28ec:	b100      	cbz	r0, 28f0 <uxEventGroupGetNumber+0x4>
		{
			xReturn = 0;
		}
		else
		{
			xReturn = pxEventBits->uxEventGroupNumber;
    28ee:	6980      	ldr	r0, [r0, #24]
		}

		return xReturn;
	}
    28f0:	4770      	bx	lr
    28f2:	bf00      	nop
	...

00002900 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
    2900:	4b0a      	ldr	r3, [pc, #40]	; (292c <prvTaskExitError+0x2c>)
    2902:	681b      	ldr	r3, [r3, #0]
    2904:	3301      	adds	r3, #1
    2906:	d008      	beq.n	291a <prvTaskExitError+0x1a>
    2908:	f04f 0328 	mov.w	r3, #40	; 0x28
    290c:	f383 8811 	msr	BASEPRI, r3
    2910:	f3bf 8f6f 	isb	sy
    2914:	f3bf 8f4f 	dsb	sy
    2918:	e7fe      	b.n	2918 <prvTaskExitError+0x18>
    291a:	f04f 0328 	mov.w	r3, #40	; 0x28
    291e:	f383 8811 	msr	BASEPRI, r3
    2922:	f3bf 8f6f 	isb	sy
    2926:	f3bf 8f4f 	dsb	sy
    292a:	e7fe      	b.n	292a <prvTaskExitError+0x2a>
    292c:	100000cc 	.word	0x100000cc

00002930 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
    2930:	489a      	ldr	r0, [pc, #616]	; (2b9c <vPortValidateInterruptPriority+0x54>)
    2932:	6800      	ldr	r0, [r0, #0]
    2934:	6800      	ldr	r0, [r0, #0]
    2936:	f380 8808 	msr	MSP, r0
    293a:	b662      	cpsie	i
    293c:	b661      	cpsie	f
    293e:	f3bf 8f4f 	dsb	sy
    2942:	f3bf 8f6f 	isb	sy
    2946:	df00      	svc	0
    2948:	bf00      	nop

0000294a <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    294a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    294e:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    2952:	4b05      	ldr	r3, [pc, #20]	; (2968 <pxPortInitialiseStack+0x1e>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
    2954:	f021 0101 	bic.w	r1, r1, #1
    2958:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    295c:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    2960:	f840 2c20 	str.w	r2, [r0, #-32]
}
    2964:	3840      	subs	r0, #64	; 0x40
    2966:	4770      	bx	lr
    2968:	00002901 	.word	0x00002901

0000296c <SVC_Handler>:
	__asm volatile (
    296c:	4b08      	ldr	r3, [pc, #32]	; (2990 <pxCurrentTCBConst2>)
    296e:	6819      	ldr	r1, [r3, #0]
    2970:	6808      	ldr	r0, [r1, #0]
    2972:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    2976:	f380 8809 	msr	PSP, r0
    297a:	f3bf 8f6f 	isb	sy
    297e:	f04f 0000 	mov.w	r0, #0
    2982:	f380 8811 	msr	BASEPRI, r0
    2986:	f04e 0e0d 	orr.w	lr, lr, #13
    298a:	4770      	bx	lr
    298c:	f3af 8000 	nop.w

00002990 <pxCurrentTCBConst2>:
    2990:	10001300 	.word	0x10001300

00002994 <vPortEndScheduler>:

void vPortEndScheduler( void )
{
	/* Not implemented in ports where there is nothing to return to.
	Artificially force an assert. */
	configASSERT( uxCriticalNesting == 1000UL );
    2994:	4b07      	ldr	r3, [pc, #28]	; (29b4 <vPortEndScheduler+0x20>)
    2996:	681b      	ldr	r3, [r3, #0]
    2998:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    299c:	d008      	beq.n	29b0 <vPortEndScheduler+0x1c>
    299e:	f04f 0328 	mov.w	r3, #40	; 0x28
    29a2:	f383 8811 	msr	BASEPRI, r3
    29a6:	f3bf 8f6f 	isb	sy
    29aa:	f3bf 8f4f 	dsb	sy
    29ae:	e7fe      	b.n	29ae <vPortEndScheduler+0x1a>
    29b0:	4770      	bx	lr
    29b2:	bf00      	nop
    29b4:	100000cc 	.word	0x100000cc

000029b8 <vPortEnterCritical>:
    29b8:	f04f 0328 	mov.w	r3, #40	; 0x28
    29bc:	f383 8811 	msr	BASEPRI, r3
    29c0:	f3bf 8f6f 	isb	sy
    29c4:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
    29c8:	4a0a      	ldr	r2, [pc, #40]	; (29f4 <vPortEnterCritical+0x3c>)
    29ca:	6813      	ldr	r3, [r2, #0]
    29cc:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
    29ce:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
    29d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
    29d2:	d10d      	bne.n	29f0 <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    29d4:	4b08      	ldr	r3, [pc, #32]	; (29f8 <vPortEnterCritical+0x40>)
    29d6:	681b      	ldr	r3, [r3, #0]
    29d8:	f013 0fff 	tst.w	r3, #255	; 0xff
    29dc:	d008      	beq.n	29f0 <vPortEnterCritical+0x38>
    29de:	f04f 0328 	mov.w	r3, #40	; 0x28
    29e2:	f383 8811 	msr	BASEPRI, r3
    29e6:	f3bf 8f6f 	isb	sy
    29ea:	f3bf 8f4f 	dsb	sy
    29ee:	e7fe      	b.n	29ee <vPortEnterCritical+0x36>
    29f0:	4770      	bx	lr
    29f2:	bf00      	nop
    29f4:	100000cc 	.word	0x100000cc
    29f8:	e000ed04 	.word	0xe000ed04

000029fc <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
    29fc:	4a08      	ldr	r2, [pc, #32]	; (2a20 <vPortExitCritical+0x24>)
    29fe:	6813      	ldr	r3, [r2, #0]
    2a00:	b943      	cbnz	r3, 2a14 <vPortExitCritical+0x18>
    2a02:	f04f 0328 	mov.w	r3, #40	; 0x28
    2a06:	f383 8811 	msr	BASEPRI, r3
    2a0a:	f3bf 8f6f 	isb	sy
    2a0e:	f3bf 8f4f 	dsb	sy
    2a12:	e7fe      	b.n	2a12 <vPortExitCritical+0x16>
	uxCriticalNesting--;
    2a14:	3b01      	subs	r3, #1
    2a16:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
    2a18:	b90b      	cbnz	r3, 2a1e <vPortExitCritical+0x22>
	__asm volatile
    2a1a:	f383 8811 	msr	BASEPRI, r3
    2a1e:	4770      	bx	lr
    2a20:	100000cc 	.word	0x100000cc

00002a24 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    2a24:	f3ef 8009 	mrs	r0, PSP
    2a28:	f3bf 8f6f 	isb	sy
    2a2c:	4b10      	ldr	r3, [pc, #64]	; (2a70 <pxCurrentTCBConst>)
    2a2e:	681a      	ldr	r2, [r3, #0]
    2a30:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    2a34:	6010      	str	r0, [r2, #0]
    2a36:	e92d 4008 	stmdb	sp!, {r3, lr}
    2a3a:	f04f 0028 	mov.w	r0, #40	; 0x28
    2a3e:	f380 8811 	msr	BASEPRI, r0
    2a42:	f7fe fdc9 	bl	15d8 <vTaskSwitchContext>
    2a46:	f04f 0000 	mov.w	r0, #0
    2a4a:	f380 8811 	msr	BASEPRI, r0
    2a4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    2a52:	6819      	ldr	r1, [r3, #0]
    2a54:	6808      	ldr	r0, [r1, #0]
    2a56:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    2a5a:	f380 8809 	msr	PSP, r0
    2a5e:	f3bf 8f6f 	isb	sy
    2a62:	4770      	bx	lr
    2a64:	f3af 8000 	nop.w
    2a68:	f3af 8000 	nop.w
    2a6c:	f3af 8000 	nop.w

00002a70 <pxCurrentTCBConst>:
    2a70:	10001300 	.word	0x10001300

00002a74 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    2a74:	b508      	push	{r3, lr}
	__asm volatile
    2a76:	f04f 0328 	mov.w	r3, #40	; 0x28
    2a7a:	f383 8811 	msr	BASEPRI, r3
    2a7e:	f3bf 8f6f 	isb	sy
    2a82:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
    2a86:	f7fe fbf9 	bl	127c <xTaskIncrementTick>
    2a8a:	b118      	cbz	r0, 2a94 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
    2a8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    2a90:	4b02      	ldr	r3, [pc, #8]	; (2a9c <SysTick_Handler+0x28>)
    2a92:	601a      	str	r2, [r3, #0]
	__asm volatile
    2a94:	2300      	movs	r3, #0
    2a96:	f383 8811 	msr	BASEPRI, r3
    2a9a:	bd08      	pop	{r3, pc}
    2a9c:	e000ed04 	.word	0xe000ed04

00002aa0 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    2aa0:	4a03      	ldr	r2, [pc, #12]	; (2ab0 <vPortSetupTimerInterrupt+0x10>)
    2aa2:	4b04      	ldr	r3, [pc, #16]	; (2ab4 <vPortSetupTimerInterrupt+0x14>)
    2aa4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
    2aa6:	2207      	movs	r2, #7
    2aa8:	f843 2c04 	str.w	r2, [r3, #-4]
    2aac:	4770      	bx	lr
    2aae:	bf00      	nop
    2ab0:	000176ff 	.word	0x000176ff
    2ab4:	e000e014 	.word	0xe000e014

00002ab8 <xPortStartScheduler>:
{
    2ab8:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
    2aba:	4b1f      	ldr	r3, [pc, #124]	; (2b38 <xPortStartScheduler+0x80>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
    2abc:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
    2abe:	781a      	ldrb	r2, [r3, #0]
    2ac0:	b2d2      	uxtb	r2, r2
    2ac2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
    2ac4:	22ff      	movs	r2, #255	; 0xff
    2ac6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
    2ac8:	781b      	ldrb	r3, [r3, #0]
    2aca:	b2db      	uxtb	r3, r3
    2acc:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
    2ad0:	f89d 2003 	ldrb.w	r2, [sp, #3]
    2ad4:	4b19      	ldr	r3, [pc, #100]	; (2b3c <xPortStartScheduler+0x84>)
    2ad6:	f002 0228 	and.w	r2, r2, #40	; 0x28
    2ada:	701a      	strb	r2, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
    2adc:	2207      	movs	r2, #7
    2ade:	605a      	str	r2, [r3, #4]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
    2ae0:	f89d 0003 	ldrb.w	r0, [sp, #3]
    2ae4:	1e54      	subs	r4, r2, #1
    2ae6:	0600      	lsls	r0, r0, #24
    2ae8:	d41c      	bmi.n	2b24 <xPortStartScheduler+0x6c>
    2aea:	b101      	cbz	r1, 2aee <xPortStartScheduler+0x36>
    2aec:	605a      	str	r2, [r3, #4]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
    2aee:	685a      	ldr	r2, [r3, #4]
    2af0:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
    2af2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2af6:	605a      	str	r2, [r3, #4]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
    2af8:	9b01      	ldr	r3, [sp, #4]
    2afa:	4a0f      	ldr	r2, [pc, #60]	; (2b38 <xPortStartScheduler+0x80>)
    2afc:	b2db      	uxtb	r3, r3
    2afe:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
    2b00:	4b0f      	ldr	r3, [pc, #60]	; (2b40 <xPortStartScheduler+0x88>)
    2b02:	681a      	ldr	r2, [r3, #0]
    2b04:	f442 02f0 	orr.w	r2, r2, #7864320	; 0x780000
    2b08:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
    2b0a:	681a      	ldr	r2, [r3, #0]
    2b0c:	f042 42f0 	orr.w	r2, r2, #2013265920	; 0x78000000
    2b10:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
    2b12:	f7ff ffc5 	bl	2aa0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
    2b16:	2200      	movs	r2, #0
    2b18:	4b0a      	ldr	r3, [pc, #40]	; (2b44 <xPortStartScheduler+0x8c>)
    2b1a:	601a      	str	r2, [r3, #0]
	prvPortStartFirstTask();
    2b1c:	f7ff ff08 	bl	2930 <prvPortStartFirstTask>
	prvTaskExitError();
    2b20:	f7ff feee 	bl	2900 <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
    2b24:	f89d 2003 	ldrb.w	r2, [sp, #3]
    2b28:	2101      	movs	r1, #1
    2b2a:	0052      	lsls	r2, r2, #1
    2b2c:	b2d2      	uxtb	r2, r2
    2b2e:	f88d 2003 	strb.w	r2, [sp, #3]
    2b32:	4622      	mov	r2, r4
    2b34:	e7d4      	b.n	2ae0 <xPortStartScheduler+0x28>
    2b36:	bf00      	nop
    2b38:	e000e400 	.word	0xe000e400
    2b3c:	10001434 	.word	0x10001434
    2b40:	e000ed20 	.word	0xe000ed20
    2b44:	100000cc 	.word	0x100000cc

00002b48 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
    2b48:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
    2b4c:	2b0f      	cmp	r3, #15
    2b4e:	4a10      	ldr	r2, [pc, #64]	; (2b90 <vPortValidateInterruptPriority+0x48>)
    2b50:	d90d      	bls.n	2b6e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
    2b52:	4910      	ldr	r1, [pc, #64]	; (2b94 <vPortValidateInterruptPriority+0x4c>)
    2b54:	5c5b      	ldrb	r3, [r3, r1]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
    2b56:	7811      	ldrb	r1, [r2, #0]
    2b58:	4299      	cmp	r1, r3
    2b5a:	d908      	bls.n	2b6e <vPortValidateInterruptPriority+0x26>
	__asm volatile
    2b5c:	f04f 0328 	mov.w	r3, #40	; 0x28
    2b60:	f383 8811 	msr	BASEPRI, r3
    2b64:	f3bf 8f6f 	isb	sy
    2b68:	f3bf 8f4f 	dsb	sy
    2b6c:	e7fe      	b.n	2b6c <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
    2b6e:	4b0a      	ldr	r3, [pc, #40]	; (2b98 <vPortValidateInterruptPriority+0x50>)
    2b70:	6852      	ldr	r2, [r2, #4]
    2b72:	681b      	ldr	r3, [r3, #0]
    2b74:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    2b78:	4293      	cmp	r3, r2
    2b7a:	d908      	bls.n	2b8e <vPortValidateInterruptPriority+0x46>
    2b7c:	f04f 0328 	mov.w	r3, #40	; 0x28
    2b80:	f383 8811 	msr	BASEPRI, r3
    2b84:	f3bf 8f6f 	isb	sy
    2b88:	f3bf 8f4f 	dsb	sy
    2b8c:	e7fe      	b.n	2b8c <vPortValidateInterruptPriority+0x44>
    2b8e:	4770      	bx	lr
    2b90:	10001434 	.word	0x10001434
    2b94:	e000e3f0 	.word	0xe000e3f0
    2b98:	e000ed0c 	.word	0xe000ed0c
    2b9c:	e000ed08 	.word	0xe000ed08

00002ba0 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    2ba0:	b570      	push	{r4, r5, r6, lr}
    2ba2:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
    2ba4:	f7fe fb3a 	bl	121c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    2ba8:	4b27      	ldr	r3, [pc, #156]	; (2c48 <pvPortMalloc+0xa8>)
    2baa:	6898      	ldr	r0, [r3, #8]
    2bac:	b990      	cbnz	r0, 2bd4 <pvPortMalloc+0x34>
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
    2bae:	f641 75f8 	movw	r5, #8184	; 0x1ff8
    2bb2:	4926      	ldr	r1, [pc, #152]	; (2c4c <pvPortMalloc+0xac>)
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    2bb4:	f103 0214 	add.w	r2, r3, #20
    2bb8:	f022 0207 	bic.w	r2, r2, #7
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
    2bbc:	f8c1 5f18 	str.w	r5, [r1, #3864]	; 0xf18
	xEnd.pxNextFreeBlock = NULL;
    2bc0:	f8c1 0f14 	str.w	r0, [r1, #3860]	; 0xf14

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
    2bc4:	f601 7114 	addw	r1, r1, #3860	; 0xf14
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    2bc8:	601a      	str	r2, [r3, #0]
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
    2bca:	6055      	str	r5, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
    2bcc:	6011      	str	r1, [r2, #0]
			xHeapHasBeenInitialised = pdTRUE;
    2bce:	2201      	movs	r2, #1
	xStart.xBlockSize = ( size_t ) 0;
    2bd0:	6058      	str	r0, [r3, #4]
			xHeapHasBeenInitialised = pdTRUE;
    2bd2:	609a      	str	r2, [r3, #8]
		if( xWantedSize > 0 )
    2bd4:	b12c      	cbz	r4, 2be2 <pvPortMalloc+0x42>
			xWantedSize += heapSTRUCT_SIZE;
    2bd6:	3408      	adds	r4, #8
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
    2bd8:	0762      	lsls	r2, r4, #29
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    2bda:	bf1c      	itt	ne
    2bdc:	f024 0407 	bicne.w	r4, r4, #7
    2be0:	3408      	addne	r4, #8
		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
    2be2:	f641 72f6 	movw	r2, #8182	; 0x1ff6
    2be6:	1e61      	subs	r1, r4, #1
    2be8:	4291      	cmp	r1, r2
    2bea:	d807      	bhi.n	2bfc <pvPortMalloc+0x5c>
			pxBlock = xStart.pxNextFreeBlock;
    2bec:	681b      	ldr	r3, [r3, #0]
			pxPreviousBlock = &xStart;
    2bee:	4916      	ldr	r1, [pc, #88]	; (2c48 <pvPortMalloc+0xa8>)
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    2bf0:	685a      	ldr	r2, [r3, #4]
    2bf2:	4294      	cmp	r4, r2
    2bf4:	d804      	bhi.n	2c00 <pvPortMalloc+0x60>
			if( pxBlock != &xEnd )
    2bf6:	4816      	ldr	r0, [pc, #88]	; (2c50 <pvPortMalloc+0xb0>)
    2bf8:	4283      	cmp	r3, r0
    2bfa:	d107      	bne.n	2c0c <pvPortMalloc+0x6c>
void *pvReturn = NULL;
    2bfc:	2500      	movs	r5, #0
    2bfe:	e01d      	b.n	2c3c <pvPortMalloc+0x9c>
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    2c00:	6818      	ldr	r0, [r3, #0]
    2c02:	2800      	cmp	r0, #0
    2c04:	d0f7      	beq.n	2bf6 <pvPortMalloc+0x56>
    2c06:	4619      	mov	r1, r3
    2c08:	4603      	mov	r3, r0
    2c0a:	e7f1      	b.n	2bf0 <pvPortMalloc+0x50>
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    2c0c:	680d      	ldr	r5, [r1, #0]
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    2c0e:	6818      	ldr	r0, [r3, #0]
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    2c10:	1b12      	subs	r2, r2, r4
    2c12:	2a10      	cmp	r2, #16
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    2c14:	f105 0508 	add.w	r5, r5, #8
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    2c18:	6008      	str	r0, [r1, #0]
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    2c1a:	d90a      	bls.n	2c32 <pvPortMalloc+0x92>
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    2c1c:	1919      	adds	r1, r3, r4
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    2c1e:	604a      	str	r2, [r1, #4]
					pxBlock->xBlockSize = xWantedSize;
    2c20:	605c      	str	r4, [r3, #4]
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    2c22:	684e      	ldr	r6, [r1, #4]
    2c24:	4a08      	ldr	r2, [pc, #32]	; (2c48 <pvPortMalloc+0xa8>)
    2c26:	6810      	ldr	r0, [r2, #0]
    2c28:	6844      	ldr	r4, [r0, #4]
    2c2a:	42a6      	cmp	r6, r4
    2c2c:	d80a      	bhi.n	2c44 <pvPortMalloc+0xa4>
    2c2e:	6008      	str	r0, [r1, #0]
    2c30:	6011      	str	r1, [r2, #0]
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    2c32:	4908      	ldr	r1, [pc, #32]	; (2c54 <pvPortMalloc+0xb4>)
    2c34:	685b      	ldr	r3, [r3, #4]
    2c36:	680a      	ldr	r2, [r1, #0]
    2c38:	1ad2      	subs	r2, r2, r3
    2c3a:	600a      	str	r2, [r1, #0]
	( void ) xTaskResumeAll();
    2c3c:	f7fe fb90 	bl	1360 <xTaskResumeAll>
}
    2c40:	4628      	mov	r0, r5
    2c42:	bd70      	pop	{r4, r5, r6, pc}
    2c44:	4602      	mov	r2, r0
    2c46:	e7ee      	b.n	2c26 <pvPortMalloc+0x86>
    2c48:	1000143c 	.word	0x1000143c
    2c4c:	10002534 	.word	0x10002534
    2c50:	10003448 	.word	0x10003448
    2c54:	100000d0 	.word	0x100000d0

00002c58 <vPortFree>:
{
    2c58:	b538      	push	{r3, r4, r5, lr}
	if( pv != NULL )
    2c5a:	4604      	mov	r4, r0
    2c5c:	b1b8      	cbz	r0, 2c8e <vPortFree+0x36>
		puc -= heapSTRUCT_SIZE;
    2c5e:	f1a0 0508 	sub.w	r5, r0, #8
		vTaskSuspendAll();
    2c62:	f7fe fadb 	bl	121c <vTaskSuspendAll>
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    2c66:	f854 0c04 	ldr.w	r0, [r4, #-4]
    2c6a:	4a09      	ldr	r2, [pc, #36]	; (2c90 <vPortFree+0x38>)
    2c6c:	6811      	ldr	r1, [r2, #0]
    2c6e:	684b      	ldr	r3, [r1, #4]
    2c70:	4298      	cmp	r0, r3
    2c72:	d80a      	bhi.n	2c8a <vPortFree+0x32>
    2c74:	f844 1c08 	str.w	r1, [r4, #-8]
    2c78:	6015      	str	r5, [r2, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
    2c7a:	4a06      	ldr	r2, [pc, #24]	; (2c94 <vPortFree+0x3c>)
    2c7c:	6813      	ldr	r3, [r2, #0]
    2c7e:	4403      	add	r3, r0
    2c80:	6013      	str	r3, [r2, #0]
}
    2c82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		( void ) xTaskResumeAll();
    2c86:	f7fe bb6b 	b.w	1360 <xTaskResumeAll>
    2c8a:	460a      	mov	r2, r1
    2c8c:	e7ee      	b.n	2c6c <vPortFree+0x14>
    2c8e:	bd38      	pop	{r3, r4, r5, pc}
    2c90:	1000143c 	.word	0x1000143c
    2c94:	100000d0 	.word	0x100000d0

00002c98 <xPortGetFreeHeapSize>:
}
    2c98:	4b01      	ldr	r3, [pc, #4]	; (2ca0 <xPortGetFreeHeapSize+0x8>)
    2c9a:	6818      	ldr	r0, [r3, #0]
    2c9c:	4770      	bx	lr
    2c9e:	bf00      	nop
    2ca0:	100000d0 	.word	0x100000d0

00002ca4 <vPortInitialiseBlocks>:
{
    2ca4:	4770      	bx	lr
    2ca6:	bf00      	nop

00002ca8 <prvHumidityTask>:

static void prvHumidityTask( void )
{
	do{
	    uint32_t i = 1000000;
	    while(i--);
    2ca8:	4b01      	ldr	r3, [pc, #4]	; (2cb0 <prvHumidityTask+0x8>)
    2caa:	3b01      	subs	r3, #1
    2cac:	d1fd      	bne.n	2caa <prvHumidityTask+0x2>
    2cae:	e7fb      	b.n	2ca8 <prvHumidityTask>
    2cb0:	000f4241 	.word	0x000f4241

00002cb4 <prvPressureTask>:
{
    2cb4:	b508      	push	{r3, lr}
        vTaskDelay( 1000 * portTICK_PERIOD_MS ); /** Sleep 10ms. */
    2cb6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    2cba:	f7fe fc05 	bl	14c8 <vTaskDelay>
    2cbe:	e7fa      	b.n	2cb6 <prvPressureTask+0x2>

00002cc0 <prvCompassTask>:
    2cc0:	b508      	push	{r3, lr}
    2cc2:	f7ff fff7 	bl	2cb4 <prvPressureTask>

00002cc6 <prvGatekeeperTask>:
    2cc6:	b508      	push	{r3, lr}
    2cc8:	f7ff fff4 	bl	2cb4 <prvPressureTask>

00002ccc <prvSerialSendTask>:
{	
    2ccc:	b508      	push	{r3, lr}
	UART_Send(LPC_UART3, (uint8_t*)"START\0", 6, BLOCKING);
    2cce:	2206      	movs	r2, #6
    2cd0:	2301      	movs	r3, #1
    2cd2:	4904      	ldr	r1, [pc, #16]	; (2ce4 <prvSerialSendTask+0x18>)
    2cd4:	4804      	ldr	r0, [pc, #16]	; (2ce8 <prvSerialSendTask+0x1c>)
    2cd6:	f000 fce9 	bl	36ac <UART_Send>
		vTaskDelay( 1000 * portTICK_PERIOD_MS ); /** Sleep 10ms. */
    2cda:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    2cde:	f7fe fbf3 	bl	14c8 <vTaskDelay>
    2ce2:	e7fa      	b.n	2cda <prvSerialSendTask+0xe>
    2ce4:	0000a611 	.word	0x0000a611
    2ce8:	4009c000 	.word	0x4009c000

00002cec <prvLightTask>:
{
    2cec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    UART_Send(LPC_UART3, (uint8_t*)"TEsTING\0", 8, BLOCKING);
    2cf0:	2301      	movs	r3, #1
    2cf2:	2208      	movs	r2, #8
    2cf4:	4933      	ldr	r1, [pc, #204]	; (2dc4 <prvLightTask+0xd8>)
    2cf6:	4834      	ldr	r0, [pc, #208]	; (2dc8 <prvLightTask+0xdc>)
    2cf8:	f000 fcd8 	bl	36ac <UART_Send>
		lux_value = (double)200 * adc_value / 4096;
    2cfc:	2400      	movs	r4, #0
    2cfe:	2600      	movs	r6, #0
		ADC_StartCmd( LPC_ADC, ADC_START_NOW );
    2d00:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 2ddc <prvLightTask+0xf0>
		lux_value = (double)200 * adc_value / 4096;
    2d04:	4d31      	ldr	r5, [pc, #196]	; (2dcc <prvLightTask+0xe0>)
    2d06:	4f32      	ldr	r7, [pc, #200]	; (2dd0 <prvLightTask+0xe4>)
		ADC_StartCmd( LPC_ADC, ADC_START_NOW );
    2d08:	2101      	movs	r1, #1
    2d0a:	4648      	mov	r0, r9
    2d0c:	f001 fac8 	bl	42a0 <ADC_StartCmd>
		while (!(ADC_ChannelGetStatus( LPC_ADC, ADC_CHANNEL_0, ADC_DATA_DONE )));
    2d10:	2201      	movs	r2, #1
    2d12:	2100      	movs	r1, #0
    2d14:	4648      	mov	r0, r9
    2d16:	f001 fb12 	bl	433e <ADC_ChannelGetStatus>
    2d1a:	2800      	cmp	r0, #0
    2d1c:	d0f8      	beq.n	2d10 <prvLightTask+0x24>
		adc_value = ADC_ChannelGetData( LPC_ADC, ADC_CHANNEL_0 );
    2d1e:	2100      	movs	r1, #0
    2d20:	4648      	mov	r0, r9
    2d22:	f001 fb06 	bl	4332 <ADC_ChannelGetData>
    2d26:	4680      	mov	r8, r0
		lux_value = (double)200 * adc_value / 4096;
    2d28:	f001 ffd8 	bl	4cdc <__aeabi_ui2d>
    2d2c:	4622      	mov	r2, r4
    2d2e:	462b      	mov	r3, r5
    2d30:	f002 f84a 	bl	4dc8 <__aeabi_dmul>
    2d34:	4632      	mov	r2, r6
    2d36:	463b      	mov	r3, r7
    2d38:	f002 f846 	bl	4dc8 <__aeabi_dmul>
		if( lux_value < 2000 ){
    2d3c:	2200      	movs	r2, #0
    2d3e:	4b25      	ldr	r3, [pc, #148]	; (2dd4 <prvLightTask+0xe8>)
    2d40:	f002 fab4 	bl	52ac <__aeabi_dcmplt>
    2d44:	b120      	cbz	r0, 2d50 <prvLightTask+0x64>
	        LPC_GPIO0->FIODIR &= ~(1 << 4);
    2d46:	4a24      	ldr	r2, [pc, #144]	; (2dd8 <prvLightTask+0xec>)
    2d48:	6813      	ldr	r3, [r2, #0]
    2d4a:	f023 0310 	bic.w	r3, r3, #16
    2d4e:	6013      	str	r3, [r2, #0]
		message[0] = 'S';
    2d50:	2353      	movs	r3, #83	; 0x53
    2d52:	f88d 3000 	strb.w	r3, [sp]
		message[1] = 'L';
    2d56:	234c      	movs	r3, #76	; 0x4c
    2d58:	f88d 3001 	strb.w	r3, [sp, #1]
		message[2] = '0' + adc_value % 10;
    2d5c:	230a      	movs	r3, #10
    2d5e:	fbb8 f1f3 	udiv	r1, r8, r3
    2d62:	fb03 8211 	mls	r2, r3, r1, r8
    2d66:	3230      	adds	r2, #48	; 0x30
    2d68:	f88d 2002 	strb.w	r2, [sp, #2]
		message[3] = '0' + ( adc_value / 10 ) % 10;
    2d6c:	fbb1 f2f3 	udiv	r2, r1, r3
    2d70:	fb03 1212 	mls	r2, r3, r2, r1
    2d74:	3230      	adds	r2, #48	; 0x30
    2d76:	f88d 2003 	strb.w	r2, [sp, #3]
		message[4] = '0' + ( adc_value / 100 ) % 10;
    2d7a:	2264      	movs	r2, #100	; 0x64
    2d7c:	fbb8 f1f2 	udiv	r1, r8, r2
		message[5] = '0' + ( adc_value / 1000 ) % 10;
    2d80:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
		message[4] = '0' + ( adc_value / 100 ) % 10;
    2d84:	fbb1 f2f3 	udiv	r2, r1, r3
		message[5] = '0' + ( adc_value / 1000 ) % 10;
    2d88:	fbb8 f8fa 	udiv	r8, r8, sl
		message[4] = '0' + ( adc_value / 100 ) % 10;
    2d8c:	fb03 1212 	mls	r2, r3, r2, r1
    2d90:	3230      	adds	r2, #48	; 0x30
    2d92:	f88d 2004 	strb.w	r2, [sp, #4]
		message[5] = '0' + ( adc_value / 1000 ) % 10;
    2d96:	fbb8 f2f3 	udiv	r2, r8, r3
		message[6] = '\n';
    2d9a:	f88d 3006 	strb.w	r3, [sp, #6]
		message[5] = '0' + ( adc_value / 1000 ) % 10;
    2d9e:	fb03 8812 	mls	r8, r3, r2, r8
		message[7] = '\0';
    2da2:	2300      	movs	r3, #0
		message[5] = '0' + ( adc_value / 1000 ) % 10;
    2da4:	f108 0830 	add.w	r8, r8, #48	; 0x30
		message[7] = '\0';
    2da8:	f88d 3007 	strb.w	r3, [sp, #7]
		UART_Send(LPC_UART3, message, 7, BLOCKING);
    2dac:	2207      	movs	r2, #7
    2dae:	2301      	movs	r3, #1
    2db0:	4669      	mov	r1, sp
    2db2:	4805      	ldr	r0, [pc, #20]	; (2dc8 <prvLightTask+0xdc>)
		message[5] = '0' + ( adc_value / 1000 ) % 10;
    2db4:	f88d 8005 	strb.w	r8, [sp, #5]
		UART_Send(LPC_UART3, message, 7, BLOCKING);
    2db8:	f000 fc78 	bl	36ac <UART_Send>
		vTaskDelay( 1000 * portTICK_PERIOD_MS ); /** Sleep 100ms. */
    2dbc:	4650      	mov	r0, sl
    2dbe:	f7fe fb83 	bl	14c8 <vTaskDelay>
	do{
    2dc2:	e7a1      	b.n	2d08 <prvLightTask+0x1c>
    2dc4:	0000a618 	.word	0x0000a618
    2dc8:	4009c000 	.word	0x4009c000
    2dcc:	40690000 	.word	0x40690000
    2dd0:	3f300000 	.word	0x3f300000
    2dd4:	409f4000 	.word	0x409f4000
    2dd8:	2009c000 	.word	0x2009c000
    2ddc:	40034000 	.word	0x40034000

00002de0 <prvSerialRecvTask>:
{
    2de0:	b573      	push	{r0, r1, r4, r5, r6, lr}
		len = UART_Receive(LPC_UART3, rxbuf, 1, NONE_BLOCKING);
    2de2:	4e15      	ldr	r6, [pc, #84]	; (2e38 <prvSerialRecvTask+0x58>)
	        case 'f': xEventGroupSetBits( xCommandEvent, /* Event group being updated. */
    2de4:	4c15      	ldr	r4, [pc, #84]	; (2e3c <prvSerialRecvTask+0x5c>)
	        default: LPC_GPIO0->FIOSET |= (1 << 4);
    2de6:	4d16      	ldr	r5, [pc, #88]	; (2e40 <prvSerialRecvTask+0x60>)
		len = UART_Receive(LPC_UART3, rxbuf, 1, NONE_BLOCKING);
    2de8:	2300      	movs	r3, #0
    2dea:	2201      	movs	r2, #1
    2dec:	a901      	add	r1, sp, #4
    2dee:	4630      	mov	r0, r6
    2df0:	f000 fc78 	bl	36e4 <UART_Receive>
		if( len != 0 ){
    2df4:	b1e0      	cbz	r0, 2e30 <prvSerialRecvTask+0x50>
	        switch( rxbuf[len - 1] ){
    2df6:	ab02      	add	r3, sp, #8
    2df8:	4418      	add	r0, r3
    2dfa:	f810 3c05 	ldrb.w	r3, [r0, #-5]
    2dfe:	2b66      	cmp	r3, #102	; 0x66
    2e00:	d00d      	beq.n	2e1e <prvSerialRecvTask+0x3e>
    2e02:	d806      	bhi.n	2e12 <prvSerialRecvTask+0x32>
    2e04:	2b62      	cmp	r3, #98	; 0x62
    2e06:	d00f      	beq.n	2e28 <prvSerialRecvTask+0x48>
	        default: LPC_GPIO0->FIOSET |= (1 << 4);
    2e08:	69ab      	ldr	r3, [r5, #24]
    2e0a:	f043 0310 	orr.w	r3, r3, #16
    2e0e:	61ab      	str	r3, [r5, #24]
    2e10:	e7ea      	b.n	2de8 <prvSerialRecvTask+0x8>
	        switch( rxbuf[len - 1] ){
    2e12:	2b6c      	cmp	r3, #108	; 0x6c
    2e14:	d00a      	beq.n	2e2c <prvSerialRecvTask+0x4c>
    2e16:	2b72      	cmp	r3, #114	; 0x72
    2e18:	d1f6      	bne.n	2e08 <prvSerialRecvTask+0x28>
	        case 'r': xEventGroupSetBits( xCommandEvent, /* Event group being updated. */
    2e1a:	2120      	movs	r1, #32
    2e1c:	e000      	b.n	2e20 <prvSerialRecvTask+0x40>
	        case 'f': xEventGroupSetBits( xCommandEvent, /* Event group being updated. */
    2e1e:	2104      	movs	r1, #4
	        case 'r': xEventGroupSetBits( xCommandEvent, /* Event group being updated. */
    2e20:	6820      	ldr	r0, [r4, #0]
    2e22:	f7ff fc8f 	bl	2744 <xEventGroupSetBits>
	                  break;
    2e26:	e7df      	b.n	2de8 <prvSerialRecvTask+0x8>
	        case 'b': xEventGroupSetBits( xCommandEvent, /* Event group being updated. */
    2e28:	2108      	movs	r1, #8
    2e2a:	e7f9      	b.n	2e20 <prvSerialRecvTask+0x40>
	        case 'l': xEventGroupSetBits( xCommandEvent, /* Event group being updated. */
    2e2c:	2110      	movs	r1, #16
    2e2e:	e7f7      	b.n	2e20 <prvSerialRecvTask+0x40>
		    vTaskDelay( 100 * portTICK_PERIOD_MS ); /** Sleep 100ms. */
    2e30:	2064      	movs	r0, #100	; 0x64
    2e32:	f7fe fb49 	bl	14c8 <vTaskDelay>
    2e36:	e7d7      	b.n	2de8 <prvSerialRecvTask+0x8>
    2e38:	4009c000 	.word	0x4009c000
    2e3c:	10003450 	.word	0x10003450
    2e40:	2009c000 	.word	0x2009c000

00002e44 <switchIN>:
    switch( tag ){
    2e44:	3801      	subs	r0, #1
    2e46:	2803      	cmp	r0, #3
    2e48:	d811      	bhi.n	2e6e <switchIN+0x2a>
    2e4a:	e8df f000 	tbb	[pc, r0]
    2e4e:	0702      	.short	0x0702
    2e50:	0d0a      	.short	0x0d0a
    case 1: GPIO_SetValue( 1, (1 << 18) );
    2e52:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    case 4: GPIO_SetValue( 1, (1 << 23) );
    2e56:	2001      	movs	r0, #1
    2e58:	f000 beea 	b.w	3c30 <GPIO_SetValue>
    case 2: GPIO_SetValue( 1, (1 << 20) );
    2e5c:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
    2e60:	e7f9      	b.n	2e56 <switchIN+0x12>
    case 3: GPIO_SetValue( 1, (1 << 21) );
    2e62:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    2e66:	e7f6      	b.n	2e56 <switchIN+0x12>
    case 4: GPIO_SetValue( 1, (1 << 23) );
    2e68:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    2e6c:	e7f3      	b.n	2e56 <switchIN+0x12>
    2e6e:	4770      	bx	lr

00002e70 <switchOUT>:
{
    2e70:	b508      	push	{r3, lr}
    GPIO_ClearValue( 1, (1 << 18) );
    2e72:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    2e76:	2001      	movs	r0, #1
    2e78:	f000 fee4 	bl	3c44 <GPIO_ClearValue>
    GPIO_ClearValue( 1, (1 << 20) );
    2e7c:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
    2e80:	2001      	movs	r0, #1
    2e82:	f000 fedf 	bl	3c44 <GPIO_ClearValue>
    GPIO_ClearValue( 1, (1 << 21) );
    2e86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    2e8a:	2001      	movs	r0, #1
    2e8c:	f000 feda 	bl	3c44 <GPIO_ClearValue>
}
    2e90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    GPIO_ClearValue( 1, (1 << 23) );
    2e94:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    2e98:	2001      	movs	r0, #1
    2e9a:	f000 bed3 	b.w	3c44 <GPIO_ClearValue>

00002e9e <EINT3_IRQHandler>:
void EINT3_IRQHandler(void){
    2e9e:	4770      	bx	lr

00002ea0 <SetDutyCycle>:
{
    2ea0:	b510      	push	{r4, lr}
    LPC_PWM1->MR1 = m11;
    2ea2:	4c03      	ldr	r4, [pc, #12]	; (2eb0 <SetDutyCycle+0x10>)
    2ea4:	61e0      	str	r0, [r4, #28]
    LPC_PWM1->MR2 = m12;
    2ea6:	6221      	str	r1, [r4, #32]
    LPC_PWM1->MR3 = m21;
    2ea8:	6262      	str	r2, [r4, #36]	; 0x24
    LPC_PWM1->MR4 = m22;
    2eaa:	6423      	str	r3, [r4, #64]	; 0x40
    2eac:	bd10      	pop	{r4, pc}
    2eae:	bf00      	nop
    2eb0:	40018000 	.word	0x40018000

00002eb4 <EnablePWM>:
    LPC_PWM1->LER = ( 1 << SBIT_LEN0 ) |
    2eb4:	221f      	movs	r2, #31
    2eb6:	4b03      	ldr	r3, [pc, #12]	; (2ec4 <EnablePWM+0x10>)
    2eb8:	651a      	str	r2, [r3, #80]	; 0x50
    LPC_PWM1->PCR = ( 1 << SBIT_PWMENA1 ) |
    2eba:	f44f 52f0 	mov.w	r2, #7680	; 0x1e00
    2ebe:	64da      	str	r2, [r3, #76]	; 0x4c
    2ec0:	4770      	bx	lr
    2ec2:	bf00      	nop
    2ec4:	40018000 	.word	0x40018000

00002ec8 <prvMotorTask>:
{
    2ec8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	    uxBits = xEventGroupWaitBits( xCommandEvent, /* Event group being tested. */
    2eca:	4e22      	ldr	r6, [pc, #136]	; (2f54 <prvMotorTask+0x8c>)
    2ecc:	4c22      	ldr	r4, [pc, #136]	; (2f58 <prvMotorTask+0x90>)
    2ece:	4d23      	ldr	r5, [pc, #140]	; (2f5c <prvMotorTask+0x94>)
    2ed0:	2396      	movs	r3, #150	; 0x96
    2ed2:	213c      	movs	r1, #60	; 0x3c
    2ed4:	9300      	str	r3, [sp, #0]
    2ed6:	2201      	movs	r2, #1
    2ed8:	2300      	movs	r3, #0
    2eda:	6830      	ldr	r0, [r6, #0]
    2edc:	f7ff fb6b 	bl	25b6 <xEventGroupWaitBits>
        if( ( uxBits & MoveForwardBit ) != 0 ){
    2ee0:	f010 0104 	ands.w	r1, r0, #4
    2ee4:	d00a      	beq.n	2efc <prvMotorTask+0x34>
    LPC_PWM1->MR2 = m12;
    2ee6:	2300      	movs	r3, #0
    LPC_PWM1->MR1 = m11;
    2ee8:	2223      	movs	r2, #35	; 0x23
    2eea:	61e2      	str	r2, [r4, #28]
    LPC_PWM1->MR2 = m12;
    2eec:	6223      	str	r3, [r4, #32]
    LPC_PWM1->MR3 = m21;
    2eee:	6262      	str	r2, [r4, #36]	; 0x24
    LPC_PWM1->MR4 = m22;
    2ef0:	6423      	str	r3, [r4, #64]	; 0x40
            EnablePWM();
    2ef2:	f7ff ffdf 	bl	2eb4 <EnablePWM>
            direction = 'f';
    2ef6:	2366      	movs	r3, #102	; 0x66
            direction = 'x';
    2ef8:	702b      	strb	r3, [r5, #0]
    2efa:	e7e9      	b.n	2ed0 <prvMotorTask+0x8>
        } else if( ( uxBits & MoveBackBit ) != 0 ){
    2efc:	f010 0208 	ands.w	r2, r0, #8
    2f00:	d008      	beq.n	2f14 <prvMotorTask+0x4c>
    LPC_PWM1->MR2 = m12;
    2f02:	2323      	movs	r3, #35	; 0x23
    LPC_PWM1->MR1 = m11;
    2f04:	61e1      	str	r1, [r4, #28]
    LPC_PWM1->MR2 = m12;
    2f06:	6223      	str	r3, [r4, #32]
    LPC_PWM1->MR3 = m21;
    2f08:	6261      	str	r1, [r4, #36]	; 0x24
    LPC_PWM1->MR4 = m22;
    2f0a:	6423      	str	r3, [r4, #64]	; 0x40
            EnablePWM();
    2f0c:	f7ff ffd2 	bl	2eb4 <EnablePWM>
            direction = 'b';
    2f10:	2362      	movs	r3, #98	; 0x62
    2f12:	e7f1      	b.n	2ef8 <prvMotorTask+0x30>
        } else if( ( uxBits & MoveLeftBit ) != 0 ){
    2f14:	f010 0310 	ands.w	r3, r0, #16
    2f18:	d008      	beq.n	2f2c <prvMotorTask+0x64>
    LPC_PWM1->MR1 = m11;
    2f1a:	2337      	movs	r3, #55	; 0x37
    2f1c:	61e3      	str	r3, [r4, #28]
    LPC_PWM1->MR2 = m12;
    2f1e:	6222      	str	r2, [r4, #32]
    LPC_PWM1->MR3 = m21;
    2f20:	6262      	str	r2, [r4, #36]	; 0x24
    LPC_PWM1->MR4 = m22;
    2f22:	6423      	str	r3, [r4, #64]	; 0x40
            EnablePWM();
    2f24:	f7ff ffc6 	bl	2eb4 <EnablePWM>
            direction = 'l';
    2f28:	236c      	movs	r3, #108	; 0x6c
    2f2a:	e7e5      	b.n	2ef8 <prvMotorTask+0x30>
        } else if( ( uxBits & MoveRightBit ) != 0 ){
    2f2c:	f010 0020 	ands.w	r0, r0, #32
    2f30:	d008      	beq.n	2f44 <prvMotorTask+0x7c>
    LPC_PWM1->MR2 = m12;
    2f32:	2237      	movs	r2, #55	; 0x37
    LPC_PWM1->MR1 = m11;
    2f34:	61e3      	str	r3, [r4, #28]
    LPC_PWM1->MR2 = m12;
    2f36:	6222      	str	r2, [r4, #32]
    LPC_PWM1->MR3 = m21;
    2f38:	6262      	str	r2, [r4, #36]	; 0x24
    LPC_PWM1->MR4 = m22;
    2f3a:	6423      	str	r3, [r4, #64]	; 0x40
            EnablePWM();
    2f3c:	f7ff ffba 	bl	2eb4 <EnablePWM>
            direction = 'r';
    2f40:	2372      	movs	r3, #114	; 0x72
    2f42:	e7d9      	b.n	2ef8 <prvMotorTask+0x30>
    LPC_PWM1->MR1 = m11;
    2f44:	61e0      	str	r0, [r4, #28]
    LPC_PWM1->MR2 = m12;
    2f46:	6220      	str	r0, [r4, #32]
    LPC_PWM1->MR3 = m21;
    2f48:	6260      	str	r0, [r4, #36]	; 0x24
    LPC_PWM1->MR4 = m22;
    2f4a:	6420      	str	r0, [r4, #64]	; 0x40
            EnablePWM();
    2f4c:	f7ff ffb2 	bl	2eb4 <EnablePWM>
            direction = 'x';
    2f50:	2378      	movs	r3, #120	; 0x78
    2f52:	e7d1      	b.n	2ef8 <prvMotorTask+0x30>
    2f54:	10003450 	.word	0x10003450
    2f58:	40018000 	.word	0x40018000
    2f5c:	100000d4 	.word	0x100000d4

00002f60 <SetupHardware>:
	GPIO_SetDir( 1, (1 << 18), 1 );
    2f60:	2201      	movs	r2, #1
{
    2f62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	GPIO_SetDir( 1, (1 << 18), 1 );
    2f66:	4610      	mov	r0, r2
{
    2f68:	b086      	sub	sp, #24
	GPIO_SetDir( 1, (1 << 18), 1 );
    2f6a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    2f6e:	f000 fe4d 	bl	3c0c <GPIO_SetDir>
    GPIO_SetDir( 1, (1 << 20), 1 );
    2f72:	2201      	movs	r2, #1
    2f74:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
    2f78:	4610      	mov	r0, r2
    2f7a:	f000 fe47 	bl	3c0c <GPIO_SetDir>
    GPIO_SetDir( 1, (1 << 21), 1 );
    2f7e:	2201      	movs	r2, #1
    2f80:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    2f84:	4610      	mov	r0, r2
    2f86:	f000 fe41 	bl	3c0c <GPIO_SetDir>
    GPIO_SetDir( 1, (1 << 23), 1 );
    2f8a:	2201      	movs	r2, #1
    2f8c:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    2f90:	4610      	mov	r0, r2
    2f92:	f000 fe3b 	bl	3c0c <GPIO_SetDir>
	LPC_PINCON->PINSEL4 = 0x55; 
    2f96:	2255      	movs	r2, #85	; 0x55
    2f98:	4b2e      	ldr	r3, [pc, #184]	; (3054 <SetupHardware+0xf4>)
    LPC_PWM1->MR1 = m11;
    2f9a:	2400      	movs	r4, #0
	LPC_PINCON->PINSEL4 = 0x55; 
    2f9c:	611a      	str	r2, [r3, #16]
    LPC_PWM1->TCR = ( 1 << SBIT_CNTEN ) | ( 1 << SBIT_PWMEN );
    2f9e:	2205      	movs	r2, #5
    2fa0:	f5a3 33a0 	sub.w	r3, r3, #81920	; 0x14000
    2fa4:	605a      	str	r2, [r3, #4]
    LPC_PWM1->PR  =  0x1000; /** Prescaler */
    2fa6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    LPC_PWM1->MCR = ( 1 << SBIT_PWMMR0R );  /** Reset on PWMMR0. */
    2faa:	f04f 0802 	mov.w	r8, #2
    LPC_PWM1->PR  =  0x1000; /** Prescaler */
    2fae:	60da      	str	r2, [r3, #12]
	LPC_PWM1->MR0 = 100;    
    2fb0:	2264      	movs	r2, #100	; 0x64
    LPC_PWM1->MCR = ( 1 << SBIT_PWMMR0R );  /** Reset on PWMMR0. */
    2fb2:	f8c3 8014 	str.w	r8, [r3, #20]
	LPC_PWM1->MR0 = 100;    
    2fb6:	619a      	str	r2, [r3, #24]
    LPC_PWM1->MR1 = m11;
    2fb8:	61dc      	str	r4, [r3, #28]
    LPC_PWM1->MR2 = m12;
    2fba:	621c      	str	r4, [r3, #32]
    LPC_PWM1->MR3 = m21;
    2fbc:	625c      	str	r4, [r3, #36]	; 0x24
    LPC_PWM1->MR4 = m22;
    2fbe:	641c      	str	r4, [r3, #64]	; 0x40
    EnablePWM();
    2fc0:	f7ff ff78 	bl	2eb4 <EnablePWM>
	PinCfg.Funcnum = 1;
    2fc4:	2601      	movs	r6, #1
	PinCfg.Pinnum = 23;
    2fc6:	2317      	movs	r3, #23
	PinCfg.Portnum = 0;
    2fc8:	ad06      	add	r5, sp, #24
    2fca:	f805 4d10 	strb.w	r4, [r5, #-16]!
	ADC_Init( LPC_ADC, 200 );
    2fce:	4f22      	ldr	r7, [pc, #136]	; (3058 <SetupHardware+0xf8>)
	PINSEL_ConfigPin(&PinCfg);
    2fd0:	4628      	mov	r0, r5
	PinCfg.Pinnum = 23;
    2fd2:	f88d 3009 	strb.w	r3, [sp, #9]
	PinCfg.OpenDrain = 0;
    2fd6:	f88d 400c 	strb.w	r4, [sp, #12]
	PinCfg.Pinmode = 0;
    2fda:	f88d 400b 	strb.w	r4, [sp, #11]
	PinCfg.Funcnum = 1;
    2fde:	f88d 600a 	strb.w	r6, [sp, #10]
	PINSEL_ConfigPin(&PinCfg);
    2fe2:	f000 fdcd 	bl	3b80 <PINSEL_ConfigPin>
	ADC_Init( LPC_ADC, 200 );
    2fe6:	4638      	mov	r0, r7
    2fe8:	21c8      	movs	r1, #200	; 0xc8
    2fea:	f001 f921 	bl	4230 <ADC_Init>
	ADC_IntConfig( LPC_ADC, ADC_ADINTEN0 ,DISABLE );
    2fee:	4622      	mov	r2, r4
    2ff0:	4621      	mov	r1, r4
    2ff2:	4638      	mov	r0, r7
    2ff4:	f001 f97b 	bl	42ee <ADC_IntConfig>
	ADC_ChannelCmd( LPC_ADC, ADC_CHANNEL_0, ENABLE );
    2ff8:	4632      	mov	r2, r6
    2ffa:	4621      	mov	r1, r4
    2ffc:	4638      	mov	r0, r7
    2ffe:	f001 f983 	bl	4308 <ADC_ChannelCmd>
	PINSEL_ConfigPin(&PinCfg);
    3002:	4628      	mov	r0, r5
	PinCfg.OpenDrain = 0;
    3004:	f88d 400c 	strb.w	r4, [sp, #12]
	PinCfg.Pinmode = 0;
    3008:	f88d 400b 	strb.w	r4, [sp, #11]
	PinCfg.Pinnum = 0;
    300c:	f88d 4009 	strb.w	r4, [sp, #9]
	PinCfg.Portnum = 0;
    3010:	f88d 4008 	strb.w	r4, [sp, #8]
	PinCfg.Funcnum = 2;
    3014:	f88d 800a 	strb.w	r8, [sp, #10]
	UART_Init(LPC_UART3, &UARTConfigStruct);
    3018:	4c10      	ldr	r4, [pc, #64]	; (305c <SetupHardware+0xfc>)
	PINSEL_ConfigPin(&PinCfg);
    301a:	f000 fdb1 	bl	3b80 <PINSEL_ConfigPin>
	PINSEL_ConfigPin(&PinCfg);
    301e:	4628      	mov	r0, r5
	PinCfg.Pinnum = 1;
    3020:	f88d 6009 	strb.w	r6, [sp, #9]
	PINSEL_ConfigPin(&PinCfg);
    3024:	f000 fdac 	bl	3b80 <PINSEL_ConfigPin>
	UART_ConfigStructInit(&UARTConfigStruct);
    3028:	a804      	add	r0, sp, #16
    302a:	f000 fb31 	bl	3690 <UART_ConfigStructInit>
	UART_Init(LPC_UART3, &UARTConfigStruct);
    302e:	a904      	add	r1, sp, #16
    3030:	4620      	mov	r0, r4
    3032:	f000 f9e6 	bl	3402 <UART_Init>
	UART_FIFOConfigStructInit(&UARTFIFOConfigStruct);
    3036:	a801      	add	r0, sp, #4
    3038:	f000 fbc8 	bl	37cc <UART_FIFOConfigStructInit>
	UART_FIFOConfig(LPC_UART3, &UARTFIFOConfigStruct);
    303c:	a901      	add	r1, sp, #4
    303e:	4620      	mov	r0, r4
    3040:	f000 fba5 	bl	378e <UART_FIFOConfig>
	UART_TxCmd(LPC_UART3, ENABLE);
    3044:	4631      	mov	r1, r6
    3046:	4620      	mov	r0, r4
    3048:	f000 fbfe 	bl	3848 <UART_TxCmd>
}
    304c:	b006      	add	sp, #24
    304e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3052:	bf00      	nop
    3054:	4002c000 	.word	0x4002c000
    3058:	40034000 	.word	0x40034000
    305c:	4009c000 	.word	0x4009c000

00003060 <main>:
{
    3060:	b5f0      	push	{r4, r5, r6, r7, lr}
    3062:	b08b      	sub	sp, #44	; 0x2c
	SystemInit();
    3064:	f000 f944 	bl	32f0 <SystemInit>
	SetupHardware();
    3068:	f7ff ff7a 	bl	2f60 <SetupHardware>
	xTaskCreate( (TaskFunction_t)prvMotorTask, /** Function that implements the task. */
    306c:	ab02      	add	r3, sp, #8
	TaskHandle_t xMotorHandle = NULL;
    306e:	2400      	movs	r4, #0
	xTaskCreate( (TaskFunction_t)prvMotorTask, /** Function that implements the task. */
    3070:	9301      	str	r3, [sp, #4]
    3072:	2308      	movs	r3, #8
    3074:	225a      	movs	r2, #90	; 0x5a
    3076:	9300      	str	r3, [sp, #0]
    3078:	4948      	ldr	r1, [pc, #288]	; (319c <main+0x13c>)
    307a:	4623      	mov	r3, r4
    307c:	4848      	ldr	r0, [pc, #288]	; (31a0 <main+0x140>)
	TaskHandle_t xMotorHandle = NULL;
    307e:	9402      	str	r4, [sp, #8]
	TaskHandle_t xSerialRecvHandle = NULL;
    3080:	9403      	str	r4, [sp, #12]
	TaskHandle_t xSerialSendHandle = NULL;
    3082:	9404      	str	r4, [sp, #16]
	TaskHandle_t xGatekeeperHandle = NULL;
    3084:	9405      	str	r4, [sp, #20]
	TaskHandle_t xCompassHandle = NULL;
    3086:	9406      	str	r4, [sp, #24]
	TaskHandle_t xLightHandle = NULL;
    3088:	9407      	str	r4, [sp, #28]
	TaskHandle_t xPressureHandle = NULL;
    308a:	9408      	str	r4, [sp, #32]
	TaskHandle_t xHumidityHandle = NULL;
    308c:	9409      	str	r4, [sp, #36]	; 0x24
	xTaskCreate( (TaskFunction_t)prvMotorTask, /** Function that implements the task. */
    308e:	f7fd fe07 	bl	ca0 <xTaskCreate>
	xTaskCreate( (TaskFunction_t)prvSerialRecvTask, /** Function that implements the task. */
    3092:	ab03      	add	r3, sp, #12
    3094:	9301      	str	r3, [sp, #4]
    3096:	2307      	movs	r3, #7
    3098:	225a      	movs	r2, #90	; 0x5a
    309a:	9300      	str	r3, [sp, #0]
    309c:	4941      	ldr	r1, [pc, #260]	; (31a4 <main+0x144>)
    309e:	4623      	mov	r3, r4
    30a0:	4841      	ldr	r0, [pc, #260]	; (31a8 <main+0x148>)
    30a2:	f7fd fdfd 	bl	ca0 <xTaskCreate>
	xTaskCreate( (TaskFunction_t)prvSerialSendTask, /** Function that implements the task. */
    30a6:	ab04      	add	r3, sp, #16
    30a8:	9301      	str	r3, [sp, #4]
    30aa:	2306      	movs	r3, #6
    30ac:	225a      	movs	r2, #90	; 0x5a
    30ae:	9300      	str	r3, [sp, #0]
    30b0:	493e      	ldr	r1, [pc, #248]	; (31ac <main+0x14c>)
    30b2:	4623      	mov	r3, r4
    30b4:	483e      	ldr	r0, [pc, #248]	; (31b0 <main+0x150>)
    30b6:	f7fd fdf3 	bl	ca0 <xTaskCreate>
	xTaskCreate( (TaskFunction_t)prvGatekeeperTask, /** Function that implements the task. */
    30ba:	ab05      	add	r3, sp, #20
    30bc:	9301      	str	r3, [sp, #4]
    30be:	2305      	movs	r3, #5
	xTaskCreate( (TaskFunction_t)prvCompassTask, /** Function that implements the task. */
    30c0:	2704      	movs	r7, #4
	xTaskCreate( (TaskFunction_t)prvLightTask, /** Function that implements the task. */
    30c2:	2503      	movs	r5, #3
	xTaskCreate( (TaskFunction_t)prvPressureTask, /** Function that implements the task. */
    30c4:	2602      	movs	r6, #2
	xTaskCreate( (TaskFunction_t)prvGatekeeperTask, /** Function that implements the task. */
    30c6:	9300      	str	r3, [sp, #0]
    30c8:	225a      	movs	r2, #90	; 0x5a
    30ca:	4623      	mov	r3, r4
    30cc:	4939      	ldr	r1, [pc, #228]	; (31b4 <main+0x154>)
    30ce:	483a      	ldr	r0, [pc, #232]	; (31b8 <main+0x158>)
    30d0:	f7fd fde6 	bl	ca0 <xTaskCreate>
	xTaskCreate( (TaskFunction_t)prvCompassTask, /** Function that implements the task. */
    30d4:	ab06      	add	r3, sp, #24
    30d6:	9301      	str	r3, [sp, #4]
    30d8:	225a      	movs	r2, #90	; 0x5a
    30da:	4623      	mov	r3, r4
    30dc:	4937      	ldr	r1, [pc, #220]	; (31bc <main+0x15c>)
    30de:	9700      	str	r7, [sp, #0]
    30e0:	4837      	ldr	r0, [pc, #220]	; (31c0 <main+0x160>)
    30e2:	f7fd fddd 	bl	ca0 <xTaskCreate>
	xTaskCreate( (TaskFunction_t)prvLightTask, /** Function that implements the task. */
    30e6:	ab07      	add	r3, sp, #28
    30e8:	9301      	str	r3, [sp, #4]
    30ea:	225a      	movs	r2, #90	; 0x5a
    30ec:	4623      	mov	r3, r4
    30ee:	4935      	ldr	r1, [pc, #212]	; (31c4 <main+0x164>)
    30f0:	9500      	str	r5, [sp, #0]
    30f2:	4835      	ldr	r0, [pc, #212]	; (31c8 <main+0x168>)
    30f4:	f7fd fdd4 	bl	ca0 <xTaskCreate>
	xTaskCreate( (TaskFunction_t)prvPressureTask, /** Function that implements the task. */
    30f8:	ab08      	add	r3, sp, #32
    30fa:	9301      	str	r3, [sp, #4]
    30fc:	225a      	movs	r2, #90	; 0x5a
    30fe:	4623      	mov	r3, r4
    3100:	4932      	ldr	r1, [pc, #200]	; (31cc <main+0x16c>)
    3102:	9600      	str	r6, [sp, #0]
    3104:	4832      	ldr	r0, [pc, #200]	; (31d0 <main+0x170>)
    3106:	f7fd fdcb 	bl	ca0 <xTaskCreate>
	xTaskCreate( (TaskFunction_t)prvHumidityTask, /** Function that implements the task. */
    310a:	ab09      	add	r3, sp, #36	; 0x24
    310c:	9301      	str	r3, [sp, #4]
    310e:	2301      	movs	r3, #1
    3110:	225a      	movs	r2, #90	; 0x5a
    3112:	9300      	str	r3, [sp, #0]
    3114:	492f      	ldr	r1, [pc, #188]	; (31d4 <main+0x174>)
    3116:	4623      	mov	r3, r4
    3118:	482f      	ldr	r0, [pc, #188]	; (31d8 <main+0x178>)
    311a:	f7fd fdc1 	bl	ca0 <xTaskCreate>
	vTaskSetApplicationTaskTag( xMotorHandle, ( void * ) 4 );
    311e:	4639      	mov	r1, r7
    3120:	9802      	ldr	r0, [sp, #8]
    3122:	f7fe fa2d 	bl	1580 <vTaskSetApplicationTaskTag>
	vTaskSetApplicationTaskTag( xSerialRecvHandle, ( void * ) 2 );
    3126:	4631      	mov	r1, r6
    3128:	9803      	ldr	r0, [sp, #12]
    312a:	f7fe fa29 	bl	1580 <vTaskSetApplicationTaskTag>
	vTaskSetApplicationTaskTag( xSerialSendHandle, ( void * ) 2 );
    312e:	4631      	mov	r1, r6
    3130:	9804      	ldr	r0, [sp, #16]
    3132:	f7fe fa25 	bl	1580 <vTaskSetApplicationTaskTag>
	vTaskSetApplicationTaskTag( xGatekeeperHandle, ( void * ) 3 );
    3136:	4629      	mov	r1, r5
    3138:	9805      	ldr	r0, [sp, #20]
    313a:	f7fe fa21 	bl	1580 <vTaskSetApplicationTaskTag>
	vTaskSetApplicationTaskTag( xCompassHandle, ( void * ) 3 );
    313e:	4629      	mov	r1, r5
    3140:	9806      	ldr	r0, [sp, #24]
    3142:	f7fe fa1d 	bl	1580 <vTaskSetApplicationTaskTag>
	vTaskSetApplicationTaskTag( xLightHandle, ( void * ) 3 );
    3146:	4629      	mov	r1, r5
    3148:	9807      	ldr	r0, [sp, #28]
    314a:	f7fe fa19 	bl	1580 <vTaskSetApplicationTaskTag>
	vTaskSetApplicationTaskTag( xPressureHandle, ( void * ) 3 );
    314e:	4629      	mov	r1, r5
    3150:	9808      	ldr	r0, [sp, #32]
    3152:	f7fe fa15 	bl	1580 <vTaskSetApplicationTaskTag>
	vTaskSetApplicationTaskTag( xHumidityHandle, ( void * ) 3 );
    3156:	4629      	mov	r1, r5
    3158:	9809      	ldr	r0, [sp, #36]	; 0x24
    315a:	f7fe fa11 	bl	1580 <vTaskSetApplicationTaskTag>
	xCommandEvent = xEventGroupCreate();
    315e:	f7ff fa1d 	bl	259c <xEventGroupCreate>
    3162:	4b1e      	ldr	r3, [pc, #120]	; (31dc <main+0x17c>)
    3164:	6018      	str	r0, [r3, #0]
    if( xCommandEvent == NULL )
    3166:	b940      	cbnz	r0, 317a <main+0x11a>
        LPC_GPIO0->FIODIR |= (1 << 4);
    3168:	4b1d      	ldr	r3, [pc, #116]	; (31e0 <main+0x180>)
    316a:	681a      	ldr	r2, [r3, #0]
    316c:	f042 0210 	orr.w	r2, r2, #16
    3170:	601a      	str	r2, [r3, #0]
	    LPC_GPIO0->FIOSET |= (1 << 4);
    3172:	699a      	ldr	r2, [r3, #24]
    3174:	f042 0210 	orr.w	r2, r2, #16
    3178:	619a      	str	r2, [r3, #24]
{
    317a:	4b1a      	ldr	r3, [pc, #104]	; (31e4 <main+0x184>)
	    asm("nop");
    317c:	bf00      	nop
	for( i = 0; i < 30000000; i++ ){
    317e:	3b01      	subs	r3, #1
    3180:	d1fc      	bne.n	317c <main+0x11c>
	LPC_GPIO0->FIODIR |= (1 << 4);
    3182:	4b17      	ldr	r3, [pc, #92]	; (31e0 <main+0x180>)
    3184:	681a      	ldr	r2, [r3, #0]
    3186:	f042 0210 	orr.w	r2, r2, #16
    318a:	601a      	str	r2, [r3, #0]
	LPC_GPIO0->FIOCLR |= (1 << 4);
    318c:	69da      	ldr	r2, [r3, #28]
    318e:	f042 0210 	orr.w	r2, r2, #16
    3192:	61da      	str	r2, [r3, #28]
	vTaskStartScheduler();
    3194:	f7fd fff8 	bl	1188 <vTaskStartScheduler>
    3198:	e7fe      	b.n	3198 <main+0x138>
    319a:	bf00      	nop
    319c:	0000a621 	.word	0x0000a621
    31a0:	00002ec9 	.word	0x00002ec9
    31a4:	0000a62b 	.word	0x0000a62b
    31a8:	00002de1 	.word	0x00002de1
    31ac:	0000a63a 	.word	0x0000a63a
    31b0:	00002ccd 	.word	0x00002ccd
    31b4:	0000a649 	.word	0x0000a649
    31b8:	00002cc7 	.word	0x00002cc7
    31bc:	0000a658 	.word	0x0000a658
    31c0:	00002cc1 	.word	0x00002cc1
    31c4:	0000a664 	.word	0x0000a664
    31c8:	00002ced 	.word	0x00002ced
    31cc:	0000a66e 	.word	0x0000a66e
    31d0:	00002cb5 	.word	0x00002cb5
    31d4:	0000a67b 	.word	0x0000a67b
    31d8:	00002ca9 	.word	0x00002ca9
    31dc:	10003450 	.word	0x10003450
    31e0:	2009c000 	.word	0x2009c000
    31e4:	01c9c380 	.word	0x01c9c380

000031e8 <Default_Handler>:
/  This is the code that gets called when the processor receives an            /
/  unexpected interrupt.  This simply enters an infinite loop, preserving      /
/  the system state for examination by a debugger.                             /
/                                                                              /
/-----------------------------------------------------------------------------*/
void Default_Handler(void) {
    31e8:	e7fe      	b.n	31e8 <Default_Handler>

000031ea <Reset_Handler>:
{
    31ea:	4668      	mov	r0, sp
    31ec:	f020 0107 	bic.w	r1, r0, #7
    31f0:	468d      	mov	sp, r1
    31f2:	b501      	push	{r0, lr}
    31f4:	4a0b      	ldr	r2, [pc, #44]	; (3224 <Reset_Handler+0x3a>)
    31f6:	4b0c      	ldr	r3, [pc, #48]	; (3228 <Reset_Handler+0x3e>)
		for(pulDest = &__data_start__; pulDest < &__data_end__; )
    31f8:	490c      	ldr	r1, [pc, #48]	; (322c <Reset_Handler+0x42>)
    31fa:	428b      	cmp	r3, r1
    31fc:	d30a      	bcc.n	3214 <Reset_Handler+0x2a>
        *(pulDest++) = 0;
    31fe:	2100      	movs	r1, #0
    3200:	4b0b      	ldr	r3, [pc, #44]	; (3230 <Reset_Handler+0x46>)
    for(pulDest = &__bss_start__; pulDest < &__bss_end__; )
    3202:	4a0c      	ldr	r2, [pc, #48]	; (3234 <Reset_Handler+0x4a>)
    3204:	4293      	cmp	r3, r2
    3206:	d30a      	bcc.n	321e <Reset_Handler+0x34>
    main();
    3208:	f7ff ff2a 	bl	3060 <main>
}
    320c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    3210:	4685      	mov	sp, r0
    3212:	4770      	bx	lr
			*(pulDest++) = *(pulSrc++);
    3214:	f852 0f04 	ldr.w	r0, [r2, #4]!
    3218:	f843 0b04 	str.w	r0, [r3], #4
    321c:	e7ed      	b.n	31fa <Reset_Handler+0x10>
        *(pulDest++) = 0;
    321e:	f843 1b04 	str.w	r1, [r3], #4
    3222:	e7ef      	b.n	3204 <Reset_Handler+0x1a>
    3224:	0000a9b0 	.word	0x0000a9b0
    3228:	100000c8 	.word	0x100000c8
    322c:	10000a94 	.word	0x10000a94
    3230:	10001298 	.word	0x10001298
    3234:	100034f0 	.word	0x100034f0

00003238 <SystemCoreClockUpdate>:

/*-----------------------------------------------------------------------------/
/  Clock functions                                                             /
/-----------------------------------------------------------------------------*/ 
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{
    3238:	b538      	push	{r3, r4, r5, lr}
  /* Determine clock frequency according to clock register values             */
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { /* If PLL0 enabled and connected */
    323a:	4b27      	ldr	r3, [pc, #156]	; (32d8 <SystemCoreClockUpdate+0xa0>)
    323c:	4c27      	ldr	r4, [pc, #156]	; (32dc <SystemCoreClockUpdate+0xa4>)
    323e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    3242:	f3c2 6201 	ubfx	r2, r2, #24, #2
    3246:	2a03      	cmp	r2, #3
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    3248:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
    324c:	f002 0203 	and.w	r2, r2, #3
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { /* If PLL0 enabled and connected */
    3250:	d12f      	bne.n	32b2 <SystemCoreClockUpdate+0x7a>
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    3252:	2a01      	cmp	r2, #1
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                /* Main oscillator => PLL0       */
        SystemCoreClock = (OSC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
    3254:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    3258:	d01b      	beq.n	3292 <SystemCoreClockUpdate+0x5a>
    325a:	2a02      	cmp	r2, #2
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 2:                                /* RTC oscillator => PLL0        */
        SystemCoreClock = (RTC_CLK * 
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
    325c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
    3260:	f3c1 010e 	ubfx	r1, r1, #0, #15
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
    3264:	f3c2 4207 	ubfx	r2, r2, #16, #8
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
    3268:	f8d3 5104 	ldr.w	r5, [r3, #260]	; 0x104
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
    326c:	f101 0101 	add.w	r1, r1, #1
    3270:	f102 0201 	add.w	r2, r2, #1
    3274:	f04f 0300 	mov.w	r3, #0
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    3278:	d018      	beq.n	32ac <SystemCoreClockUpdate+0x74>
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
    327a:	4819      	ldr	r0, [pc, #100]	; (32e0 <SystemCoreClockUpdate+0xa8>)
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
    327c:	fba1 0100 	umull	r0, r1, r1, r0
    3280:	f002 f83c 	bl	52fc <__aeabi_uldivmod>
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
    3284:	b2ea      	uxtb	r2, r5
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
    3286:	3201      	adds	r2, #1
    3288:	2300      	movs	r3, #0
    328a:	f002 f837 	bl	52fc <__aeabi_uldivmod>
        SystemCoreClock = (RTC_CLK * 
    328e:	6020      	str	r0, [r4, #0]
        break;
    3290:	bd38      	pop	{r3, r4, r5, pc}
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
    3292:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
    3296:	f3c1 010e 	ubfx	r1, r1, #0, #15
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
    329a:	f3c2 4207 	ubfx	r2, r2, #16, #8
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
    329e:	f8d3 5104 	ldr.w	r5, [r3, #260]	; 0x104
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
    32a2:	3101      	adds	r1, #1
    32a4:	3201      	adds	r2, #1
    32a6:	2300      	movs	r3, #0
    32a8:	480e      	ldr	r0, [pc, #56]	; (32e4 <SystemCoreClockUpdate+0xac>)
    32aa:	e7e7      	b.n	327c <SystemCoreClockUpdate+0x44>
                          ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
    32ac:	f44f 407a 	mov.w	r0, #64000	; 0xfa00
    32b0:	e7e4      	b.n	327c <SystemCoreClockUpdate+0x44>
      case 0:                                /* Int. RC oscillator => PLL0    */
      case 3:                                /* Reserved, default to Int. RC  */
        SystemCoreClock = IRC_OSC / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
        break;
      case 1:                                /* Main oscillator => PLL0       */
        SystemCoreClock = OSC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    32b2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    32b6:	2a01      	cmp	r2, #1
        SystemCoreClock = OSC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    32b8:	b2db      	uxtb	r3, r3
    32ba:	f103 0301 	add.w	r3, r3, #1
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    32be:	d006      	beq.n	32ce <SystemCoreClockUpdate+0x96>
    32c0:	2a02      	cmp	r2, #2
    32c2:	d006      	beq.n	32d2 <SystemCoreClockUpdate+0x9a>
        SystemCoreClock = IRC_OSC / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    32c4:	4a08      	ldr	r2, [pc, #32]	; (32e8 <SystemCoreClockUpdate+0xb0>)
        break;
      case 2:                                /* RTC oscillator => PLL0        */
        SystemCoreClock = RTC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    32c6:	fbb2 f3f3 	udiv	r3, r2, r3
    32ca:	6023      	str	r3, [r4, #0]
    32cc:	bd38      	pop	{r3, r4, r5, pc}
        SystemCoreClock = OSC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    32ce:	4a07      	ldr	r2, [pc, #28]	; (32ec <SystemCoreClockUpdate+0xb4>)
    32d0:	e7f9      	b.n	32c6 <SystemCoreClockUpdate+0x8e>
        SystemCoreClock = RTC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    32d2:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
    32d6:	e7f6      	b.n	32c6 <SystemCoreClockUpdate+0x8e>
    32d8:	400fc000 	.word	0x400fc000
    32dc:	100000d8 	.word	0x100000d8
    32e0:	007a1200 	.word	0x007a1200
    32e4:	016e3600 	.word	0x016e3600
    32e8:	003d0900 	.word	0x003d0900
    32ec:	00b71b00 	.word	0x00b71b00

000032f0 <SystemInit>:
*                                                                              *
*******************************************************************************/
void SystemInit (void)
{
#if (CLOCK_SETUP)                       /* Clock Setup                        */
  LPC_SC->SCS       = SCS_Val;
    32f0:	2220      	movs	r2, #32
    32f2:	4b33      	ldr	r3, [pc, #204]	; (33c0 <SystemInit+0xd0>)
    32f4:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
  if (SCS_Val & (1 << 5)) {             /* If Main Oscillator is enabled      */
    while ((LPC_SC->SCS & (1<<6)) == 0);/* Wait for Oscillator to be ready    */
    32f8:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
    32fc:	0652      	lsls	r2, r2, #25
    32fe:	d5fb      	bpl.n	32f8 <SystemInit+0x8>
  }

  LPC_SC->CCLKCFG   = CCLKCFG_Val;      /* Setup Clock Divider                */
    3300:	2203      	movs	r2, #3
    3302:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

  LPC_SC->PCLKSEL0  = PCLKSEL0_Val;     /* Peripheral Clock Selection         */
    3306:	2200      	movs	r2, #0
  LPC_SC->PCLKSEL1  = PCLKSEL1_Val;

  LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */
    3308:	2001      	movs	r0, #1
  LPC_SC->PCLKSEL0  = PCLKSEL0_Val;     /* Peripheral Clock Selection         */
    330a:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
  LPC_SC->PCLKSEL1  = PCLKSEL1_Val;
    330e:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

#if (PLL0_SETUP)
  LPC_SC->PLL0CFG   = PLL0CFG_Val;      /* configure PLL0                     */
    3312:	4a2c      	ldr	r2, [pc, #176]	; (33c4 <SystemInit+0xd4>)
  LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */
    3314:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
  LPC_SC->PLL0FEED  = 0xAA;
    3318:	21aa      	movs	r1, #170	; 0xaa
  LPC_SC->PLL0CFG   = PLL0CFG_Val;      /* configure PLL0                     */
    331a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  LPC_SC->PLL0FEED  = 0x55;
    331e:	2255      	movs	r2, #85	; 0x55
  LPC_SC->PLL0FEED  = 0xAA;
    3320:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
  LPC_SC->PLL0FEED  = 0x55;
    3324:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  LPC_SC->PLL0CON   = 0x01;             /* PLL0 Enable                        */
    3328:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
  LPC_SC->PLL0FEED  = 0xAA;
    332c:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
  LPC_SC->PLL0FEED  = 0x55;
    3330:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  while (!(LPC_SC->PLL0STAT & (1<<26)));/* Wait for PLOCK0                    */
    3334:	4a22      	ldr	r2, [pc, #136]	; (33c0 <SystemInit+0xd0>)
    3336:	4613      	mov	r3, r2
    3338:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
    333c:	0148      	lsls	r0, r1, #5
    333e:	d5fb      	bpl.n	3338 <SystemInit+0x48>

  LPC_SC->PLL0CON   = 0x03;             /* PLL0 Enable & Connect              */
    3340:	2103      	movs	r1, #3
    3342:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
  LPC_SC->PLL0FEED  = 0xAA;
    3346:	21aa      	movs	r1, #170	; 0xaa
    3348:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  LPC_SC->PLL0FEED  = 0x55;
    334c:	2155      	movs	r1, #85	; 0x55
    334e:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  while (!(LPC_SC->PLL0STAT & ((1<<25) | (1<<24))));/* Wait for PLLC0_STAT & PLLE0_STAT */
    3352:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    3356:	f012 7f40 	tst.w	r2, #50331648	; 0x3000000
    335a:	d0fa      	beq.n	3352 <SystemInit+0x62>
#endif

#if (PLL1_SETUP)
  LPC_SC->PLL1CFG   = PLL1CFG_Val;
    335c:	2223      	movs	r2, #35	; 0x23
  LPC_SC->PLL1FEED  = 0xAA;
    335e:	21aa      	movs	r1, #170	; 0xaa
  LPC_SC->PLL1CFG   = PLL1CFG_Val;
    3360:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  LPC_SC->PLL1FEED  = 0x55;

  LPC_SC->PLL1CON   = 0x01;             /* PLL1 Enable                        */
    3364:	2001      	movs	r0, #1
  LPC_SC->PLL1FEED  = 0x55;
    3366:	2255      	movs	r2, #85	; 0x55
  LPC_SC->PLL1FEED  = 0xAA;
    3368:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
  LPC_SC->PLL1FEED  = 0x55;
    336c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  LPC_SC->PLL1CON   = 0x01;             /* PLL1 Enable                        */
    3370:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
  LPC_SC->PLL1FEED  = 0xAA;
    3374:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
  LPC_SC->PLL1FEED  = 0x55;
    3378:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  while (!(LPC_SC->PLL1STAT & (1<<10)));/* Wait for PLOCK1                    */
    337c:	4a10      	ldr	r2, [pc, #64]	; (33c0 <SystemInit+0xd0>)
    337e:	4613      	mov	r3, r2
    3380:	f8d2 10a8 	ldr.w	r1, [r2, #168]	; 0xa8
    3384:	0549      	lsls	r1, r1, #21
    3386:	d5fb      	bpl.n	3380 <SystemInit+0x90>

  LPC_SC->PLL1CON   = 0x03;             /* PLL1 Enable & Connect              */
    3388:	2103      	movs	r1, #3
    338a:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
  LPC_SC->PLL1FEED  = 0xAA;
    338e:	21aa      	movs	r1, #170	; 0xaa
    3390:	f8c2 10ac 	str.w	r1, [r2, #172]	; 0xac
  LPC_SC->PLL1FEED  = 0x55;
    3394:	2155      	movs	r1, #85	; 0x55
    3396:	f8c2 10ac 	str.w	r1, [r2, #172]	; 0xac
  while (!(LPC_SC->PLL1STAT & ((1<< 9) | (1<< 8))));/* Wait for PLLC1_STAT & PLLE1_STAT */
    339a:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
    339e:	f412 7f40 	tst.w	r2, #768	; 0x300
    33a2:	d0fa      	beq.n	339a <SystemInit+0xaa>
#else
  LPC_SC->USBCLKCFG = USBCLKCFG_Val;    /* Setup USB Clock Divider            */
#endif

  LPC_SC->PCONP     = PCONP_Val;        /* Power Control for Peripherals      */
    33a4:	4a08      	ldr	r2, [pc, #32]	; (33c8 <SystemInit+0xd8>)
    33a6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

  LPC_SC->CLKOUTCFG = CLKOUTCFG_Val;    /* Clock Output Configuration         */
    33aa:	2200      	movs	r2, #0
    33ac:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
#endif

#if (FLASH_SETUP == 1)                  /* Flash Accelerator Setup            */
  LPC_SC->FLASHCFG  = (LPC_SC->FLASHCFG & ~0x0000F000) | FLASHCFG_Val;
    33b0:	681a      	ldr	r2, [r3, #0]
    33b2:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
    33b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    33ba:	601a      	str	r2, [r3, #0]
    33bc:	4770      	bx	lr
    33be:	bf00      	nop
    33c0:	400fc000 	.word	0x400fc000
    33c4:	00050063 	.word	0x00050063
    33c8:	042887de 	.word	0x042887de

000033cc <UART_Send.part.0>:
 * @return 		Number of bytes sent.
 *
 * Note: when using UART in BLOCKING mode, a time-out condition is used
 * via defined symbol UART_BLOCKING_TIMEOUT.
 **********************************************************************/
uint32_t UART_Send(LPC_UART_TypeDef *UARTx, uint8_t *txbuf,
    33cc:	b5f0      	push	{r4, r5, r6, r7, lr}
			while (!(UARTx->LSR & UART_LSR_THRE)) {
				if (timeOut == 0) break;
				timeOut--;
			}
			// Time out!
			if(timeOut == 0) break;
    33ce:	2400      	movs	r4, #0
		while (bToSend){
    33d0:	b1aa      	cbz	r2, 33fe <UART_Send.part.0+0x32>
    33d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    33d6:	e001      	b.n	33dc <UART_Send.part.0+0x10>
				if (timeOut == 0) break;
    33d8:	b18b      	cbz	r3, 33fe <UART_Send.part.0+0x32>
				timeOut--;
    33da:	3b01      	subs	r3, #1
			while (!(UARTx->LSR & UART_LSR_THRE)) {
    33dc:	7d06      	ldrb	r6, [r0, #20]
    33de:	06b6      	lsls	r6, r6, #26
    33e0:	d5fa      	bpl.n	33d8 <UART_Send.part.0+0xc>
			if(timeOut == 0) break;
    33e2:	b163      	cbz	r3, 33fe <UART_Send.part.0+0x32>
    33e4:	f101 0610 	add.w	r6, r1, #16
    33e8:	1a67      	subs	r7, r4, r1
			fifo_cnt = UART_TX_FIFO_SIZE;
			while (fifo_cnt && bToSend){
				UART_SendByte(UARTx, (*pChar++));
    33ea:	f811 3b01 	ldrb.w	r3, [r1], #1
				fifo_cnt--;
				bToSend--;
    33ee:	3a01      	subs	r2, #1
			while (fifo_cnt && bToSend){
    33f0:	42b1      	cmp	r1, r6
		((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/THR = Data & UART_THR_MASKBIT;
    33f2:	7003      	strb	r3, [r0, #0]
    33f4:	eb01 0407 	add.w	r4, r1, r7
			while (fifo_cnt && bToSend){
    33f8:	d0ea      	beq.n	33d0 <UART_Send.part.0+0x4>
    33fa:	2a00      	cmp	r2, #0
    33fc:	d1f5      	bne.n	33ea <UART_Send.part.0+0x1e>
				bSent++;
			}
		}
	}
	return bSent;
}
    33fe:	4620      	mov	r0, r4
    3400:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003402 <UART_Init>:
{
    3402:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if(UARTx == (LPC_UART_TypeDef *)LPC_UART0)
    3406:	4b9e      	ldr	r3, [pc, #632]	; (3680 <UART_Init+0x27e>)
{
    3408:	b08b      	sub	sp, #44	; 0x2c
	if(UARTx == (LPC_UART_TypeDef *)LPC_UART0)
    340a:	4298      	cmp	r0, r3
{
    340c:	4604      	mov	r4, r0
    340e:	468b      	mov	fp, r1
	if(UARTx == (LPC_UART_TypeDef *)LPC_UART0)
    3410:	d11e      	bne.n	3450 <UART_Init+0x4e>
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART0, ENABLE);
    3412:	2101      	movs	r1, #1
    3414:	2008      	movs	r0, #8
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART3, ENABLE);
    3416:	f000 fb4b 	bl	3ab0 <CLKPWR_ConfigPPWR>
		UARTx->/*IIFCR.*/FCR = ( UART_FCR_FIFO_EN | UART_FCR_RX_RS | UART_FCR_TX_RS);
    341a:	2307      	movs	r3, #7
    341c:	7223      	strb	r3, [r4, #8]
		UARTx->/*IIFCR.*/FCR = 0;
    341e:	2300      	movs	r3, #0
    3420:	7223      	strb	r3, [r4, #8]
		while (UARTx->LSR & UART_LSR_RDR)
    3422:	7d23      	ldrb	r3, [r4, #20]
    3424:	07da      	lsls	r2, r3, #31
    3426:	f100 80df 	bmi.w	35e8 <UART_Init+0x1e6>
		UARTx->TER = UART_TER_TXEN;
    342a:	2380      	movs	r3, #128	; 0x80
    342c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		while (!(UARTx->LSR & UART_LSR_THRE));
    3430:	7d23      	ldrb	r3, [r4, #20]
    3432:	069b      	lsls	r3, r3, #26
    3434:	d5fc      	bpl.n	3430 <UART_Init+0x2e>
		UARTx->TER = 0;
    3436:	2300      	movs	r3, #0
    3438:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		UARTx->/*DLIER.*/IER = 0;
    343c:	6063      	str	r3, [r4, #4]
		UARTx->LCR = 0;
    343e:	7323      	strb	r3, [r4, #12]
		UARTx->ACR = 0;
    3440:	6223      	str	r3, [r4, #32]
		tmp = UARTx->LSR;
    3442:	7d22      	ldrb	r2, [r4, #20]
	if (UARTx == LPC_UART3)
    3444:	4a8f      	ldr	r2, [pc, #572]	; (3684 <UART_Init+0x282>)
    3446:	4294      	cmp	r4, r2
		UARTx->ICR = 0;
    3448:	bf08      	it	eq
    344a:	f884 3024 	strbeq.w	r3, [r4, #36]	; 0x24
    344e:	e026      	b.n	349e <UART_Init+0x9c>
	if(((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    3450:	4b8d      	ldr	r3, [pc, #564]	; (3688 <UART_Init+0x286>)
    3452:	4298      	cmp	r0, r3
    3454:	f040 80bf 	bne.w	35d6 <UART_Init+0x1d4>
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART1, ENABLE);
    3458:	2101      	movs	r1, #1
    345a:	2010      	movs	r0, #16
    345c:	f000 fb28 	bl	3ab0 <CLKPWR_ConfigPPWR>
		((LPC_UART1_TypeDef *)UARTx)->/*IIFCR.*/FCR = ( UART_FCR_FIFO_EN \
    3460:	2307      	movs	r3, #7
    3462:	7223      	strb	r3, [r4, #8]
		((LPC_UART1_TypeDef *)UARTx)->/*IIFCR.*/FCR = 0;
    3464:	2300      	movs	r3, #0
		while (((LPC_UART1_TypeDef *)UARTx)->LSR & UART_LSR_RDR)
    3466:	4622      	mov	r2, r4
		((LPC_UART1_TypeDef *)UARTx)->/*IIFCR.*/FCR = 0;
    3468:	7223      	strb	r3, [r4, #8]
    346a:	4623      	mov	r3, r4
		while (((LPC_UART1_TypeDef *)UARTx)->LSR & UART_LSR_RDR)
    346c:	7d11      	ldrb	r1, [r2, #20]
    346e:	07c8      	lsls	r0, r1, #31
    3470:	f100 80b8 	bmi.w	35e4 <UART_Init+0x1e2>
		((LPC_UART1_TypeDef *)UARTx)->TER = UART_TER_TXEN;
    3474:	2180      	movs	r1, #128	; 0x80
    3476:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
		while (!(((LPC_UART1_TypeDef *)UARTx)->LSR & UART_LSR_THRE));
    347a:	7d1a      	ldrb	r2, [r3, #20]
    347c:	0691      	lsls	r1, r2, #26
    347e:	d5fc      	bpl.n	347a <UART_Init+0x78>
		((LPC_UART1_TypeDef *)UARTx)->TER = 0;
    3480:	2200      	movs	r2, #0
    3482:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/IER = 0;
    3486:	605a      	str	r2, [r3, #4]
		((LPC_UART1_TypeDef *)UARTx)->LCR = 0;
    3488:	731a      	strb	r2, [r3, #12]
		((LPC_UART1_TypeDef *)UARTx)->ACR = 0;
    348a:	621a      	str	r2, [r3, #32]
		((LPC_UART1_TypeDef *)UARTx)->MCR = 0;
    348c:	741a      	strb	r2, [r3, #16]
		((LPC_UART1_TypeDef *)UARTx)->RS485CTRL = 0;
    348e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		((LPC_UART1_TypeDef *)UARTx)->RS485DLY = 0;
    3492:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		((LPC_UART1_TypeDef *)UARTx)->ADRMATCH = 0;
    3496:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		tmp = ((LPC_UART1_TypeDef *)UARTx)->MSR;
    349a:	7e1a      	ldrb	r2, [r3, #24]
		tmp = ((LPC_UART1_TypeDef *)UARTx)->LSR;
    349c:	7d1b      	ldrb	r3, [r3, #20]
	if (UARTx == (LPC_UART_TypeDef *)LPC_UART0)
    349e:	4b78      	ldr	r3, [pc, #480]	; (3680 <UART_Init+0x27e>)
	uart_set_divisors(UARTx, (UART_ConfigStruct->Baud_rate));
    34a0:	f8db 7000 	ldr.w	r7, [fp]
	if (UARTx == (LPC_UART_TypeDef *)LPC_UART0)
    34a4:	429c      	cmp	r4, r3
    34a6:	f040 80a1 	bne.w	35ec <UART_Init+0x1ea>
		uClk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_UART0);
    34aa:	2006      	movs	r0, #6
		uClk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_UART3);
    34ac:	f000 faec 	bl	3a88 <CLKPWR_GetPCLK>
    34b0:	4606      	mov	r6, r0
		  divisor = ((uint64_t)uClk<<28)*m/(baudrate*(m+d));
    34b2:	0933      	lsrs	r3, r6, #4
    34b4:	9303      	str	r3, [sp, #12]
    34b6:	0733      	lsls	r3, r6, #28
    34b8:	9302      	str	r3, [sp, #8]
    34ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    34be:	e9cd 2304 	strd	r2, r3, [sp, #16]
	best_error = 0xFFFFFFFF; /* Worst case */
    34c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	bestm = 0;
    34c6:	2500      	movs	r5, #0
	best_error = 0xFFFFFFFF; /* Worst case */
    34c8:	9309      	str	r3, [sp, #36]	; 0x24
	best_divisor = 0;
    34ca:	2200      	movs	r2, #0
    34cc:	2300      	movs	r3, #0
	bestd = 0;
    34ce:	46a8      	mov	r8, r5
	for (m = 1 ; m <= 15 ;m++)
    34d0:	f04f 0a01 	mov.w	sl, #1
	best_divisor = 0;
    34d4:	e9cd 2300 	strd	r2, r3, [sp]
	uart_set_divisors(UARTx, (UART_ConfigStruct->Baud_rate));
    34d8:	9707      	str	r7, [sp, #28]
	uint32_t uClk = 0;
    34da:	f04f 0900 	mov.w	r9, #0
    34de:	9b07      	ldr	r3, [sp, #28]
    34e0:	9308      	str	r3, [sp, #32]
		  divisor = ((uint64_t)uClk<<28)*m/(baudrate*(m+d));
    34e2:	9a08      	ldr	r2, [sp, #32]
    34e4:	2300      	movs	r3, #0
    34e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    34ea:	f001 ff07 	bl	52fc <__aeabi_uldivmod>
		  tmp = divisor>>32;
    34ee:	460a      	mov	r2, r1
		  if(current_error > ((uint32_t)1<<31)){
    34f0:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
			tmp++;
    34f4:	bf88      	it	hi
    34f6:	1c4a      	addhi	r2, r1, #1
		  if(tmp<1 || tmp>65536) /* Out of range */
    34f8:	f102 31ff 	add.w	r1, r2, #4294967295	; 0xffffffff
		  current_error = divisor & 0xFFFFFFFF;
    34fc:	4603      	mov	r3, r0
			current_error = -current_error;
    34fe:	bf88      	it	hi
    3500:	4243      	neghi	r3, r0
		  if(tmp<1 || tmp>65536) /* Out of range */
    3502:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
    3506:	d20b      	bcs.n	3520 <UART_Init+0x11e>
		  if( current_error < best_error){
    3508:	9909      	ldr	r1, [sp, #36]	; 0x24
    350a:	428b      	cmp	r3, r1
    350c:	d208      	bcs.n	3520 <UART_Init+0x11e>
			best_divisor = tmp;
    350e:	4610      	mov	r0, r2
    3510:	2100      	movs	r1, #0
    3512:	e9cd 0100 	strd	r0, r1, [sp]
			if(best_error == 0) break;
    3516:	2b00      	cmp	r3, #0
    3518:	d079      	beq.n	360e <UART_Init+0x20c>
    351a:	4655      	mov	r5, sl
    351c:	46c8      	mov	r8, r9
    351e:	9309      	str	r3, [sp, #36]	; 0x24
    3520:	9b08      	ldr	r3, [sp, #32]
		for (d = 0 ; d < m ; d++)
    3522:	f109 0901 	add.w	r9, r9, #1
    3526:	443b      	add	r3, r7
    3528:	45d1      	cmp	r9, sl
    352a:	9308      	str	r3, [sp, #32]
    352c:	d1d9      	bne.n	34e2 <UART_Init+0xe0>
    352e:	9b07      	ldr	r3, [sp, #28]
    3530:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    3534:	443b      	add	r3, r7
	for (m = 1 ; m <= 15 ;m++)
    3536:	f109 0a01 	add.w	sl, r9, #1
    353a:	9307      	str	r3, [sp, #28]
    353c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    3540:	1812      	adds	r2, r2, r0
    3542:	414b      	adcs	r3, r1
    3544:	f1ba 0f10 	cmp.w	sl, #16
    3548:	e9cd 2304 	strd	r2, r3, [sp, #16]
    354c:	d1c5      	bne.n	34da <UART_Init+0xd8>
	if(best_divisor == 0) return ERROR; /* can not find best match */
    354e:	e9dd 2300 	ldrd	r2, r3, [sp]
    3552:	4313      	orrs	r3, r2
    3554:	d065      	beq.n	3622 <UART_Init+0x220>
	recalcbaud = (uClk>>4) * bestm/(best_divisor * (bestm + bestd));
    3556:	9b00      	ldr	r3, [sp, #0]
    3558:	eb08 0105 	add.w	r1, r8, r5
    355c:	fba1 2303 	umull	r2, r3, r1, r3
    3560:	0930      	lsrs	r0, r6, #4
    3562:	9e01      	ldr	r6, [sp, #4]
    3564:	4368      	muls	r0, r5
    3566:	fb01 3306 	mla	r3, r1, r6, r3
    356a:	2100      	movs	r1, #0
    356c:	f001 fec6 	bl	52fc <__aeabi_uldivmod>
	best_error = best_error * 100 / baudrate;
    3570:	2364      	movs	r3, #100	; 0x64
	if(baudrate>recalcbaud) best_error = baudrate - recalcbaud;
    3572:	4287      	cmp	r7, r0
    3574:	bf8c      	ite	hi
    3576:	1a38      	subhi	r0, r7, r0
	else best_error = recalcbaud -baudrate;
    3578:	1bc0      	subls	r0, r0, r7
	best_error = best_error * 100 / baudrate;
    357a:	4358      	muls	r0, r3
    357c:	fbb0 f7f7 	udiv	r7, r0, r7
	if (best_error < UART_ACCEPTED_BAUDRATE_ERROR)
    3580:	2f02      	cmp	r7, #2
    3582:	d84e      	bhi.n	3622 <UART_Init+0x220>
			if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    3584:	4b40      	ldr	r3, [pc, #256]	; (3688 <UART_Init+0x286>)
				((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_DLAB_EN;
    3586:	7b22      	ldrb	r2, [r4, #12]
			if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    3588:	429c      	cmp	r4, r3
    358a:	9b00      	ldr	r3, [sp, #0]
    358c:	f89d 1000 	ldrb.w	r1, [sp]
    3590:	ea4f 2313 	mov.w	r3, r3, lsr #8
				((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/DLM = UART_LOAD_DLM(best_divisor);
    3594:	b2db      	uxtb	r3, r3
				((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_DLAB_EN;
    3596:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    359a:	7322      	strb	r2, [r4, #12]
				((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/DLM = UART_LOAD_DLM(best_divisor);
    359c:	7123      	strb	r3, [r4, #4]
				((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/DLL = UART_LOAD_DLL(best_divisor);
    359e:	7021      	strb	r1, [r4, #0]
				((LPC_UART1_TypeDef *)UARTx)->LCR &= (~UART_LCR_DLAB_EN) & UART_LCR_BITMASK;
    35a0:	7b23      	ldrb	r3, [r4, #12]
    35a2:	ea4f 1505 	mov.w	r5, r5, lsl #4
    35a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    35aa:	f008 080f 	and.w	r8, r8, #15
    35ae:	7323      	strb	r3, [r4, #12]
			if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    35b0:	d130      	bne.n	3614 <UART_Init+0x212>
				((LPC_UART1_TypeDef *)UARTx)->FDR = (UART_FDR_MULVAL(bestm) \
    35b2:	b2ed      	uxtb	r5, r5
						| UART_FDR_DIVADDVAL(bestd)) & UART_FDR_BITMASK;
    35b4:	ea45 0508 	orr.w	r5, r5, r8
				((LPC_UART1_TypeDef *)UARTx)->FDR = (UART_FDR_MULVAL(bestm) \
    35b8:	62a5      	str	r5, [r4, #40]	; 0x28
		tmp = (((LPC_UART1_TypeDef *)UARTx)->LCR & (UART_LCR_DLAB_EN | UART_LCR_BREAK_EN)) \
    35ba:	4b33      	ldr	r3, [pc, #204]	; (3688 <UART_Init+0x286>)
    35bc:	7b1b      	ldrb	r3, [r3, #12]
	switch (UART_ConfigStruct->Databits){
    35be:	f89b 2005 	ldrb.w	r2, [fp, #5]
		tmp = (UARTx->LCR & (UART_LCR_DLAB_EN | UART_LCR_BREAK_EN)) & UART_LCR_BITMASK;
    35c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	switch (UART_ConfigStruct->Databits){
    35c6:	2a01      	cmp	r2, #1
    35c8:	d02f      	beq.n	362a <UART_Init+0x228>
    35ca:	d330      	bcc.n	362e <UART_Init+0x22c>
    35cc:	2a02      	cmp	r2, #2
    35ce:	d046      	beq.n	365e <UART_Init+0x25c>
		tmp |= UART_LCR_WLEN8;
    35d0:	f043 0303 	orr.w	r3, r3, #3
		break;
    35d4:	e02b      	b.n	362e <UART_Init+0x22c>
	if(UARTx == LPC_UART2)
    35d6:	4b2d      	ldr	r3, [pc, #180]	; (368c <UART_Init+0x28a>)
    35d8:	4298      	cmp	r0, r3
    35da:	d149      	bne.n	3670 <UART_Init+0x26e>
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART2, ENABLE);
    35dc:	2101      	movs	r1, #1
    35de:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    35e2:	e718      	b.n	3416 <UART_Init+0x14>
			tmp = ((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/RBR;
    35e4:	7811      	ldrb	r1, [r2, #0]
    35e6:	e741      	b.n	346c <UART_Init+0x6a>
			tmp = UARTx->/*RBTHDLR.*/RBR;
    35e8:	7823      	ldrb	r3, [r4, #0]
    35ea:	e71a      	b.n	3422 <UART_Init+0x20>
	else if (UARTx == (LPC_UART_TypeDef *)LPC_UART1)
    35ec:	4b26      	ldr	r3, [pc, #152]	; (3688 <UART_Init+0x286>)
    35ee:	429c      	cmp	r4, r3
    35f0:	d101      	bne.n	35f6 <UART_Init+0x1f4>
		uClk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_UART1);
    35f2:	2008      	movs	r0, #8
    35f4:	e75a      	b.n	34ac <UART_Init+0xaa>
	else if (UARTx == LPC_UART2)
    35f6:	4b25      	ldr	r3, [pc, #148]	; (368c <UART_Init+0x28a>)
    35f8:	429c      	cmp	r4, r3
    35fa:	d101      	bne.n	3600 <UART_Init+0x1fe>
		uClk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_UART2);
    35fc:	2030      	movs	r0, #48	; 0x30
    35fe:	e755      	b.n	34ac <UART_Init+0xaa>
	else if (UARTx == LPC_UART3)
    3600:	4b20      	ldr	r3, [pc, #128]	; (3684 <UART_Init+0x282>)
    3602:	429c      	cmp	r4, r3
    3604:	d101      	bne.n	360a <UART_Init+0x208>
		uClk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_UART3);
    3606:	2032      	movs	r0, #50	; 0x32
    3608:	e750      	b.n	34ac <UART_Init+0xaa>
	uint32_t uClk = 0;
    360a:	2600      	movs	r6, #0
    360c:	e751      	b.n	34b2 <UART_Init+0xb0>
			if(best_error == 0) break;
    360e:	46c8      	mov	r8, r9
    3610:	4655      	mov	r5, sl
    3612:	e7a0      	b.n	3556 <UART_Init+0x154>
						| UART_FDR_DIVADDVAL(bestd)) & UART_FDR_BITMASK;
    3614:	ea45 0508 	orr.w	r5, r5, r8
    3618:	b2ed      	uxtb	r5, r5
				UARTx->FDR = (UART_FDR_MULVAL(bestm) \
    361a:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
		tmp = (UARTx->LCR & (UART_LCR_DLAB_EN | UART_LCR_BREAK_EN)) & UART_LCR_BITMASK;
    361e:	7b23      	ldrb	r3, [r4, #12]
    3620:	e7cd      	b.n	35be <UART_Init+0x1bc>
	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    3622:	4b19      	ldr	r3, [pc, #100]	; (3688 <UART_Init+0x286>)
    3624:	429c      	cmp	r4, r3
    3626:	d1fa      	bne.n	361e <UART_Init+0x21c>
    3628:	e7c7      	b.n	35ba <UART_Init+0x1b8>
		tmp |= UART_LCR_WLEN6;
    362a:	f043 0301 	orr.w	r3, r3, #1
	if (UART_ConfigStruct->Parity == UART_PARITY_NONE)
    362e:	f89b 2004 	ldrb.w	r2, [fp, #4]
    3632:	b14a      	cbz	r2, 3648 <UART_Init+0x246>
		switch (UART_ConfigStruct->Parity)
    3634:	2a03      	cmp	r2, #3
    3636:	d015      	beq.n	3664 <UART_Init+0x262>
    3638:	2a04      	cmp	r2, #4
    363a:	d016      	beq.n	366a <UART_Init+0x268>
    363c:	2a02      	cmp	r2, #2
		tmp |= UART_LCR_PARITY_EN;
    363e:	bf14      	ite	ne
    3640:	f043 0308 	orrne.w	r3, r3, #8
			tmp |= UART_LCR_PARITY_EVEN;
    3644:	f043 0318 	orreq.w	r3, r3, #24
	switch (UART_ConfigStruct->Stopbits){
    3648:	f89b 2006 	ldrb.w	r2, [fp, #6]
    364c:	2a01      	cmp	r2, #1
		tmp |= UART_LCR_STOPBIT_SEL;
    364e:	bf08      	it	eq
    3650:	f043 0304 	orreq.w	r3, r3, #4
    3654:	b2db      	uxtb	r3, r3
		((LPC_UART1_TypeDef *)UARTx)->LCR = (uint8_t)(tmp & UART_LCR_BITMASK);
    3656:	7323      	strb	r3, [r4, #12]
}
    3658:	b00b      	add	sp, #44	; 0x2c
    365a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		tmp |= UART_LCR_WLEN7;
    365e:	f043 0302 	orr.w	r3, r3, #2
		break;
    3662:	e7e4      	b.n	362e <UART_Init+0x22c>
			tmp |= UART_LCR_PARITY_F_1;
    3664:	f043 0328 	orr.w	r3, r3, #40	; 0x28
			break;
    3668:	e7ee      	b.n	3648 <UART_Init+0x246>
			tmp |= UART_LCR_PARITY_F_0;
    366a:	f043 0338 	orr.w	r3, r3, #56	; 0x38
			break;
    366e:	e7eb      	b.n	3648 <UART_Init+0x246>
	if(UARTx == LPC_UART3)
    3670:	4b04      	ldr	r3, [pc, #16]	; (3684 <UART_Init+0x282>)
    3672:	4298      	cmp	r0, r3
    3674:	f47f aed1 	bne.w	341a <UART_Init+0x18>
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART3, ENABLE);
    3678:	2101      	movs	r1, #1
    367a:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    367e:	e6ca      	b.n	3416 <UART_Init+0x14>
    3680:	4000c000 	.word	0x4000c000
    3684:	4009c000 	.word	0x4009c000
    3688:	40010000 	.word	0x40010000
    368c:	40098000 	.word	0x40098000

00003690 <UART_ConfigStructInit>:
	UART_InitStruct->Baud_rate = 9600;
    3690:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    3694:	6003      	str	r3, [r0, #0]
	UART_InitStruct->Databits = UART_DATABIT_8;
    3696:	2303      	movs	r3, #3
    3698:	7143      	strb	r3, [r0, #5]
	UART_InitStruct->Parity = UART_PARITY_NONE;
    369a:	2300      	movs	r3, #0
    369c:	7103      	strb	r3, [r0, #4]
	UART_InitStruct->Stopbits = UART_STOPBIT_1;
    369e:	7183      	strb	r3, [r0, #6]
    36a0:	4770      	bx	lr

000036a2 <UART_SendByte>:
		((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/THR = Data & UART_THR_MASKBIT;
    36a2:	7001      	strb	r1, [r0, #0]
    36a4:	4770      	bx	lr

000036a6 <UART_ReceiveByte>:
		return (((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/RBR & UART_RBR_MASKBIT);
    36a6:	7800      	ldrb	r0, [r0, #0]
    36a8:	b2c0      	uxtb	r0, r0
}
    36aa:	4770      	bx	lr

000036ac <UART_Send>:
	if (flag == BLOCKING) {
    36ac:	2b01      	cmp	r3, #1
{
    36ae:	b4f0      	push	{r4, r5, r6, r7}
    36b0:	4606      	mov	r6, r0
    36b2:	460c      	mov	r4, r1
    36b4:	4615      	mov	r5, r2
	if (flag == BLOCKING) {
    36b6:	d101      	bne.n	36bc <UART_Send+0x10>
}
    36b8:	bcf0      	pop	{r4, r5, r6, r7}
    36ba:	e687      	b.n	33cc <UART_Send.part.0>
    36bc:	2000      	movs	r0, #0
		while (bToSend) {
    36be:	b17d      	cbz	r5, 36e0 <UART_Send+0x34>
			if (!(UARTx->LSR & UART_LSR_THRE)){
    36c0:	7d33      	ldrb	r3, [r6, #20]
    36c2:	069b      	lsls	r3, r3, #26
    36c4:	d50c      	bpl.n	36e0 <UART_Send+0x34>
    36c6:	f104 0110 	add.w	r1, r4, #16
    36ca:	1b07      	subs	r7, r0, r4
				UART_SendByte(UARTx, (*pChar++));
    36cc:	f814 3b01 	ldrb.w	r3, [r4], #1
				bToSend--;
    36d0:	3d01      	subs	r5, #1
			while (fifo_cnt && bToSend) {
    36d2:	42a1      	cmp	r1, r4
		((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/THR = Data & UART_THR_MASKBIT;
    36d4:	7033      	strb	r3, [r6, #0]
    36d6:	eb04 0007 	add.w	r0, r4, r7
			while (fifo_cnt && bToSend) {
    36da:	d0f0      	beq.n	36be <UART_Send+0x12>
    36dc:	2d00      	cmp	r5, #0
    36de:	d1f5      	bne.n	36cc <UART_Send+0x20>
}
    36e0:	bcf0      	pop	{r4, r5, r6, r7}
    36e2:	4770      	bx	lr

000036e4 <UART_Receive>:
	uint8_t *pChar = rxbuf;

	bToRecv = buflen;

	// Blocking mode
	if (flag == BLOCKING) {
    36e4:	2b01      	cmp	r3, #1
{
    36e6:	b570      	push	{r4, r5, r6, lr}
    36e8:	f04f 0300 	mov.w	r3, #0
	if (flag == BLOCKING) {
    36ec:	d00f      	beq.n	370e <UART_Receive+0x2a>
		}
	}
	// None blocking mode
	else {
		bRecv = 0;
		while (bToRecv) {
    36ee:	4293      	cmp	r3, r2
    36f0:	d112      	bne.n	3718 <UART_Receive+0x34>
				bToRecv--;
			}
		}
	}
	return bRecv;
}
    36f2:	4618      	mov	r0, r3
    36f4:	bd70      	pop	{r4, r5, r6, pc}
				if (timeOut == 0) break;
    36f6:	2c00      	cmp	r4, #0
    36f8:	d0fb      	beq.n	36f2 <UART_Receive+0xe>
				timeOut--;
    36fa:	3c01      	subs	r4, #1
			while (!(UARTx->LSR & UART_LSR_RDR)){
    36fc:	7d06      	ldrb	r6, [r0, #20]
    36fe:	07f5      	lsls	r5, r6, #31
    3700:	d5f9      	bpl.n	36f6 <UART_Receive+0x12>
			if(timeOut == 0) break;
    3702:	2c00      	cmp	r4, #0
    3704:	d0f5      	beq.n	36f2 <UART_Receive+0xe>
		return (((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/RBR & UART_RBR_MASKBIT);
    3706:	7804      	ldrb	r4, [r0, #0]
    3708:	b2e4      	uxtb	r4, r4
			(*pChar++) = UART_ReceiveByte(UARTx);
    370a:	54cc      	strb	r4, [r1, r3]
			bRecv++;
    370c:	3301      	adds	r3, #1
		while (bToRecv){
    370e:	4293      	cmp	r3, r2
    3710:	d0ef      	beq.n	36f2 <UART_Receive+0xe>
    3712:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    3716:	e7f1      	b.n	36fc <UART_Receive+0x18>
			if (!(UARTx->LSR & UART_LSR_RDR)) {
    3718:	7d04      	ldrb	r4, [r0, #20]
    371a:	07e4      	lsls	r4, r4, #31
    371c:	d5e9      	bpl.n	36f2 <UART_Receive+0xe>
		return (((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/RBR & UART_RBR_MASKBIT);
    371e:	7804      	ldrb	r4, [r0, #0]
    3720:	b2e4      	uxtb	r4, r4
				(*pChar++) = UART_ReceiveByte(UARTx);
    3722:	54cc      	strb	r4, [r1, r3]
				bRecv++;
    3724:	3301      	adds	r3, #1
    3726:	e7e2      	b.n	36ee <UART_Receive+0xa>

00003728 <UART_ForceBreak>:
{
	CHECK_PARAM(PARAM_UARTx(UARTx));

	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
	{
		((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_BREAK_EN;
    3728:	7b03      	ldrb	r3, [r0, #12]
    372a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    372e:	7303      	strb	r3, [r0, #12]
    3730:	4770      	bx	lr

00003732 <UART_IntConfig>:
 * 				- ENALBE: Enable this UART interrupt type.
* 				- DISALBE: Disable this UART interrupt type.
 * @return 		None
 *********************************************************************/
void UART_IntConfig(LPC_UART_TypeDef *UARTx, UART_INT_Type UARTIntCfg, FunctionalState NewState)
{
    3732:	2906      	cmp	r1, #6
    3734:	bf96      	itet	ls
    3736:	4b0c      	ldrls	r3, [pc, #48]	; (3768 <UART_IntConfig+0x36>)
    3738:	2300      	movhi	r3, #0
    373a:	f833 3011 	ldrhls.w	r3, [r3, r1, lsl #1]
	else
	{
		CHECK_PARAM(PARAM_UART_INTCFG(UARTIntCfg));
	}

	if (NewState == ENABLE)
    373e:	2a01      	cmp	r2, #1
    3740:	4a0a      	ldr	r2, [pc, #40]	; (376c <UART_IntConfig+0x3a>)
    3742:	d103      	bne.n	374c <UART_IntConfig+0x1a>
	{
		if ((LPC_UART1_TypeDef *) UARTx == LPC_UART1)
		{
			((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/IER |= tmp;
    3744:	6842      	ldr	r2, [r0, #4]
    3746:	4313      	orrs	r3, r2
    3748:	6043      	str	r3, [r0, #4]
    374a:	4770      	bx	lr
    374c:	43db      	mvns	r3, r3
			UARTx->/*DLIER.*/IER |= tmp;
		}
	}
	else
	{
		if ((LPC_UART1_TypeDef *) UARTx == LPC_UART1)
    374e:	4290      	cmp	r0, r2
		{
			((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/IER &= (~tmp) & UART1_IER_BITMASK;
    3750:	6842      	ldr	r2, [r0, #4]
    3752:	bf0c      	ite	eq
    3754:	f022 0270 	biceq.w	r2, r2, #112	; 0x70
		}
		else
		{
			UARTx->/*DLIER.*/IER &= (~tmp) & UART_IER_BITMASK;
    3758:	f022 02f8 	bicne.w	r2, r2, #248	; 0xf8
    375c:	0592      	lsls	r2, r2, #22
    375e:	0d92      	lsrs	r2, r2, #22
    3760:	4013      	ands	r3, r2
    3762:	6043      	str	r3, [r0, #4]
    3764:	4770      	bx	lr
    3766:	bf00      	nop
    3768:	0000a688 	.word	0x0000a688
    376c:	40010000 	.word	0x40010000

00003770 <UART_GetLineStatus>:
{
	CHECK_PARAM(PARAM_UARTx(UARTx));

	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
	{
		return ((((LPC_UART1_TypeDef *)LPC_UART1)->LSR) & UART_LSR_BITMASK);
    3770:	7d00      	ldrb	r0, [r0, #20]
    3772:	b2c0      	uxtb	r0, r0
	}
	else
	{
		return ((UARTx->LSR) & UART_LSR_BITMASK);
	}
}
    3774:	4770      	bx	lr

00003776 <UART_GetIntId>:
 * @return		Current value of UART UIIR register in UART peripheral.
 *********************************************************************/
uint32_t UART_GetIntId(LPC_UART_TypeDef* UARTx)
{
	CHECK_PARAM(PARAM_UARTx(UARTx));
	return (UARTx->IIR & 0x03CF);
    3776:	6880      	ldr	r0, [r0, #8]
}
    3778:	f020 0030 	bic.w	r0, r0, #48	; 0x30
    377c:	0580      	lsls	r0, r0, #22
    377e:	0d80      	lsrs	r0, r0, #22
    3780:	4770      	bx	lr

00003782 <UART_CheckBusy>:
 * 				- LPC_UART3: UART3 peripheral
 * @return		RESET if UART is not busy, otherwise return SET.
 **********************************************************************/
FlagStatus UART_CheckBusy(LPC_UART_TypeDef *UARTx)
{
	if (UARTx->LSR & UART_LSR_TEMT){
    3782:	7d00      	ldrb	r0, [r0, #20]
    3784:	f080 0040 	eor.w	r0, r0, #64	; 0x40
		return RESET;
	} else {
		return SET;
	}
}
    3788:	f3c0 1080 	ubfx	r0, r0, #6, #1
    378c:	4770      	bx	lr

0000378e <UART_FIFOConfig>:
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(FIFOCfg->FIFO_DMAMode));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(FIFOCfg->FIFO_ResetRxBuf));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(FIFOCfg->FIFO_ResetTxBuf));

	tmp |= UART_FCR_FIFO_EN;
	switch (FIFOCfg->FIFO_Level){
    378e:	78ca      	ldrb	r2, [r1, #3]
    3790:	2a02      	cmp	r2, #2
    3792:	bf8e      	itee	hi
    3794:	23c1      	movhi	r3, #193	; 0xc1
    3796:	4b0c      	ldrls	r3, [pc, #48]	; (37c8 <UART_FIFOConfig+0x3a>)
    3798:	189b      	addls	r3, r3, r2
	default:
		tmp |= UART_FCR_TRG_LEV3;
		break;
	}

	if (FIFOCfg->FIFO_ResetTxBuf == ENABLE)
    379a:	784a      	ldrb	r2, [r1, #1]
    379c:	bf98      	it	ls
    379e:	7b9b      	ldrbls	r3, [r3, #14]
    37a0:	2a01      	cmp	r2, #1
	{
		tmp |= UART_FCR_TX_RS;
	}
	if (FIFOCfg->FIFO_ResetRxBuf == ENABLE)
    37a2:	780a      	ldrb	r2, [r1, #0]
		tmp |= UART_FCR_TX_RS;
    37a4:	bf08      	it	eq
    37a6:	f043 0304 	orreq.w	r3, r3, #4
	if (FIFOCfg->FIFO_ResetRxBuf == ENABLE)
    37aa:	2a01      	cmp	r2, #1
	{
		tmp |= UART_FCR_RX_RS;
	}
	if (FIFOCfg->FIFO_DMAMode == ENABLE)
    37ac:	788a      	ldrb	r2, [r1, #2]
		tmp |= UART_FCR_RX_RS;
    37ae:	bf08      	it	eq
    37b0:	f043 0302 	orreq.w	r3, r3, #2
	if (FIFOCfg->FIFO_DMAMode == ENABLE)
    37b4:	2a01      	cmp	r2, #1
	{
		tmp |= UART_FCR_DMAMODE_SEL;
    37b6:	bf08      	it	eq
    37b8:	f043 0308 	orreq.w	r3, r3, #8
    37bc:	f023 0330 	bic.w	r3, r3, #48	; 0x30


	//write to FIFO control register
	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
	{
		((LPC_UART1_TypeDef *)UARTx)->/*IIFCR.*/FCR = tmp & UART_FCR_BITMASK;
    37c0:	b2db      	uxtb	r3, r3
    37c2:	7203      	strb	r3, [r0, #8]
    37c4:	4770      	bx	lr
    37c6:	bf00      	nop
    37c8:	0000a688 	.word	0x0000a688

000037cc <UART_FIFOConfigStructInit>:
*                    which will be initialized.
* @return		None
*******************************************************************************/
void UART_FIFOConfigStructInit(UART_FIFO_CFG_Type *UART_FIFOInitStruct)
{
	UART_FIFOInitStruct->FIFO_DMAMode = DISABLE;
    37cc:	2300      	movs	r3, #0
    37ce:	7083      	strb	r3, [r0, #2]
	UART_FIFOInitStruct->FIFO_Level = UART_FIFO_TRGLEV0;
    37d0:	70c3      	strb	r3, [r0, #3]
	UART_FIFOInitStruct->FIFO_ResetRxBuf = ENABLE;
    37d2:	2301      	movs	r3, #1
    37d4:	7003      	strb	r3, [r0, #0]
	UART_FIFOInitStruct->FIFO_ResetTxBuf = ENABLE;
    37d6:	7043      	strb	r3, [r0, #1]
    37d8:	4770      	bx	lr

000037da <UART_ABCmd>:

	CHECK_PARAM(PARAM_UARTx(UARTx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	tmp = 0;
	if (NewState == ENABLE) {
    37da:	2a01      	cmp	r2, #1
    37dc:	f04f 0300 	mov.w	r3, #0
    37e0:	d11b      	bne.n	381a <UART_ABCmd+0x40>
		if (ABConfigStruct->ABMode == UART_AUTOBAUD_MODE1){
    37e2:	780b      	ldrb	r3, [r1, #0]
			tmp |= UART_ACR_MODE;
		}
		if (ABConfigStruct->AutoRestart == ENABLE){
    37e4:	784a      	ldrb	r2, [r1, #1]
		if (ABConfigStruct->ABMode == UART_AUTOBAUD_MODE1){
    37e6:	2b01      	cmp	r3, #1
	tmp = 0;
    37e8:	bf0c      	ite	eq
    37ea:	2302      	moveq	r3, #2
    37ec:	2300      	movne	r3, #0
		if (ABConfigStruct->AutoRestart == ENABLE){
    37ee:	2a01      	cmp	r2, #1
    37f0:	d101      	bne.n	37f6 <UART_ABCmd+0x1c>
			tmp |= UART_ACR_AUTO_RESTART;
    37f2:	f043 0304 	orr.w	r3, r3, #4
		}
	}

	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    37f6:	4a11      	ldr	r2, [pc, #68]	; (383c <UART_ABCmd+0x62>)
    37f8:	f043 0301 	orr.w	r3, r3, #1
    37fc:	4290      	cmp	r0, r2
    37fe:	d10e      	bne.n	381e <UART_ABCmd+0x44>
	{
		if (NewState == ENABLE)
		{
			// Clear DLL and DLM value
			((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_DLAB_EN;
    3800:	7b02      	ldrb	r2, [r0, #12]
    3802:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    3806:	7302      	strb	r2, [r0, #12]
			((LPC_UART1_TypeDef *)UARTx)->DLL = 0;
    3808:	2200      	movs	r2, #0
    380a:	7002      	strb	r2, [r0, #0]
			((LPC_UART1_TypeDef *)UARTx)->DLM = 0;
    380c:	7102      	strb	r2, [r0, #4]
			((LPC_UART1_TypeDef *)UARTx)->LCR &= ~UART_LCR_DLAB_EN;
    380e:	7b02      	ldrb	r2, [r0, #12]
    3810:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    3814:	7302      	strb	r2, [r0, #12]
			// FDR value must be reset to default value
			((LPC_UART1_TypeDef *)UARTx)->FDR = 0x10;
    3816:	2210      	movs	r2, #16
    3818:	6282      	str	r2, [r0, #40]	; 0x28
			UARTx->FDR = 0x10;
			UARTx->ACR = UART_ACR_START | tmp;
		}
		else
		{
			UARTx->ACR = 0;
    381a:	6203      	str	r3, [r0, #32]
		}
	}
}
    381c:	4770      	bx	lr
			UARTx->LCR |= UART_LCR_DLAB_EN;
    381e:	7b02      	ldrb	r2, [r0, #12]
    3820:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    3824:	7302      	strb	r2, [r0, #12]
			UARTx->DLL = 0;
    3826:	2200      	movs	r2, #0
    3828:	7002      	strb	r2, [r0, #0]
			UARTx->DLM = 0;
    382a:	7102      	strb	r2, [r0, #4]
			UARTx->LCR &= ~UART_LCR_DLAB_EN;
    382c:	7b02      	ldrb	r2, [r0, #12]
    382e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    3832:	7302      	strb	r2, [r0, #12]
			UARTx->FDR = 0x10;
    3834:	2210      	movs	r2, #16
    3836:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
    383a:	e7ee      	b.n	381a <UART_ABCmd+0x40>
    383c:	40010000 	.word	0x40010000

00003840 <UART_ABClearIntPending>:
void UART_ABClearIntPending(LPC_UART_TypeDef *UARTx, UART_ABEO_Type ABIntType)
{
	CHECK_PARAM(PARAM_UARTx(UARTx));
	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
	{
		UARTx->ACR |= ABIntType;
    3840:	6a03      	ldr	r3, [r0, #32]
    3842:	4319      	orrs	r1, r3
    3844:	6201      	str	r1, [r0, #32]
    3846:	4770      	bx	lr

00003848 <UART_TxCmd>:
void UART_TxCmd(LPC_UART_TypeDef *UARTx, FunctionalState NewState)
{
	CHECK_PARAM(PARAM_UARTx(UARTx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
    3848:	2901      	cmp	r1, #1
    384a:	d106      	bne.n	385a <UART_TxCmd+0x12>
	{
		if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
		{
			((LPC_UART1_TypeDef *)UARTx)->TER |= UART_TER_TXEN;
    384c:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
    3850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    3854:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
    3858:	4770      	bx	lr
    385a:	2300      	movs	r3, #0
	}
	else
	{
		if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
		{
			((LPC_UART1_TypeDef *)UARTx)->TER &= (~UART_TER_TXEN) & UART_TER_BITMASK;
    385c:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
    3860:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
    3864:	4770      	bx	lr

00003866 <UART_DeInit>:
{
    3866:	b510      	push	{r4, lr}
	UART_TxCmd(UARTx, DISABLE);
    3868:	2100      	movs	r1, #0
    386a:	f7ff ffed 	bl	3848 <UART_TxCmd>
	if (UARTx == (LPC_UART_TypeDef *)LPC_UART0)
    386e:	4b0f      	ldr	r3, [pc, #60]	; (38ac <UART_DeInit+0x46>)
    3870:	4298      	cmp	r0, r3
    3872:	d105      	bne.n	3880 <UART_DeInit+0x1a>
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART0, DISABLE);
    3874:	2100      	movs	r1, #0
    3876:	2008      	movs	r0, #8
}
    3878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART3, DISABLE);
    387c:	f000 b918 	b.w	3ab0 <CLKPWR_ConfigPPWR>
	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    3880:	4b0b      	ldr	r3, [pc, #44]	; (38b0 <UART_DeInit+0x4a>)
    3882:	4298      	cmp	r0, r3
    3884:	d102      	bne.n	388c <UART_DeInit+0x26>
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART1, DISABLE);
    3886:	2100      	movs	r1, #0
    3888:	2010      	movs	r0, #16
    388a:	e7f5      	b.n	3878 <UART_DeInit+0x12>
	if (UARTx == LPC_UART2)
    388c:	4b09      	ldr	r3, [pc, #36]	; (38b4 <UART_DeInit+0x4e>)
    388e:	4298      	cmp	r0, r3
    3890:	d103      	bne.n	389a <UART_DeInit+0x34>
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART2, DISABLE);
    3892:	2100      	movs	r1, #0
    3894:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    3898:	e7ee      	b.n	3878 <UART_DeInit+0x12>
	if (UARTx == LPC_UART3)
    389a:	4b07      	ldr	r3, [pc, #28]	; (38b8 <UART_DeInit+0x52>)
    389c:	4298      	cmp	r0, r3
    389e:	d103      	bne.n	38a8 <UART_DeInit+0x42>
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART3, DISABLE);
    38a0:	2100      	movs	r1, #0
    38a2:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    38a6:	e7e7      	b.n	3878 <UART_DeInit+0x12>
    38a8:	bd10      	pop	{r4, pc}
    38aa:	bf00      	nop
    38ac:	4000c000 	.word	0x4000c000
    38b0:	40010000 	.word	0x40010000
    38b4:	40098000 	.word	0x40098000
    38b8:	4009c000 	.word	0x4009c000

000038bc <UART_IrDAInvtInputCmd>:
void UART_IrDAInvtInputCmd(LPC_UART_TypeDef* UARTx, FunctionalState NewState)
{
	CHECK_PARAM(PARAM_UART_IrDA(UARTx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
    38bc:	2901      	cmp	r1, #1
    38be:	d106      	bne.n	38ce <UART_IrDAInvtInputCmd+0x12>
	{
		UARTx->ICR |= UART_ICR_IRDAINV;
    38c0:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
    38c4:	f043 0302 	orr.w	r3, r3, #2
	}
	else if (NewState == DISABLE)
	{
		UARTx->ICR &= (~UART_ICR_IRDAINV) & UART_ICR_BITMASK;
    38c8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    38cc:	4770      	bx	lr
	else if (NewState == DISABLE)
    38ce:	2900      	cmp	r1, #0
    38d0:	d1fc      	bne.n	38cc <UART_IrDAInvtInputCmd+0x10>
		UARTx->ICR &= (~UART_ICR_IRDAINV) & UART_ICR_BITMASK;
    38d2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
    38d6:	f003 033d 	and.w	r3, r3, #61	; 0x3d
    38da:	e7f5      	b.n	38c8 <UART_IrDAInvtInputCmd+0xc>

000038dc <UART_IrDACmd>:
	CHECK_PARAM(PARAM_UART_IrDA(UARTx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
	{
		UARTx->ICR |= UART_ICR_IRDAEN;
    38dc:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
	if (NewState == ENABLE)
    38e0:	2901      	cmp	r1, #1
		UARTx->ICR |= UART_ICR_IRDAEN;
    38e2:	bf0c      	ite	eq
    38e4:	f043 0301 	orreq.w	r3, r3, #1
	}
	else
	{
		UARTx->ICR &= (~UART_ICR_IRDAEN) & UART_ICR_BITMASK;
    38e8:	f003 033e 	andne.w	r3, r3, #62	; 0x3e
    38ec:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    38f0:	4770      	bx	lr

000038f2 <UART_IrDAPulseDivConfig>:
	uint32_t tmp, tmp1;
	CHECK_PARAM(PARAM_UART_IrDA(UARTx));
	CHECK_PARAM(PARAM_UART_IrDA_PULSEDIV(PulseDiv));

	tmp1 = UART_ICR_PULSEDIV(PulseDiv);
	tmp = UARTx->ICR & (~UART_ICR_PULSEDIV(7));
    38f2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
	tmp1 = UART_ICR_PULSEDIV(PulseDiv);
    38f6:	00c9      	lsls	r1, r1, #3
	tmp = UARTx->ICR & (~UART_ICR_PULSEDIV(7));
    38f8:	f003 03c7 	and.w	r3, r3, #199	; 0xc7
    38fc:	f043 0304 	orr.w	r3, r3, #4
	tmp1 = UART_ICR_PULSEDIV(PulseDiv);
    3900:	f001 0138 	and.w	r1, r1, #56	; 0x38
	tmp |= tmp1 | UART_ICR_FIXPULSE_EN;
    3904:	4319      	orrs	r1, r3
	UARTx->ICR = tmp & UART_ICR_BITMASK;
    3906:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    390a:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
    390e:	4770      	bx	lr

00003910 <UART_FullModemForcePinState>:

	CHECK_PARAM(PARAM_UART1_MODEM(UARTx));
	CHECK_PARAM(PARAM_UART1_MODEM_PIN(Pin));
	CHECK_PARAM(PARAM_UART1_SIGNALSTATE(NewState));

	switch (Pin){
    3910:	b161      	cbz	r1, 392c <UART_FullModemForcePinState+0x1c>
    3912:	2901      	cmp	r1, #1
	uint8_t tmp = 0;
    3914:	bf0c      	ite	eq
    3916:	2102      	moveq	r1, #2
    3918:	2100      	movne	r1, #0
	default:
		break;
	}

	if (NewState == ACTIVE){
		UARTx->MCR |= tmp;
    391a:	7c03      	ldrb	r3, [r0, #16]
	if (NewState == ACTIVE){
    391c:	2a01      	cmp	r2, #1
	} else {
		UARTx->MCR &= (~tmp) & UART1_MCR_BITMASK;
    391e:	bf16      	itet	ne
    3920:	f003 03f3 	andne.w	r3, r3, #243	; 0xf3
		UARTx->MCR |= tmp;
    3924:	430b      	orreq	r3, r1
		UARTx->MCR &= (~tmp) & UART1_MCR_BITMASK;
    3926:	438b      	bicne	r3, r1
    3928:	7403      	strb	r3, [r0, #16]
    392a:	4770      	bx	lr
		tmp = UART1_MCR_DTR_CTRL;
    392c:	2101      	movs	r1, #1
    392e:	e7f4      	b.n	391a <UART_FullModemForcePinState+0xa>

00003930 <UART_FullModemConfigMode>:
				- DISABLE: Disable this mode.
 * @return none
 **********************************************************************/
void UART_FullModemConfigMode(LPC_UART1_TypeDef *UARTx, UART_MODEM_MODE_Type Mode, \
							FunctionalState NewState)
{
    3930:	2902      	cmp	r1, #2
    3932:	bf8e      	itee	hi
    3934:	2100      	movhi	r1, #0
    3936:	4b06      	ldrls	r3, [pc, #24]	; (3950 <UART_FullModemConfigMode+0x20>)
    3938:	18c9      	addls	r1, r1, r3
		break;
	}

	if (NewState == ENABLE)
	{
		UARTx->MCR |= tmp;
    393a:	7c03      	ldrb	r3, [r0, #16]
    393c:	bf98      	it	ls
    393e:	7c49      	ldrbls	r1, [r1, #17]
	if (NewState == ENABLE)
    3940:	2a01      	cmp	r2, #1
	}
	else
	{
		UARTx->MCR &= (~tmp) & UART1_MCR_BITMASK;
    3942:	bf16      	itet	ne
    3944:	f003 03f3 	andne.w	r3, r3, #243	; 0xf3
		UARTx->MCR |= tmp;
    3948:	430b      	orreq	r3, r1
		UARTx->MCR &= (~tmp) & UART1_MCR_BITMASK;
    394a:	438b      	bicne	r3, r1
    394c:	7403      	strb	r3, [r0, #16]
    394e:	4770      	bx	lr
    3950:	0000a688 	.word	0x0000a688

00003954 <UART_FullModemGetStatus>:
 * 			used to check all flags.
 **********************************************************************/
uint8_t UART_FullModemGetStatus(LPC_UART1_TypeDef *UARTx)
{
	CHECK_PARAM(PARAM_UART1_MODEM(UARTx));
	return ((UARTx->MSR) & UART1_MSR_BITMASK);
    3954:	7e00      	ldrb	r0, [r0, #24]
}
    3956:	4770      	bx	lr

00003958 <UART_RS485Config>:
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(RS485ConfigStruct->NormalMultiDropMode_State));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(RS485ConfigStruct->Rx_State));

	tmp = 0;
	// If Auto Direction Control is enabled -  This function is used in Master mode
	if (RS485ConfigStruct->AutoDirCtrl_State == ENABLE)
    3958:	78cb      	ldrb	r3, [r1, #3]
    395a:	2b01      	cmp	r3, #1
    395c:	d125      	bne.n	39aa <UART_RS485Config+0x52>
	{
		tmp |= UART1_RS485CTRL_DCTRL_EN;

		// Set polar
		if (RS485ConfigStruct->DirCtrlPol_Level == SET)
    395e:	794b      	ldrb	r3, [r1, #5]
		{
			tmp |= UART1_RS485CTRL_OINV_1;
		}

		// Set pin according to
		if (RS485ConfigStruct->DirCtrlPin == UART1_RS485_DIRCTRL_DTR)
    3960:	790a      	ldrb	r2, [r1, #4]
		if (RS485ConfigStruct->DirCtrlPol_Level == SET)
    3962:	2b01      	cmp	r3, #1
			tmp |= UART1_RS485CTRL_OINV_1;
    3964:	bf0c      	ite	eq
    3966:	2330      	moveq	r3, #48	; 0x30
    3968:	2310      	movne	r3, #16
		if (RS485ConfigStruct->DirCtrlPin == UART1_RS485_DIRCTRL_DTR)
    396a:	2a01      	cmp	r2, #1
		{
			tmp |= UART1_RS485CTRL_SEL_DTR;
		}

		// Fill delay time
		UARTx->RS485DLY = RS485ConfigStruct->DelayValue & UART1_RS485DLY_BITMASK;
    396c:	79ca      	ldrb	r2, [r1, #7]
			tmp |= UART1_RS485CTRL_SEL_DTR;
    396e:	bf08      	it	eq
    3970:	f043 0308 	orreq.w	r3, r3, #8
		UARTx->RS485DLY = RS485ConfigStruct->DelayValue & UART1_RS485DLY_BITMASK;
    3974:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
	}

	// MultiDrop mode is enable
	if (RS485ConfigStruct->NormalMultiDropMode_State == ENABLE)
    3978:	780a      	ldrb	r2, [r1, #0]
    397a:	2a01      	cmp	r2, #1
	{
		tmp |= UART1_RS485CTRL_NMM_EN;
	}

	// Auto Address Detect function
	if (RS485ConfigStruct->AutoAddrDetect_State == ENABLE)
    397c:	788a      	ldrb	r2, [r1, #2]
		tmp |= UART1_RS485CTRL_NMM_EN;
    397e:	bf08      	it	eq
    3980:	f043 0301 	orreq.w	r3, r3, #1
	if (RS485ConfigStruct->AutoAddrDetect_State == ENABLE)
    3984:	2a01      	cmp	r2, #1
	{
		tmp |= UART1_RS485CTRL_AADEN;
		// Fill Match Address
		UARTx->ADRMATCH = RS485ConfigStruct->MatchAddrValue & UART1_RS485ADRMATCH_BITMASK;
    3986:	bf02      	ittt	eq
    3988:	798a      	ldrbeq	r2, [r1, #6]
		tmp |= UART1_RS485CTRL_AADEN;
    398a:	f043 0304 	orreq.w	r3, r3, #4
		UARTx->ADRMATCH = RS485ConfigStruct->MatchAddrValue & UART1_RS485ADRMATCH_BITMASK;
    398e:	f880 2050 	strbeq.w	r2, [r0, #80]	; 0x50
	}


	// Receiver is disable
	if (RS485ConfigStruct->Rx_State == DISABLE)
    3992:	784a      	ldrb	r2, [r1, #1]
    3994:	b90a      	cbnz	r2, 399a <UART_RS485Config+0x42>
	{
		tmp |= UART1_RS485CTRL_RX_DIS;
    3996:	f043 0302 	orr.w	r3, r3, #2
	}

	// write back to RS485 control register
	UARTx->RS485CTRL = tmp & UART1_RS485CTRL_BITMASK;
    399a:	b2db      	uxtb	r3, r3
    399c:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c

	// Enable Parity function and leave parity in stick '0' parity as default
	UARTx->LCR |= (UART_LCR_PARITY_F_0 | UART_LCR_PARITY_EN);
    39a0:	7b03      	ldrb	r3, [r0, #12]
    39a2:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    39a6:	7303      	strb	r3, [r0, #12]
    39a8:	4770      	bx	lr
	tmp = 0;
    39aa:	2300      	movs	r3, #0
    39ac:	e7e4      	b.n	3978 <UART_RS485Config+0x20>

000039ae <UART_RS485ReceiverCmd>:
 * @return		None
 **********************************************************************/
void UART_RS485ReceiverCmd(LPC_UART1_TypeDef *UARTx, FunctionalState NewState)
{
	if (NewState == ENABLE){
		UARTx->RS485CTRL &= ~UART1_RS485CTRL_RX_DIS;
    39ae:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
	if (NewState == ENABLE){
    39b2:	2901      	cmp	r1, #1
		UARTx->RS485CTRL &= ~UART1_RS485CTRL_RX_DIS;
    39b4:	bf0c      	ite	eq
    39b6:	f003 03fd 	andeq.w	r3, r3, #253	; 0xfd
	} else {
		UARTx->RS485CTRL |= UART1_RS485CTRL_RX_DIS;
    39ba:	f043 0302 	orrne.w	r3, r3, #2
    39be:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
    39c2:	4770      	bx	lr

000039c4 <UART_RS485Send>:
 * @param[in]	ParityStick	Parity Stick value, should be 0 or 1.
 * @return		None
 **********************************************************************/
uint32_t UART_RS485Send(LPC_UART1_TypeDef *UARTx, uint8_t *pDatFrm, \
					uint32_t size, uint8_t ParityStick)
{
    39c4:	b538      	push	{r3, r4, r5, lr}
    39c6:	4604      	mov	r4, r0
	uint8_t tmp, save;
	uint32_t cnt;

	if (ParityStick){
    39c8:	b15b      	cbz	r3, 39e2 <UART_RS485Send+0x1e>
		save = tmp = UARTx->LCR & UART_LCR_BITMASK;
    39ca:	7b05      	ldrb	r5, [r0, #12]
    39cc:	b2ed      	uxtb	r5, r5
		tmp &= ~(UART_LCR_PARITY_EVEN);
    39ce:	f005 03ef 	and.w	r3, r5, #239	; 0xef
		UARTx->LCR = tmp;
    39d2:	7303      	strb	r3, [r0, #12]
    39d4:	f7ff fcfa 	bl	33cc <UART_Send.part.0>
		cnt = UART_Send((LPC_UART_TypeDef *)UARTx, pDatFrm, size, BLOCKING);
		while (!(UARTx->LSR & UART_LSR_TEMT));
    39d8:	7d23      	ldrb	r3, [r4, #20]
    39da:	065a      	lsls	r2, r3, #25
    39dc:	d5fc      	bpl.n	39d8 <UART_RS485Send+0x14>
		UARTx->LCR = save;
    39de:	7325      	strb	r5, [r4, #12]
    39e0:	bd38      	pop	{r3, r4, r5, pc}
    39e2:	f7ff fcf3 	bl	33cc <UART_Send.part.0>
	} else {
		cnt = UART_Send((LPC_UART_TypeDef *)UARTx, pDatFrm, size, BLOCKING);
		while (!(UARTx->LSR & UART_LSR_TEMT));
    39e6:	7d23      	ldrb	r3, [r4, #20]
    39e8:	065b      	lsls	r3, r3, #25
    39ea:	d5fc      	bpl.n	39e6 <UART_RS485Send+0x22>
	}
	return cnt;
}
    39ec:	bd38      	pop	{r3, r4, r5, pc}

000039ee <UART_RS485SendSlvAddr>:
 * @param[in]	UARTx	LPC_UART1 (only)
 * @param[in]	SlvAddr Slave Address.
 * @return		None
 **********************************************************************/
void UART_RS485SendSlvAddr(LPC_UART1_TypeDef *UARTx, uint8_t SlvAddr)
{
    39ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
		save = tmp = UARTx->LCR & UART_LCR_BITMASK;
    39f0:	7b05      	ldrb	r5, [r0, #12]
{
    39f2:	ab02      	add	r3, sp, #8
		save = tmp = UARTx->LCR & UART_LCR_BITMASK;
    39f4:	b2ed      	uxtb	r5, r5
		tmp &= ~(UART_LCR_PARITY_EVEN);
    39f6:	f005 02ef 	and.w	r2, r5, #239	; 0xef
{
    39fa:	f803 1d01 	strb.w	r1, [r3, #-1]!
		UARTx->LCR = tmp;
    39fe:	7302      	strb	r2, [r0, #12]
    3a00:	4619      	mov	r1, r3
    3a02:	2201      	movs	r2, #1
{
    3a04:	4604      	mov	r4, r0
    3a06:	f7ff fce1 	bl	33cc <UART_Send.part.0>
		while (!(UARTx->LSR & UART_LSR_TEMT));
    3a0a:	7d23      	ldrb	r3, [r4, #20]
    3a0c:	065b      	lsls	r3, r3, #25
    3a0e:	d5fc      	bpl.n	3a0a <UART_RS485SendSlvAddr+0x1c>
		UARTx->LCR = save;
    3a10:	7325      	strb	r5, [r4, #12]
	UART_RS485Send(UARTx, &SlvAddr, 1, 1);
}
    3a12:	b003      	add	sp, #12
    3a14:	bd30      	pop	{r4, r5, pc}

00003a16 <UART_RS485SendData>:
 * @param[in]	size Size of data frame to be sent.
 * @return		None
 **********************************************************************/
uint32_t UART_RS485SendData(LPC_UART1_TypeDef *UARTx, uint8_t *pData, uint32_t size)
{
	return (UART_RS485Send(UARTx, pData, size, 0));
    3a16:	2300      	movs	r3, #0
    3a18:	f7ff bfd4 	b.w	39c4 <UART_RS485Send>

00003a1c <CLKPWR_SetPCLKDiv>:
 **********************************************************************/
void CLKPWR_SetPCLKDiv (uint32_t ClkType, uint32_t DivVal)
{
	uint32_t bitpos;

	bitpos = (ClkType < 32) ? (ClkType) : (ClkType - 32);
    3a1c:	281f      	cmp	r0, #31
{
    3a1e:	b510      	push	{r4, lr}
    3a20:	4b10      	ldr	r3, [pc, #64]	; (3a64 <CLKPWR_SetPCLKDiv+0x48>)
    3a22:	f04f 0203 	mov.w	r2, #3
	bitpos = (ClkType < 32) ? (ClkType) : (ClkType - 32);
    3a26:	d90e      	bls.n	3a46 <CLKPWR_SetPCLKDiv+0x2a>
	}
	/* PCLKSEL1 selected */
	else
	{
		/* Clear two bit at bit position */
		LPC_SC->PCLKSEL1 &= ~(CLKPWR_PCLKSEL_BITMASK(bitpos));
    3a28:	f8d3 41ac 	ldr.w	r4, [r3, #428]	; 0x1ac
	bitpos = (ClkType < 32) ? (ClkType) : (ClkType - 32);
    3a2c:	3820      	subs	r0, #32
		LPC_SC->PCLKSEL1 &= ~(CLKPWR_PCLKSEL_BITMASK(bitpos));
    3a2e:	4082      	lsls	r2, r0
    3a30:	ea24 0202 	bic.w	r2, r4, r2
    3a34:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

		/* Set two selected bit */
		LPC_SC->PCLKSEL1 |= (CLKPWR_PCLKSEL_SET(bitpos, DivVal));
    3a38:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    3a3c:	4081      	lsls	r1, r0
    3a3e:	4311      	orrs	r1, r2
    3a40:	f8c3 11ac 	str.w	r1, [r3, #428]	; 0x1ac
	}
}
    3a44:	bd10      	pop	{r4, pc}
		LPC_SC->PCLKSEL0 &= (~(CLKPWR_PCLKSEL_BITMASK(bitpos)));
    3a46:	f8d3 41a8 	ldr.w	r4, [r3, #424]	; 0x1a8
    3a4a:	4082      	lsls	r2, r0
    3a4c:	ea24 0202 	bic.w	r2, r4, r2
    3a50:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
		LPC_SC->PCLKSEL0 |= (CLKPWR_PCLKSEL_SET(bitpos, DivVal));
    3a54:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
    3a58:	4081      	lsls	r1, r0
    3a5a:	4311      	orrs	r1, r2
    3a5c:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
    3a60:	bd10      	pop	{r4, pc}
    3a62:	bf00      	nop
    3a64:	400fc000 	.word	0x400fc000

00003a68 <CLKPWR_GetPCLKSEL>:
				- CLKPWR_PCLKSEL_MC 		: MC

 * @return		Value of Selected Peripheral Clock Selection
 **********************************************************************/
uint32_t CLKPWR_GetPCLKSEL (uint32_t ClkType)
{
    3a68:	4b06      	ldr	r3, [pc, #24]	; (3a84 <CLKPWR_GetPCLKSEL+0x1c>)
	uint32_t bitpos, retval;

	if (ClkType < 32)
    3a6a:	281f      	cmp	r0, #31
	{
		bitpos = ClkType;
		retval = LPC_SC->PCLKSEL0;
    3a6c:	bf92      	itee	ls
    3a6e:	f8d3 31a8 	ldrls.w	r3, [r3, #424]	; 0x1a8
	}
	else
	{
		bitpos = ClkType - 32;
		retval = LPC_SC->PCLKSEL1;
    3a72:	f8d3 31ac 	ldrhi.w	r3, [r3, #428]	; 0x1ac
		bitpos = ClkType - 32;
    3a76:	3820      	subhi	r0, #32
	}

	retval = CLKPWR_PCLKSEL_GET(bitpos, retval);
    3a78:	fa23 f000 	lsr.w	r0, r3, r0
	return retval;
}
    3a7c:	f000 0003 	and.w	r0, r0, #3
    3a80:	4770      	bx	lr
    3a82:	bf00      	nop
    3a84:	400fc000 	.word	0x400fc000

00003a88 <CLKPWR_GetPCLK>:
				- CLKPWR_PCLKSEL_MC 		: MC

 * @return		Value of Selected Peripheral Clock
 **********************************************************************/
uint32_t CLKPWR_GetPCLK (uint32_t ClkType)
{
    3a88:	b508      	push	{r3, lr}
	uint32_t retval, div;

	retval = SystemCoreClock;
    3a8a:	4b08      	ldr	r3, [pc, #32]	; (3aac <CLKPWR_GetPCLK+0x24>)
    3a8c:	681a      	ldr	r2, [r3, #0]
	div = CLKPWR_GetPCLKSEL(ClkType);
    3a8e:	f7ff ffeb 	bl	3a68 <CLKPWR_GetPCLKSEL>

	switch (div)
    3a92:	2803      	cmp	r0, #3
    3a94:	d804      	bhi.n	3aa0 <CLKPWR_GetPCLK+0x18>
    3a96:	e8df f000 	tbb	[pc, r0]
    3a9a:	0306      	.short	0x0306
    3a9c:	0203      	.short	0x0203
	case 2:
		div = 2;
		break;

	case 3:
		div = 8;
    3a9e:	2008      	movs	r0, #8
		break;
	}
	retval /= div;

	return retval;
}
    3aa0:	fbb2 f0f0 	udiv	r0, r2, r0
    3aa4:	bd08      	pop	{r3, pc}
		div = 4;
    3aa6:	2004      	movs	r0, #4
    3aa8:	e7fa      	b.n	3aa0 <CLKPWR_GetPCLK+0x18>
    3aaa:	bf00      	nop
    3aac:	100000d8 	.word	0x100000d8

00003ab0 <CLKPWR_ConfigPPWR>:
 *
 * @return none
 **********************************************************************/
void CLKPWR_ConfigPPWR (uint32_t PPType, FunctionalState NewState)
{
	if (NewState == ENABLE)
    3ab0:	2901      	cmp	r1, #1
    3ab2:	d108      	bne.n	3ac6 <CLKPWR_ConfigPPWR+0x16>
	{
		LPC_SC->PCONP |= PPType & CLKPWR_PCONP_BITMASK;
    3ab4:	4b09      	ldr	r3, [pc, #36]	; (3adc <CLKPWR_ConfigPPWR+0x2c>)
    3ab6:	4a0a      	ldr	r2, [pc, #40]	; (3ae0 <CLKPWR_ConfigPPWR+0x30>)
    3ab8:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
    3abc:	4002      	ands	r2, r0
    3abe:	430a      	orrs	r2, r1
    3ac0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    3ac4:	4770      	bx	lr
	}
	else if (NewState == DISABLE)
    3ac6:	b941      	cbnz	r1, 3ada <CLKPWR_ConfigPPWR+0x2a>
	{
		LPC_SC->PCONP &= (~PPType) & CLKPWR_PCONP_BITMASK;
    3ac8:	4a04      	ldr	r2, [pc, #16]	; (3adc <CLKPWR_ConfigPPWR+0x2c>)
    3aca:	4b05      	ldr	r3, [pc, #20]	; (3ae0 <CLKPWR_ConfigPPWR+0x30>)
    3acc:	f8d2 10c4 	ldr.w	r1, [r2, #196]	; 0xc4
    3ad0:	400b      	ands	r3, r1
    3ad2:	ea23 0300 	bic.w	r3, r3, r0
    3ad6:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
    3ada:	4770      	bx	lr
    3adc:	400fc000 	.word	0x400fc000
    3ae0:	efeff7de 	.word	0xefeff7de

00003ae4 <CLKPWR_Sleep>:
 * @param[in]	None
 * @return		None
 **********************************************************************/
void CLKPWR_Sleep(void)
{
	LPC_SC->PCON = 0x00;
    3ae4:	2200      	movs	r2, #0
    3ae6:	4b02      	ldr	r3, [pc, #8]	; (3af0 <CLKPWR_Sleep+0xc>)
    3ae8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
    3aec:	bf30      	wfi
    3aee:	4770      	bx	lr
    3af0:	400fc000 	.word	0x400fc000

00003af4 <CLKPWR_DeepSleep>:
 * @return		None
 **********************************************************************/
void CLKPWR_DeepSleep(void)
{
    /* Deep-Sleep Mode, set SLEEPDEEP bit */
	SCB->SCR = 0x4;
    3af4:	2204      	movs	r2, #4
    3af6:	4b04      	ldr	r3, [pc, #16]	; (3b08 <CLKPWR_DeepSleep+0x14>)
    3af8:	611a      	str	r2, [r3, #16]
	LPC_SC->PCON = 0x00;
    3afa:	2200      	movs	r2, #0
    3afc:	4b03      	ldr	r3, [pc, #12]	; (3b0c <CLKPWR_DeepSleep+0x18>)
    3afe:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    3b02:	bf30      	wfi
    3b04:	4770      	bx	lr
    3b06:	bf00      	nop
    3b08:	e000ed00 	.word	0xe000ed00
    3b0c:	400fc000 	.word	0x400fc000

00003b10 <CLKPWR_PowerDown>:
 * @return		None
 **********************************************************************/
void CLKPWR_PowerDown(void)
{
    /* Deep-Sleep Mode, set SLEEPDEEP bit */
	SCB->SCR = 0x4;
    3b10:	2204      	movs	r2, #4
    3b12:	4b04      	ldr	r3, [pc, #16]	; (3b24 <CLKPWR_PowerDown+0x14>)
    3b14:	611a      	str	r2, [r3, #16]
	LPC_SC->PCON = 0x01;
    3b16:	2201      	movs	r2, #1
    3b18:	4b03      	ldr	r3, [pc, #12]	; (3b28 <CLKPWR_PowerDown+0x18>)
    3b1a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    3b1e:	bf30      	wfi
    3b20:	4770      	bx	lr
    3b22:	bf00      	nop
    3b24:	e000ed00 	.word	0xe000ed00
    3b28:	400fc000 	.word	0x400fc000

00003b2c <CLKPWR_DeepPowerDown>:
 * @return		None
 **********************************************************************/
void CLKPWR_DeepPowerDown(void)
{
    /* Deep-Sleep Mode, set SLEEPDEEP bit */
	SCB->SCR = 0x4;
    3b2c:	2204      	movs	r2, #4
    3b2e:	4b04      	ldr	r3, [pc, #16]	; (3b40 <CLKPWR_DeepPowerDown+0x14>)
    3b30:	611a      	str	r2, [r3, #16]
	LPC_SC->PCON = 0x03;
    3b32:	2203      	movs	r2, #3
    3b34:	4b03      	ldr	r3, [pc, #12]	; (3b44 <CLKPWR_DeepPowerDown+0x18>)
    3b36:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    3b3a:	bf30      	wfi
    3b3c:	4770      	bx	lr
    3b3e:	bf00      	nop
    3b40:	e000ed00 	.word	0xe000ed00
    3b44:	400fc000 	.word	0x400fc000

00003b48 <PINSEL_ConfigTraceFunc>:
 *
 * @return 		None
 **********************************************************************/
void PINSEL_ConfigTraceFunc(FunctionalState NewState)
{
	if (NewState == ENABLE) {
    3b48:	2801      	cmp	r0, #1
    3b4a:	d105      	bne.n	3b58 <PINSEL_ConfigTraceFunc+0x10>
		LPC_PINCON->PINSEL10 |= (0x01UL << 3);
    3b4c:	4a06      	ldr	r2, [pc, #24]	; (3b68 <PINSEL_ConfigTraceFunc+0x20>)
    3b4e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3b50:	f043 0308 	orr.w	r3, r3, #8
	} else if (NewState == DISABLE) {
		LPC_PINCON->PINSEL10 &= ~(0x01UL << 3);
    3b54:	6293      	str	r3, [r2, #40]	; 0x28
    3b56:	4770      	bx	lr
	} else if (NewState == DISABLE) {
    3b58:	2800      	cmp	r0, #0
    3b5a:	d1fc      	bne.n	3b56 <PINSEL_ConfigTraceFunc+0xe>
		LPC_PINCON->PINSEL10 &= ~(0x01UL << 3);
    3b5c:	4a02      	ldr	r2, [pc, #8]	; (3b68 <PINSEL_ConfigTraceFunc+0x20>)
    3b5e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3b60:	f023 0308 	bic.w	r3, r3, #8
    3b64:	e7f6      	b.n	3b54 <PINSEL_ConfigTraceFunc+0xc>
    3b66:	bf00      	nop
    3b68:	4002c000 	.word	0x4002c000

00003b6c <PINSEL_SetI2C0Pins>:

	if (i2cPinMode == PINSEL_I2C_Fast_Mode){
		regVal = PINSEL_I2CPADCFG_SCLDRV0 | PINSEL_I2CPADCFG_SDADRV0;
	}

	if (filterSlewRateEnable == DISABLE){
    3b6c:	2900      	cmp	r1, #0
		regVal = PINSEL_I2CPADCFG_SCLI2C0 | PINSEL_I2CPADCFG_SDAI2C0;
    3b6e:	bf14      	ite	ne
    3b70:	2205      	movne	r2, #5
    3b72:	220a      	moveq	r2, #10
	}
	LPC_PINCON->I2CPADCFG = regVal;
    3b74:	4b01      	ldr	r3, [pc, #4]	; (3b7c <PINSEL_SetI2C0Pins+0x10>)
    3b76:	67da      	str	r2, [r3, #124]	; 0x7c
    3b78:	4770      	bx	lr
    3b7a:	bf00      	nop
    3b7c:	4002c000 	.word	0x4002c000

00003b80 <PINSEL_ConfigPin>:
 *                    that contains the configuration information for the
 *                    specified pin.
 * @return 		None
 **********************************************************************/
void PINSEL_ConfigPin(PINSEL_CFG_Type *PinCfg)
{
    3b80:	b5f0      	push	{r4, r5, r6, r7, lr}
	set_PinFunc(PinCfg->Portnum, PinCfg->Pinnum, PinCfg->Funcnum);
    3b82:	7845      	ldrb	r5, [r0, #1]
	*(uint32_t *)(pPinCon + pinselreg_idx) &= ~(0x03UL << (pinnum_t * 2));
    3b84:	2303      	movs	r3, #3
	uint32_t pinnum_t = pinnum;
    3b86:	462a      	mov	r2, r5
	if (pinnum_t >= 16) {
    3b88:	2d0f      	cmp	r5, #15
		pinnum_t -= 16;
    3b8a:	bf88      	it	hi
    3b8c:	f1a5 0210 	subhi.w	r2, r5, #16
	*(uint32_t *)(pPinCon + pinselreg_idx) &= ~(0x03UL << (pinnum_t * 2));
    3b90:	ea4f 0242 	mov.w	r2, r2, lsl #1
    3b94:	fa03 f302 	lsl.w	r3, r3, r2
    3b98:	ea6f 0303 	mvn.w	r3, r3
	set_PinFunc(PinCfg->Portnum, PinCfg->Pinnum, PinCfg->Funcnum);
    3b9c:	7804      	ldrb	r4, [r0, #0]
    3b9e:	f890 e002 	ldrb.w	lr, [r0, #2]
	uint32_t pinselreg_idx = 2 * portnum;
    3ba2:	ea4f 0644 	mov.w	r6, r4, lsl #1
		pinselreg_idx++;
    3ba6:	bf88      	it	hi
    3ba8:	3601      	addhi	r6, #1
	*(uint32_t *)(pPinCon + pinselreg_idx) &= ~(0x03UL << (pinnum_t * 2));
    3baa:	00b1      	lsls	r1, r6, #2
    3bac:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    3bb0:	f501 3130 	add.w	r1, r1, #180224	; 0x2c000
    3bb4:	680f      	ldr	r7, [r1, #0]
	*(uint32_t *)(pPinCon + pinselreg_idx) |= ((uint32_t)funcnum) << (pinnum_t * 2);
    3bb6:	fa0e fe02 	lsl.w	lr, lr, r2
	*(uint32_t *)(pPinCon + pinselreg_idx) &= ~(0x03UL << (pinnum_t * 2));
    3bba:	401f      	ands	r7, r3
	*(uint32_t *)(pPinCon + pinselreg_idx) |= ((uint32_t)funcnum) << (pinnum_t * 2);
    3bbc:	ea47 070e 	orr.w	r7, r7, lr
    3bc0:	600f      	str	r7, [r1, #0]
	*(uint32_t *)(pPinCon + pinmodereg_idx) &= ~(0x03UL << (pinnum_t * 2));
    3bc2:	4f10      	ldr	r7, [pc, #64]	; (3c04 <PINSEL_ConfigPin+0x84>)
    3bc4:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
    3bc8:	400b      	ands	r3, r1
	*(uint32_t *)(pPinCon + pinmodereg_idx) |= ((uint32_t)modenum) << (pinnum_t * 2);
    3bca:	78c1      	ldrb	r1, [r0, #3]
    3bcc:	fa01 f202 	lsl.w	r2, r1, r2
    3bd0:	4313      	orrs	r3, r2
    3bd2:	f847 3026 	str.w	r3, [r7, r6, lsl #2]
	if (modenum == PINSEL_PINMODE_OPENDRAIN){
    3bd6:	7902      	ldrb	r2, [r0, #4]
    3bd8:	4b0b      	ldr	r3, [pc, #44]	; (3c08 <PINSEL_ConfigPin+0x88>)
    3bda:	2a01      	cmp	r2, #1
    3bdc:	d107      	bne.n	3bee <PINSEL_ConfigPin+0x6e>
		*(uint32_t *)(pPinCon + portnum) |= (0x01UL << pinnum);
    3bde:	fa02 f505 	lsl.w	r5, r2, r5
    3be2:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    3be6:	4315      	orrs	r5, r2
    3be8:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
    3bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*(uint32_t *)(pPinCon + portnum) &= ~(0x01UL << pinnum);
    3bee:	2201      	movs	r2, #1
    3bf0:	fa02 f505 	lsl.w	r5, r2, r5
    3bf4:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    3bf8:	ea22 0205 	bic.w	r2, r2, r5
    3bfc:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    3c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c02:	bf00      	nop
    3c04:	4002c040 	.word	0x4002c040
    3c08:	4002c068 	.word	0x4002c068

00003c0c <GPIO_SetDir>:
 *
 * Note: All remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void GPIO_SetDir(uint8_t portNum, uint32_t bitValue, uint8_t dir)
{
    3c0c:	2804      	cmp	r0, #4
    3c0e:	d807      	bhi.n	3c20 <GPIO_SetDir+0x14>
    3c10:	4b06      	ldr	r3, [pc, #24]	; (3c2c <GPIO_SetDir+0x20>)
    3c12:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	LPC_GPIO_TypeDef *pGPIO = GPIO_GetPointer(portNum);

	if (pGPIO != NULL) {
    3c16:	b11b      	cbz	r3, 3c20 <GPIO_SetDir+0x14>
		// Enable Output
		if (dir) {
    3c18:	b11a      	cbz	r2, 3c22 <GPIO_SetDir+0x16>
			pGPIO->FIODIR |= bitValue;
    3c1a:	681a      	ldr	r2, [r3, #0]
    3c1c:	4311      	orrs	r1, r2
		}
		// Enable Input
		else {
			pGPIO->FIODIR &= ~bitValue;
    3c1e:	6019      	str	r1, [r3, #0]
    3c20:	4770      	bx	lr
    3c22:	681a      	ldr	r2, [r3, #0]
    3c24:	ea22 0101 	bic.w	r1, r2, r1
    3c28:	e7f9      	b.n	3c1e <GPIO_SetDir+0x12>
    3c2a:	bf00      	nop
    3c2c:	0000a69c 	.word	0x0000a69c

00003c30 <GPIO_SetValue>:
 * not effect.
 * - For all remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void GPIO_SetValue(uint8_t portNum, uint32_t bitValue)
{
    3c30:	2804      	cmp	r0, #4
    3c32:	d804      	bhi.n	3c3e <GPIO_SetValue+0xe>
    3c34:	4b02      	ldr	r3, [pc, #8]	; (3c40 <GPIO_SetValue+0x10>)
    3c36:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	LPC_GPIO_TypeDef *pGPIO = GPIO_GetPointer(portNum);

	if (pGPIO != NULL) {
    3c3a:	b103      	cbz	r3, 3c3e <GPIO_SetValue+0xe>
		pGPIO->FIOSET = bitValue;
    3c3c:	6199      	str	r1, [r3, #24]
    3c3e:	4770      	bx	lr
    3c40:	0000a69c 	.word	0x0000a69c

00003c44 <GPIO_ClearValue>:
 * not effect.
 * - For all remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void GPIO_ClearValue(uint8_t portNum, uint32_t bitValue)
{
    3c44:	2804      	cmp	r0, #4
    3c46:	d804      	bhi.n	3c52 <GPIO_ClearValue+0xe>
    3c48:	4b02      	ldr	r3, [pc, #8]	; (3c54 <GPIO_ClearValue+0x10>)
    3c4a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	LPC_GPIO_TypeDef *pGPIO = GPIO_GetPointer(portNum);

	if (pGPIO != NULL) {
    3c4e:	b103      	cbz	r3, 3c52 <GPIO_ClearValue+0xe>
		pGPIO->FIOCLR = bitValue;
    3c50:	61d9      	str	r1, [r3, #28]
    3c52:	4770      	bx	lr
    3c54:	0000a69c 	.word	0x0000a69c

00003c58 <GPIO_ReadValue>:
 *
 * Note: Return value contain state of each port pin (bit) on that GPIO regardless
 * its direction is input or output.
 **********************************************************************/
uint32_t GPIO_ReadValue(uint8_t portNum)
{
    3c58:	2804      	cmp	r0, #4
    3c5a:	d805      	bhi.n	3c68 <GPIO_ReadValue+0x10>
    3c5c:	4b03      	ldr	r3, [pc, #12]	; (3c6c <GPIO_ReadValue+0x14>)
    3c5e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
	LPC_GPIO_TypeDef *pGPIO = GPIO_GetPointer(portNum);

	if (pGPIO != NULL) {
    3c62:	b110      	cbz	r0, 3c6a <GPIO_ReadValue+0x12>
		return pGPIO->FIOPIN;
    3c64:	6940      	ldr	r0, [r0, #20]
    3c66:	4770      	bx	lr
	}

	return (0);
    3c68:	2000      	movs	r0, #0
}
    3c6a:	4770      	bx	lr
    3c6c:	0000a69c 	.word	0x0000a69c

00003c70 <GPIO_IntCmd>:
 * 							- 1: Falling edge
 * @return		None
 **********************************************************************/
void GPIO_IntCmd(uint8_t portNum, uint32_t bitValue, uint8_t edgeState)
{
	if((portNum == 0)&&(edgeState == 0))
    3c70:	b918      	cbnz	r0, 3c7a <GPIO_IntCmd+0xa>
    3c72:	b942      	cbnz	r2, 3c86 <GPIO_IntCmd+0x16>
		LPC_GPIOINT->IO0IntEnR = bitValue;
    3c74:	4b09      	ldr	r3, [pc, #36]	; (3c9c <GPIO_IntCmd+0x2c>)
    3c76:	6119      	str	r1, [r3, #16]
    3c78:	4770      	bx	lr
	else if ((portNum == 2)&&(edgeState == 0))
    3c7a:	2802      	cmp	r0, #2
    3c7c:	d10d      	bne.n	3c9a <GPIO_IntCmd+0x2a>
    3c7e:	b93a      	cbnz	r2, 3c90 <GPIO_IntCmd+0x20>
		LPC_GPIOINT->IO2IntEnR = bitValue;
    3c80:	4b06      	ldr	r3, [pc, #24]	; (3c9c <GPIO_IntCmd+0x2c>)
    3c82:	6319      	str	r1, [r3, #48]	; 0x30
    3c84:	4770      	bx	lr
	else if ((portNum == 0)&&(edgeState == 1))
    3c86:	2a01      	cmp	r2, #1
    3c88:	d107      	bne.n	3c9a <GPIO_IntCmd+0x2a>
		LPC_GPIOINT->IO0IntEnF = bitValue;
    3c8a:	4b04      	ldr	r3, [pc, #16]	; (3c9c <GPIO_IntCmd+0x2c>)
    3c8c:	6159      	str	r1, [r3, #20]
    3c8e:	4770      	bx	lr
	else if ((portNum == 2)&&(edgeState == 1))
    3c90:	2a01      	cmp	r2, #1
    3c92:	d102      	bne.n	3c9a <GPIO_IntCmd+0x2a>
		LPC_GPIOINT->IO2IntEnF = bitValue;
    3c94:	4b01      	ldr	r3, [pc, #4]	; (3c9c <GPIO_IntCmd+0x2c>)
    3c96:	6359      	str	r1, [r3, #52]	; 0x34
    3c98:	4770      	bx	lr
    3c9a:	e7fe      	b.n	3c9a <GPIO_IntCmd+0x2a>
    3c9c:	40028080 	.word	0x40028080

00003ca0 <GPIO_GetIntStatus>:
 * 								edge on P0.0
 * 						- DISABLE: A rising edge has not been detected on P0.0
 **********************************************************************/
FunctionalState GPIO_GetIntStatus(uint8_t portNum, uint32_t pinNum, uint8_t edgeState)
{
	if((portNum == 0) && (edgeState == 0))//Rising Edge
    3ca0:	b930      	cbnz	r0, 3cb0 <GPIO_GetIntStatus+0x10>
    3ca2:	b95a      	cbnz	r2, 3cbc <GPIO_GetIntStatus+0x1c>
		return ((FunctionalState)(((LPC_GPIOINT->IO0IntStatR)>>pinNum)& 0x1));
    3ca4:	4b0b      	ldr	r3, [pc, #44]	; (3cd4 <GPIO_GetIntStatus+0x34>)
    3ca6:	6858      	ldr	r0, [r3, #4]
	else if ((portNum == 2) && (edgeState == 0))
		return ((FunctionalState)(((LPC_GPIOINT->IO2IntStatR)>>pinNum)& 0x1));
	else if ((portNum == 0) && (edgeState == 1))//Falling Edge
		return ((FunctionalState)(((LPC_GPIOINT->IO0IntStatF)>>pinNum)& 0x1));
	else if ((portNum == 2) && (edgeState == 1))
		return ((FunctionalState)(((LPC_GPIOINT->IO2IntStatF)>>pinNum)& 0x1));
    3ca8:	40c8      	lsrs	r0, r1
    3caa:	f000 0001 	and.w	r0, r0, #1
    3cae:	4770      	bx	lr
	else if ((portNum == 2) && (edgeState == 0))
    3cb0:	2802      	cmp	r0, #2
    3cb2:	d10d      	bne.n	3cd0 <GPIO_GetIntStatus+0x30>
    3cb4:	b93a      	cbnz	r2, 3cc6 <GPIO_GetIntStatus+0x26>
		return ((FunctionalState)(((LPC_GPIOINT->IO2IntStatR)>>pinNum)& 0x1));
    3cb6:	4b07      	ldr	r3, [pc, #28]	; (3cd4 <GPIO_GetIntStatus+0x34>)
    3cb8:	6a58      	ldr	r0, [r3, #36]	; 0x24
    3cba:	e7f5      	b.n	3ca8 <GPIO_GetIntStatus+0x8>
	else if ((portNum == 0) && (edgeState == 1))//Falling Edge
    3cbc:	2a01      	cmp	r2, #1
    3cbe:	d107      	bne.n	3cd0 <GPIO_GetIntStatus+0x30>
		return ((FunctionalState)(((LPC_GPIOINT->IO0IntStatF)>>pinNum)& 0x1));
    3cc0:	4b04      	ldr	r3, [pc, #16]	; (3cd4 <GPIO_GetIntStatus+0x34>)
    3cc2:	6898      	ldr	r0, [r3, #8]
    3cc4:	e7f0      	b.n	3ca8 <GPIO_GetIntStatus+0x8>
	else if ((portNum == 2) && (edgeState == 1))
    3cc6:	2a01      	cmp	r2, #1
    3cc8:	d102      	bne.n	3cd0 <GPIO_GetIntStatus+0x30>
		return ((FunctionalState)(((LPC_GPIOINT->IO2IntStatF)>>pinNum)& 0x1));
    3cca:	4b02      	ldr	r3, [pc, #8]	; (3cd4 <GPIO_GetIntStatus+0x34>)
    3ccc:	6a98      	ldr	r0, [r3, #40]	; 0x28
    3cce:	e7eb      	b.n	3ca8 <GPIO_GetIntStatus+0x8>
    3cd0:	e7fe      	b.n	3cd0 <GPIO_GetIntStatus+0x30>
    3cd2:	bf00      	nop
    3cd4:	40028080 	.word	0x40028080

00003cd8 <GPIO_ClearInt>:
 * 							in range from 0 to 0xFFFFFFFF.
 * @return		None
 **********************************************************************/
void GPIO_ClearInt(uint8_t portNum, uint32_t bitValue)
{
	if(portNum == 0)
    3cd8:	b910      	cbnz	r0, 3ce0 <GPIO_ClearInt+0x8>
		LPC_GPIOINT->IO0IntClr = bitValue;
    3cda:	4b04      	ldr	r3, [pc, #16]	; (3cec <GPIO_ClearInt+0x14>)
    3cdc:	60d9      	str	r1, [r3, #12]
    3cde:	4770      	bx	lr
	else if (portNum == 2)
    3ce0:	2802      	cmp	r0, #2
    3ce2:	d102      	bne.n	3cea <GPIO_ClearInt+0x12>
		LPC_GPIOINT->IO2IntClr = bitValue;
    3ce4:	4b01      	ldr	r3, [pc, #4]	; (3cec <GPIO_ClearInt+0x14>)
    3ce6:	62d9      	str	r1, [r3, #44]	; 0x2c
    3ce8:	4770      	bx	lr
    3cea:	e7fe      	b.n	3cea <GPIO_ClearInt+0x12>
    3cec:	40028080 	.word	0x40028080

00003cf0 <FIO_SetDir>:
/**
 * @brief The same with GPIO_SetDir()
 */
void FIO_SetDir(uint8_t portNum, uint32_t bitValue, uint8_t dir)
{
	GPIO_SetDir(portNum, bitValue, dir);
    3cf0:	f7ff bf8c 	b.w	3c0c <GPIO_SetDir>

00003cf4 <FIO_SetValue>:
/**
 * @brief The same with GPIO_SetValue()
 */
void FIO_SetValue(uint8_t portNum, uint32_t bitValue)
{
	GPIO_SetValue(portNum, bitValue);
    3cf4:	f7ff bf9c 	b.w	3c30 <GPIO_SetValue>

00003cf8 <FIO_ClearValue>:
/**
 * @brief The same with GPIO_ClearValue()
 */
void FIO_ClearValue(uint8_t portNum, uint32_t bitValue)
{
	GPIO_ClearValue(portNum, bitValue);
    3cf8:	f7ff bfa4 	b.w	3c44 <GPIO_ClearValue>

00003cfc <FIO_ReadValue>:
/**
 * @brief The same with GPIO_ReadValue()
 */
uint32_t FIO_ReadValue(uint8_t portNum)
{
	return (GPIO_ReadValue(portNum));
    3cfc:	f7ff bfac 	b.w	3c58 <GPIO_ReadValue>

00003d00 <FIO_IntCmd>:
/**
 * @brief The same with GPIO_IntCmd()
 */
void FIO_IntCmd(uint8_t portNum, uint32_t bitValue, uint8_t edgeState)
{
	GPIO_IntCmd(portNum, bitValue, edgeState);
    3d00:	f7ff bfb6 	b.w	3c70 <GPIO_IntCmd>

00003d04 <FIO_GetIntStatus>:
/**
 * @brief The same with GPIO_GetIntStatus()
 */
FunctionalState FIO_GetIntStatus(uint8_t portNum, uint32_t pinNum, uint8_t edgeState)
{
	return (GPIO_GetIntStatus(portNum, pinNum, edgeState));
    3d04:	f7ff bfcc 	b.w	3ca0 <GPIO_GetIntStatus>

00003d08 <FIO_ClearInt>:
/**
 * @brief The same with GPIO_ClearInt()
 */
void FIO_ClearInt(uint8_t portNum, uint32_t bitValue)
{
	GPIO_ClearInt(portNum, bitValue);
    3d08:	f7ff bfe6 	b.w	3cd8 <GPIO_ClearInt>

00003d0c <FIO_SetMask>:
 * enables an access to the corresponding physical pin via a read or write access,
 * while value '1' on bit (masked) that corresponding pin will not be changed
 * with write access and if read, will not be reflected in the updated pin.
 **********************************************************************/
void FIO_SetMask(uint8_t portNum, uint32_t bitValue, uint8_t maskValue)
{
    3d0c:	2804      	cmp	r0, #4
    3d0e:	d807      	bhi.n	3d20 <FIO_SetMask+0x14>
    3d10:	4b06      	ldr	r3, [pc, #24]	; (3d2c <FIO_SetMask+0x20>)
    3d12:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	LPC_GPIO_TypeDef *pFIO = GPIO_GetPointer(portNum);
	if(pFIO != NULL) {
    3d16:	b11b      	cbz	r3, 3d20 <FIO_SetMask+0x14>
		// Mask
		if (maskValue){
    3d18:	b11a      	cbz	r2, 3d22 <FIO_SetMask+0x16>
			pFIO->FIOMASK |= bitValue;
    3d1a:	691a      	ldr	r2, [r3, #16]
    3d1c:	4311      	orrs	r1, r2
		}
		// Un-mask
		else {
			pFIO->FIOMASK &= ~bitValue;
    3d1e:	6119      	str	r1, [r3, #16]
    3d20:	4770      	bx	lr
    3d22:	691a      	ldr	r2, [r3, #16]
    3d24:	ea22 0101 	bic.w	r1, r2, r1
    3d28:	e7f9      	b.n	3d1e <FIO_SetMask+0x12>
    3d2a:	bf00      	nop
    3d2c:	0000a69c 	.word	0x0000a69c

00003d30 <FIO_HalfWordSetDir>:
 *
 * Note: All remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void FIO_HalfWordSetDir(uint8_t portNum, uint8_t halfwordNum, uint16_t bitValue, uint8_t dir)
{
    3d30:	2804      	cmp	r0, #4
    3d32:	b510      	push	{r4, lr}
    3d34:	d80f      	bhi.n	3d56 <FIO_HalfWordSetDir+0x26>
    3d36:	4c0d      	ldr	r4, [pc, #52]	; (3d6c <FIO_HalfWordSetDir+0x3c>)
    3d38:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    3d3c:	6940      	ldr	r0, [r0, #20]
	GPIO_HalfWord_TypeDef *pFIO = FIO_HalfWordGetPointer(portNum);
	if(pFIO != NULL) {
    3d3e:	b150      	cbz	r0, 3d56 <FIO_HalfWordSetDir+0x26>
		// Output direction
		if (dir) {
    3d40:	b153      	cbz	r3, 3d58 <FIO_HalfWordSetDir+0x28>
			// Upper
			if(halfwordNum) {
    3d42:	b121      	cbz	r1, 3d4e <FIO_HalfWordSetDir+0x1e>
				pFIO->FIODIRU |= bitValue;
    3d44:	8843      	ldrh	r3, [r0, #2]
    3d46:	b29b      	uxth	r3, r3
    3d48:	431a      	orrs	r2, r3
		}
		// Input direction
		else {
			// Upper
			if(halfwordNum) {
				pFIO->FIODIRU &= ~bitValue;
    3d4a:	8042      	strh	r2, [r0, #2]
    3d4c:	bd10      	pop	{r4, pc}
				pFIO->FIODIRL |= bitValue;
    3d4e:	8803      	ldrh	r3, [r0, #0]
    3d50:	b29b      	uxth	r3, r3
    3d52:	431a      	orrs	r2, r3
			}
			// lower
			else {
				pFIO->FIODIRL &= ~bitValue;
    3d54:	8002      	strh	r2, [r0, #0]
    3d56:	bd10      	pop	{r4, pc}
    3d58:	43d2      	mvns	r2, r2
			if(halfwordNum) {
    3d5a:	b119      	cbz	r1, 3d64 <FIO_HalfWordSetDir+0x34>
				pFIO->FIODIRU &= ~bitValue;
    3d5c:	8843      	ldrh	r3, [r0, #2]
    3d5e:	b29b      	uxth	r3, r3
    3d60:	401a      	ands	r2, r3
    3d62:	e7f2      	b.n	3d4a <FIO_HalfWordSetDir+0x1a>
				pFIO->FIODIRL &= ~bitValue;
    3d64:	8803      	ldrh	r3, [r0, #0]
    3d66:	b29b      	uxth	r3, r3
    3d68:	401a      	ands	r2, r3
    3d6a:	e7f3      	b.n	3d54 <FIO_HalfWordSetDir+0x24>
    3d6c:	0000a69c 	.word	0x0000a69c

00003d70 <FIO_HalfWordSetMask>:
 * enables an access to the corresponding physical pin via a read or write access,
 * while value '1' on bit (masked) that corresponding pin will not be changed
 * with write access and if read, will not be reflected in the updated pin.
 **********************************************************************/
void FIO_HalfWordSetMask(uint8_t portNum, uint8_t halfwordNum, uint16_t bitValue, uint8_t maskValue)
{
    3d70:	2804      	cmp	r0, #4
    3d72:	b510      	push	{r4, lr}
    3d74:	d80f      	bhi.n	3d96 <FIO_HalfWordSetMask+0x26>
    3d76:	4c0d      	ldr	r4, [pc, #52]	; (3dac <FIO_HalfWordSetMask+0x3c>)
    3d78:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    3d7c:	6940      	ldr	r0, [r0, #20]
	GPIO_HalfWord_TypeDef *pFIO = FIO_HalfWordGetPointer(portNum);
	if(pFIO != NULL) {
    3d7e:	b150      	cbz	r0, 3d96 <FIO_HalfWordSetMask+0x26>
		// Mask
		if (maskValue){
    3d80:	b153      	cbz	r3, 3d98 <FIO_HalfWordSetMask+0x28>
			// Upper
			if(halfwordNum) {
    3d82:	b121      	cbz	r1, 3d8e <FIO_HalfWordSetMask+0x1e>
				pFIO->FIOMASKU |= bitValue;
    3d84:	8a43      	ldrh	r3, [r0, #18]
    3d86:	b29b      	uxth	r3, r3
    3d88:	431a      	orrs	r2, r3
		}
		// Un-mask
		else {
			// Upper
			if(halfwordNum) {
				pFIO->FIOMASKU &= ~bitValue;
    3d8a:	8242      	strh	r2, [r0, #18]
    3d8c:	bd10      	pop	{r4, pc}
				pFIO->FIOMASKL |= bitValue;
    3d8e:	8a03      	ldrh	r3, [r0, #16]
    3d90:	b29b      	uxth	r3, r3
    3d92:	431a      	orrs	r2, r3
			}
			// lower
			else {
				pFIO->FIOMASKL &= ~bitValue;
    3d94:	8202      	strh	r2, [r0, #16]
    3d96:	bd10      	pop	{r4, pc}
    3d98:	43d2      	mvns	r2, r2
			if(halfwordNum) {
    3d9a:	b119      	cbz	r1, 3da4 <FIO_HalfWordSetMask+0x34>
				pFIO->FIOMASKU &= ~bitValue;
    3d9c:	8a43      	ldrh	r3, [r0, #18]
    3d9e:	b29b      	uxth	r3, r3
    3da0:	401a      	ands	r2, r3
    3da2:	e7f2      	b.n	3d8a <FIO_HalfWordSetMask+0x1a>
				pFIO->FIOMASKL &= ~bitValue;
    3da4:	8a03      	ldrh	r3, [r0, #16]
    3da6:	b29b      	uxth	r3, r3
    3da8:	401a      	ands	r2, r3
    3daa:	e7f3      	b.n	3d94 <FIO_HalfWordSetMask+0x24>
    3dac:	0000a69c 	.word	0x0000a69c

00003db0 <FIO_HalfWordSetValue>:
 * not effect.
 * - For all remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void FIO_HalfWordSetValue(uint8_t portNum, uint8_t halfwordNum, uint16_t bitValue)
{
    3db0:	2804      	cmp	r0, #4
    3db2:	d808      	bhi.n	3dc6 <FIO_HalfWordSetValue+0x16>
    3db4:	4b04      	ldr	r3, [pc, #16]	; (3dc8 <FIO_HalfWordSetValue+0x18>)
    3db6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    3dba:	6943      	ldr	r3, [r0, #20]
	GPIO_HalfWord_TypeDef *pFIO = FIO_HalfWordGetPointer(portNum);
	if(pFIO != NULL) {
    3dbc:	b11b      	cbz	r3, 3dc6 <FIO_HalfWordSetValue+0x16>
		// Upper
		if(halfwordNum) {
    3dbe:	b109      	cbz	r1, 3dc4 <FIO_HalfWordSetValue+0x14>
			pFIO->FIOSETU = bitValue;
    3dc0:	835a      	strh	r2, [r3, #26]
    3dc2:	4770      	bx	lr
		}
		// lower
		else {
			pFIO->FIOSETL = bitValue;
    3dc4:	831a      	strh	r2, [r3, #24]
    3dc6:	4770      	bx	lr
    3dc8:	0000a69c 	.word	0x0000a69c

00003dcc <FIO_HalfWordClearValue>:
 * not effect.
 * - For all remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void FIO_HalfWordClearValue(uint8_t portNum, uint8_t halfwordNum, uint16_t bitValue)
{
    3dcc:	2804      	cmp	r0, #4
    3dce:	d808      	bhi.n	3de2 <FIO_HalfWordClearValue+0x16>
    3dd0:	4b04      	ldr	r3, [pc, #16]	; (3de4 <FIO_HalfWordClearValue+0x18>)
    3dd2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    3dd6:	6943      	ldr	r3, [r0, #20]
	GPIO_HalfWord_TypeDef *pFIO = FIO_HalfWordGetPointer(portNum);
	if(pFIO != NULL) {
    3dd8:	b11b      	cbz	r3, 3de2 <FIO_HalfWordClearValue+0x16>
		// Upper
		if(halfwordNum) {
    3dda:	b109      	cbz	r1, 3de0 <FIO_HalfWordClearValue+0x14>
			pFIO->FIOCLRU = bitValue;
    3ddc:	83da      	strh	r2, [r3, #30]
    3dde:	4770      	bx	lr
		}
		// lower
		else {
			pFIO->FIOCLRL = bitValue;
    3de0:	839a      	strh	r2, [r3, #28]
    3de2:	4770      	bx	lr
    3de4:	0000a69c 	.word	0x0000a69c

00003de8 <FIO_HalfWordReadValue>:
 * @return		Current value of FIO port pin of specified halfword.
 * Note: Return value contain state of each port pin (bit) on that FIO regardless
 * its direction is input or output.
 **********************************************************************/
uint16_t FIO_HalfWordReadValue(uint8_t portNum, uint8_t halfwordNum)
{
    3de8:	2804      	cmp	r0, #4
    3dea:	d80a      	bhi.n	3e02 <FIO_HalfWordReadValue+0x1a>
    3dec:	4b06      	ldr	r3, [pc, #24]	; (3e08 <FIO_HalfWordReadValue+0x20>)
    3dee:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    3df2:	6940      	ldr	r0, [r0, #20]
	GPIO_HalfWord_TypeDef *pFIO = FIO_HalfWordGetPointer(portNum);
	if(pFIO != NULL) {
    3df4:	b130      	cbz	r0, 3e04 <FIO_HalfWordReadValue+0x1c>
		// Upper
		if(halfwordNum) {
    3df6:	b111      	cbz	r1, 3dfe <FIO_HalfWordReadValue+0x16>
			return (pFIO->FIOPINU);
    3df8:	8ac0      	ldrh	r0, [r0, #22]
		}
		// lower
		else {
			return (pFIO->FIOPINL);
    3dfa:	b280      	uxth	r0, r0
    3dfc:	4770      	bx	lr
    3dfe:	8a80      	ldrh	r0, [r0, #20]
    3e00:	e7fb      	b.n	3dfa <FIO_HalfWordReadValue+0x12>
		}
	}
	return (0);
    3e02:	2000      	movs	r0, #0
}
    3e04:	4770      	bx	lr
    3e06:	bf00      	nop
    3e08:	0000a69c 	.word	0x0000a69c

00003e0c <FIO_ByteSetDir>:
 *
 * Note: All remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void FIO_ByteSetDir(uint8_t portNum, uint8_t byteNum, uint8_t bitValue, uint8_t dir)
{
    3e0c:	2804      	cmp	r0, #4
    3e0e:	b510      	push	{r4, lr}
    3e10:	d80a      	bhi.n	3e28 <FIO_ByteSetDir+0x1c>
    3e12:	4c09      	ldr	r4, [pc, #36]	; (3e38 <FIO_ByteSetDir+0x2c>)
    3e14:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    3e18:	6a80      	ldr	r0, [r0, #40]	; 0x28
	GPIO_Byte_TypeDef *pFIO = FIO_ByteGetPointer(portNum);
	if(pFIO != NULL) {
    3e1a:	b128      	cbz	r0, 3e28 <FIO_ByteSetDir+0x1c>
		// Output direction
		if (dir) {
    3e1c:	b12b      	cbz	r3, 3e2a <FIO_ByteSetDir+0x1e>
			if (byteNum <= 3) {
    3e1e:	2903      	cmp	r1, #3
    3e20:	d802      	bhi.n	3e28 <FIO_ByteSetDir+0x1c>
				pFIO->FIODIR[byteNum] |= bitValue;
    3e22:	5c43      	ldrb	r3, [r0, r1]
    3e24:	431a      	orrs	r2, r3
			}
		}
		// Input direction
		else {
			if (byteNum <= 3) {
				pFIO->FIODIR[byteNum] &= ~bitValue;
    3e26:	5442      	strb	r2, [r0, r1]
    3e28:	bd10      	pop	{r4, pc}
			if (byteNum <= 3) {
    3e2a:	2903      	cmp	r1, #3
    3e2c:	d8fc      	bhi.n	3e28 <FIO_ByteSetDir+0x1c>
				pFIO->FIODIR[byteNum] &= ~bitValue;
    3e2e:	5c43      	ldrb	r3, [r0, r1]
    3e30:	ea23 0202 	bic.w	r2, r3, r2
    3e34:	e7f7      	b.n	3e26 <FIO_ByteSetDir+0x1a>
    3e36:	bf00      	nop
    3e38:	0000a69c 	.word	0x0000a69c

00003e3c <FIO_ByteSetMask>:
 * enables an access to the corresponding physical pin via a read or write access,
 * while value '1' on bit (masked) that corresponding pin will not be changed
 * with write access and if read, will not be reflected in the updated pin.
 **********************************************************************/
void FIO_ByteSetMask(uint8_t portNum, uint8_t byteNum, uint8_t bitValue, uint8_t maskValue)
{
    3e3c:	2804      	cmp	r0, #4
    3e3e:	b510      	push	{r4, lr}
    3e40:	d80b      	bhi.n	3e5a <FIO_ByteSetMask+0x1e>
    3e42:	4c0a      	ldr	r4, [pc, #40]	; (3e6c <FIO_ByteSetMask+0x30>)
    3e44:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    3e48:	6a80      	ldr	r0, [r0, #40]	; 0x28
	GPIO_Byte_TypeDef *pFIO = FIO_ByteGetPointer(portNum);
	if(pFIO != NULL) {
    3e4a:	b130      	cbz	r0, 3e5a <FIO_ByteSetMask+0x1e>
		// Mask
		if (maskValue) {
    3e4c:	b133      	cbz	r3, 3e5c <FIO_ByteSetMask+0x20>
			if (byteNum <= 3) {
    3e4e:	2903      	cmp	r1, #3
    3e50:	d803      	bhi.n	3e5a <FIO_ByteSetMask+0x1e>
				pFIO->FIOMASK[byteNum] |= bitValue;
    3e52:	4408      	add	r0, r1
    3e54:	7c03      	ldrb	r3, [r0, #16]
    3e56:	431a      	orrs	r2, r3
			}
		}
		// Un-mask
		else {
			if (byteNum <= 3) {
				pFIO->FIOMASK[byteNum] &= ~bitValue;
    3e58:	7402      	strb	r2, [r0, #16]
    3e5a:	bd10      	pop	{r4, pc}
			if (byteNum <= 3) {
    3e5c:	2903      	cmp	r1, #3
    3e5e:	d8fc      	bhi.n	3e5a <FIO_ByteSetMask+0x1e>
				pFIO->FIOMASK[byteNum] &= ~bitValue;
    3e60:	4408      	add	r0, r1
    3e62:	7c03      	ldrb	r3, [r0, #16]
    3e64:	ea23 0202 	bic.w	r2, r3, r2
    3e68:	e7f6      	b.n	3e58 <FIO_ByteSetMask+0x1c>
    3e6a:	bf00      	nop
    3e6c:	0000a69c 	.word	0x0000a69c

00003e70 <FIO_ByteSetValue>:
 * not effect.
 * - For all remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void FIO_ByteSetValue(uint8_t portNum, uint8_t byteNum, uint8_t bitValue)
{
    3e70:	2804      	cmp	r0, #4
    3e72:	b510      	push	{r4, lr}
    3e74:	d808      	bhi.n	3e88 <FIO_ByteSetValue+0x18>
    3e76:	4c05      	ldr	r4, [pc, #20]	; (3e8c <FIO_ByteSetValue+0x1c>)
    3e78:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    3e7c:	6a83      	ldr	r3, [r0, #40]	; 0x28
	GPIO_Byte_TypeDef *pFIO = FIO_ByteGetPointer(portNum);
	if (pFIO != NULL) {
    3e7e:	b11b      	cbz	r3, 3e88 <FIO_ByteSetValue+0x18>
		if (byteNum <= 3){
    3e80:	2903      	cmp	r1, #3
			pFIO->FIOSET[byteNum] = bitValue;
    3e82:	bf9c      	itt	ls
    3e84:	185b      	addls	r3, r3, r1
    3e86:	761a      	strbls	r2, [r3, #24]
    3e88:	bd10      	pop	{r4, pc}
    3e8a:	bf00      	nop
    3e8c:	0000a69c 	.word	0x0000a69c

00003e90 <FIO_ByteClearValue>:
 * not effect.
 * - For all remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void FIO_ByteClearValue(uint8_t portNum, uint8_t byteNum, uint8_t bitValue)
{
    3e90:	2804      	cmp	r0, #4
    3e92:	b510      	push	{r4, lr}
    3e94:	d808      	bhi.n	3ea8 <FIO_ByteClearValue+0x18>
    3e96:	4c05      	ldr	r4, [pc, #20]	; (3eac <FIO_ByteClearValue+0x1c>)
    3e98:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    3e9c:	6a83      	ldr	r3, [r0, #40]	; 0x28
	GPIO_Byte_TypeDef *pFIO = FIO_ByteGetPointer(portNum);
	if (pFIO != NULL) {
    3e9e:	b11b      	cbz	r3, 3ea8 <FIO_ByteClearValue+0x18>
		if (byteNum <= 3){
    3ea0:	2903      	cmp	r1, #3
			pFIO->FIOCLR[byteNum] = bitValue;
    3ea2:	bf9c      	itt	ls
    3ea4:	185b      	addls	r3, r3, r1
    3ea6:	771a      	strbls	r2, [r3, #28]
    3ea8:	bd10      	pop	{r4, pc}
    3eaa:	bf00      	nop
    3eac:	0000a69c 	.word	0x0000a69c

00003eb0 <FIO_ByteReadValue>:
 * @return		Current value of FIO port pin of specified byte part.
 * Note: Return value contain state of each port pin (bit) on that FIO regardless
 * its direction is input or output.
 **********************************************************************/
uint8_t FIO_ByteReadValue(uint8_t portNum, uint8_t byteNum)
{
    3eb0:	2804      	cmp	r0, #4
    3eb2:	d80a      	bhi.n	3eca <FIO_ByteReadValue+0x1a>
    3eb4:	4b06      	ldr	r3, [pc, #24]	; (3ed0 <FIO_ByteReadValue+0x20>)
    3eb6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    3eba:	6a98      	ldr	r0, [r3, #40]	; 0x28
	GPIO_Byte_TypeDef *pFIO = FIO_ByteGetPointer(portNum);
	if (pFIO != NULL) {
    3ebc:	b130      	cbz	r0, 3ecc <FIO_ByteReadValue+0x1c>
		if (byteNum <= 3){
    3ebe:	2903      	cmp	r1, #3
    3ec0:	d803      	bhi.n	3eca <FIO_ByteReadValue+0x1a>
			return (pFIO->FIOPIN[byteNum]);
    3ec2:	4408      	add	r0, r1
    3ec4:	7d00      	ldrb	r0, [r0, #20]
    3ec6:	b2c0      	uxtb	r0, r0
    3ec8:	4770      	bx	lr
		}
	}
	return (0);
    3eca:	2000      	movs	r0, #0
}
    3ecc:	4770      	bx	lr
    3ece:	bf00      	nop
    3ed0:	0000a69c 	.word	0x0000a69c

00003ed4 <PWM_GetIntStatus>:
IntStatus PWM_GetIntStatus(LPC_PWM_TypeDef *PWMx, uint32_t IntFlag)
{
	CHECK_PARAM(PARAM_PWMx(PWMx));
	CHECK_PARAM(PARAM_PWM_INTSTAT(IntFlag));

	return ((PWMx->IR & IntFlag) ? SET : RESET);
    3ed4:	6803      	ldr	r3, [r0, #0]
    3ed6:	420b      	tst	r3, r1
}
    3ed8:	bf14      	ite	ne
    3eda:	2001      	movne	r0, #1
    3edc:	2000      	moveq	r0, #0
    3ede:	4770      	bx	lr

00003ee0 <PWM_ClearIntPending>:
 **********************************************************************/
void PWM_ClearIntPending(LPC_PWM_TypeDef *PWMx, uint32_t IntFlag)
{
	CHECK_PARAM(PARAM_PWMx(PWMx));
	CHECK_PARAM(PARAM_PWM_INTSTAT(IntFlag));
	PWMx->IR = IntFlag;
    3ee0:	6001      	str	r1, [r0, #0]
    3ee2:	4770      	bx	lr

00003ee4 <PWM_ConfigStructInit>:
	CHECK_PARAM(PARAM_PWM_TC_MODE(PWMTimerCounterMode));

	pTimeCfg = (PWM_TIMERCFG_Type *) PWM_InitStruct;
	pCounterCfg = (PWM_COUNTERCFG_Type *) PWM_InitStruct;

	if (PWMTimerCounterMode == PWM_MODE_TIMER )
    3ee4:	b918      	cbnz	r0, 3eee <PWM_ConfigStructInit+0xa>
	{
		pTimeCfg->PrescaleOption = PWM_TIMER_PRESCALE_USVAL;
    3ee6:	2301      	movs	r3, #1
    3ee8:	700b      	strb	r3, [r1, #0]
		pTimeCfg->PrescaleValue = 1;
    3eea:	604b      	str	r3, [r1, #4]
    3eec:	4770      	bx	lr
	}
	else if (PWMTimerCounterMode == PWM_MODE_COUNTER)
    3eee:	2801      	cmp	r0, #1
	{
		pCounterCfg->CountInputSelect = PWM_COUNTER_PCAP1_0;
    3ef0:	bf02      	ittt	eq
    3ef2:	2300      	moveq	r3, #0
		pCounterCfg->CounterOption = PWM_COUNTER_RISING;
    3ef4:	7008      	strbeq	r0, [r1, #0]
		pCounterCfg->CountInputSelect = PWM_COUNTER_PCAP1_0;
    3ef6:	704b      	strbeq	r3, [r1, #1]
    3ef8:	4770      	bx	lr

00003efa <PWM_Init>:
 * @return 		None
 * Note: PWM_ConfigStruct pointer will be assigned to corresponding structure
 * 		(PWM_TIMERCFG_Type or PWM_COUNTERCFG_Type) due to PWMTimerCounterMode.
 **********************************************************************/
void PWM_Init(LPC_PWM_TypeDef *PWMx, uint32_t PWMTimerCounterMode, void *PWM_ConfigStruct)
{
    3efa:	b570      	push	{r4, r5, r6, lr}
    3efc:	4604      	mov	r4, r0
    3efe:	460e      	mov	r6, r1

	pTimeCfg = (PWM_TIMERCFG_Type *)PWM_ConfigStruct;
	pCounterCfg = (PWM_COUNTERCFG_Type *)PWM_ConfigStruct;


	CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCPWM1, ENABLE);
    3f00:	2040      	movs	r0, #64	; 0x40
    3f02:	2101      	movs	r1, #1
{
    3f04:	4615      	mov	r5, r2
	CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCPWM1, ENABLE);
    3f06:	f7ff fdd3 	bl	3ab0 <CLKPWR_ConfigPPWR>
	CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_PWM1, CLKPWR_PCLKSEL_CCLK_DIV_4);
    3f0a:	2100      	movs	r1, #0
    3f0c:	200c      	movs	r0, #12
    3f0e:	f7ff fd85 	bl	3a1c <CLKPWR_SetPCLKDiv>
	// Get peripheral clock of PWM1
	clkdlycnt = (uint64_t) CLKPWR_GetPCLK (CLKPWR_PCLKSEL_PWM1);
    3f12:	200c      	movs	r0, #12
    3f14:	f7ff fdb8 	bl	3a88 <CLKPWR_GetPCLK>


	// Clear all interrupts pending
	PWMx->IR = 0xFF & PWM_IR_BITMASK;
    3f18:	233f      	movs	r3, #63	; 0x3f
    3f1a:	6023      	str	r3, [r4, #0]
	PWMx->TCR = 0x00;
    3f1c:	2300      	movs	r3, #0
    3f1e:	6063      	str	r3, [r4, #4]
	PWMx->CTCR = 0x00;
    3f20:	6723      	str	r3, [r4, #112]	; 0x70
	PWMx->MCR = 0x00;
    3f22:	6163      	str	r3, [r4, #20]
	PWMx->CCR = 0x00;
    3f24:	62a3      	str	r3, [r4, #40]	; 0x28
	PWMx->PCR = 0x00;
    3f26:	64e3      	str	r3, [r4, #76]	; 0x4c
	PWMx->LER = 0x00;
    3f28:	6523      	str	r3, [r4, #80]	; 0x50

	if (PWMTimerCounterMode == PWM_MODE_TIMER)
    3f2a:	b976      	cbnz	r6, 3f4a <PWM_Init+0x50>
	{
		CHECK_PARAM(PARAM_PWM_TIMER_PRESCALE(pTimeCfg->PrescaleOption));

		/* Absolute prescale value */
		if (pTimeCfg->PrescaleOption == PWM_TIMER_PRESCALE_TICKVAL)
    3f2c:	782b      	ldrb	r3, [r5, #0]
    3f2e:	6869      	ldr	r1, [r5, #4]
    3f30:	b913      	cbnz	r3, 3f38 <PWM_Init+0x3e>
		{
			PWMx->PR   = pTimeCfg->PrescaleValue - 1;
    3f32:	3901      	subs	r1, #1
    3f34:	60e1      	str	r1, [r4, #12]
    3f36:	bd70      	pop	{r4, r5, r6, pc}
		}
		/* uSecond prescale value */
		else
		{
			clkdlycnt = (clkdlycnt * pTimeCfg->PrescaleValue) / 1000000;
    3f38:	4a0b      	ldr	r2, [pc, #44]	; (3f68 <PWM_Init+0x6e>)
    3f3a:	2300      	movs	r3, #0
    3f3c:	fba0 0101 	umull	r0, r1, r0, r1
    3f40:	f001 f9dc 	bl	52fc <__aeabi_uldivmod>
			PWMx->PR = ((uint32_t) clkdlycnt) - 1;
    3f44:	3801      	subs	r0, #1
    3f46:	60e0      	str	r0, [r4, #12]
    3f48:	bd70      	pop	{r4, r5, r6, pc}
		}

	}
	else if (PWMTimerCounterMode == PWM_MODE_COUNTER)
    3f4a:	2e01      	cmp	r6, #1
    3f4c:	d10a      	bne.n	3f64 <PWM_Init+0x6a>
	{
		CHECK_PARAM(PARAM_PWM_COUNTER_INPUTSEL(pCounterCfg->CountInputSelect));
		CHECK_PARAM(PARAM_PWM_COUNTER_EDGE(pCounterCfg->CounterOption));

		PWMx->CTCR |= (PWM_CTCR_MODE((uint32_t)pCounterCfg->CounterOption)) \
						| (PWM_CTCR_SELECT_INPUT((uint32_t)pCounterCfg->CountInputSelect));
    3f4e:	786b      	ldrb	r3, [r5, #1]
		PWMx->CTCR |= (PWM_CTCR_MODE((uint32_t)pCounterCfg->CounterOption)) \
    3f50:	782a      	ldrb	r2, [r5, #0]
    3f52:	6f21      	ldr	r1, [r4, #112]	; 0x70
						| (PWM_CTCR_SELECT_INPUT((uint32_t)pCounterCfg->CountInputSelect));
    3f54:	009b      	lsls	r3, r3, #2
		PWMx->CTCR |= (PWM_CTCR_MODE((uint32_t)pCounterCfg->CounterOption)) \
    3f56:	f002 0203 	and.w	r2, r2, #3
						| (PWM_CTCR_SELECT_INPUT((uint32_t)pCounterCfg->CountInputSelect));
    3f5a:	f003 030c 	and.w	r3, r3, #12
		PWMx->CTCR |= (PWM_CTCR_MODE((uint32_t)pCounterCfg->CounterOption)) \
    3f5e:	430a      	orrs	r2, r1
    3f60:	4313      	orrs	r3, r2
    3f62:	6723      	str	r3, [r4, #112]	; 0x70
    3f64:	bd70      	pop	{r4, r5, r6, pc}
    3f66:	bf00      	nop
    3f68:	000f4240 	.word	0x000f4240

00003f6c <PWM_DeInit>:
void PWM_DeInit (LPC_PWM_TypeDef *PWMx)
{
	CHECK_PARAM(PARAM_PWMx(PWMx));

	// Disable PWM control (timer, counter and PWM)
	PWMx->TCR = 0x00;
    3f6c:	2100      	movs	r1, #0
    3f6e:	6041      	str	r1, [r0, #4]
	CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCPWM1, DISABLE);
    3f70:	2040      	movs	r0, #64	; 0x40
    3f72:	f7ff bd9d 	b.w	3ab0 <CLKPWR_ConfigPPWR>

00003f76 <PWM_Cmd>:
	CHECK_PARAM(PARAM_PWMx(PWMx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
	{
		PWMx->TCR	|=  PWM_TCR_PWM_ENABLE;
    3f76:	6843      	ldr	r3, [r0, #4]
	if (NewState == ENABLE)
    3f78:	2901      	cmp	r1, #1
		PWMx->TCR	|=  PWM_TCR_PWM_ENABLE;
    3f7a:	bf0c      	ite	eq
    3f7c:	f043 0308 	orreq.w	r3, r3, #8
	}
	else
	{
		PWMx->TCR &= (~PWM_TCR_PWM_ENABLE) & PWM_TCR_BITMASK;
    3f80:	f003 0303 	andne.w	r3, r3, #3
    3f84:	6043      	str	r3, [r0, #4]
    3f86:	4770      	bx	lr

00003f88 <PWM_CounterCmd>:
{
	CHECK_PARAM(PARAM_PWMx(PWMx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
	if (NewState == ENABLE)
	{
		PWMx->TCR	|=  PWM_TCR_COUNTER_ENABLE;
    3f88:	6843      	ldr	r3, [r0, #4]
	if (NewState == ENABLE)
    3f8a:	2901      	cmp	r1, #1
		PWMx->TCR	|=  PWM_TCR_COUNTER_ENABLE;
    3f8c:	bf0c      	ite	eq
    3f8e:	f043 0301 	orreq.w	r3, r3, #1
	}
	else
	{
		PWMx->TCR &= (~PWM_TCR_COUNTER_ENABLE) & PWM_TCR_BITMASK;
    3f92:	f003 030a 	andne.w	r3, r3, #10
    3f96:	6043      	str	r3, [r0, #4]
    3f98:	4770      	bx	lr

00003f9a <PWM_ResetCounter>:
 * @return 		None
 **********************************************************************/
void PWM_ResetCounter(LPC_PWM_TypeDef *PWMx)
{
	CHECK_PARAM(PARAM_PWMx(PWMx));
	PWMx->TCR |= PWM_TCR_COUNTER_RESET;
    3f9a:	6843      	ldr	r3, [r0, #4]
    3f9c:	f043 0302 	orr.w	r3, r3, #2
    3fa0:	6043      	str	r3, [r0, #4]
	PWMx->TCR &= (~PWM_TCR_COUNTER_RESET) & PWM_TCR_BITMASK;
    3fa2:	6843      	ldr	r3, [r0, #4]
    3fa4:	f003 0309 	and.w	r3, r3, #9
    3fa8:	6043      	str	r3, [r0, #4]
    3faa:	4770      	bx	lr

00003fac <PWM_ConfigMatch>:
*                    that contains the configuration information for the
*                    specified PWM match function.
 * @return 		None
 **********************************************************************/
void PWM_ConfigMatch(LPC_PWM_TypeDef *PWMx, PWM_MATCHCFG_Type *PWM_MatchConfigStruct)
{
    3fac:	b530      	push	{r4, r5, lr}
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(PWM_MatchConfigStruct->IntOnMatch));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(PWM_MatchConfigStruct->ResetOnMatch));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(PWM_MatchConfigStruct->StopOnMatch));

	//interrupt on MRn
	if (PWM_MatchConfigStruct->IntOnMatch == ENABLE)
    3fae:	784a      	ldrb	r2, [r1, #1]
    3fb0:	780b      	ldrb	r3, [r1, #0]
    3fb2:	2a01      	cmp	r2, #1
    3fb4:	d132      	bne.n	401c <PWM_ConfigMatch+0x70>
	{
		PWMx->MCR |= PWM_MCR_INT_ON_MATCH(PWM_MatchConfigStruct->MatchChannel);
    3fb6:	005c      	lsls	r4, r3, #1
    3fb8:	f004 040e 	and.w	r4, r4, #14
    3fbc:	f003 0307 	and.w	r3, r3, #7
    3fc0:	6945      	ldr	r5, [r0, #20]
    3fc2:	4423      	add	r3, r4
    3fc4:	409a      	lsls	r2, r3
    3fc6:	432a      	orrs	r2, r5
    3fc8:	6142      	str	r2, [r0, #20]
		PWMx->MCR &= (~PWM_MCR_INT_ON_MATCH(PWM_MatchConfigStruct->MatchChannel)) \
					& PWM_MCR_BITMASK;
	}

	//reset on MRn
	if (PWM_MatchConfigStruct->ResetOnMatch == ENABLE)
    3fca:	78cc      	ldrb	r4, [r1, #3]
    3fcc:	780b      	ldrb	r3, [r1, #0]
    3fce:	2c01      	cmp	r4, #1
    3fd0:	d133      	bne.n	403a <PWM_ConfigMatch+0x8e>
	{
		PWMx->MCR |= PWM_MCR_RESET_ON_MATCH(PWM_MatchConfigStruct->MatchChannel);
    3fd2:	005a      	lsls	r2, r3, #1
    3fd4:	f002 020e 	and.w	r2, r2, #14
    3fd8:	f003 0307 	and.w	r3, r3, #7
    3fdc:	4413      	add	r3, r2
    3fde:	6945      	ldr	r5, [r0, #20]
    3fe0:	3301      	adds	r3, #1
    3fe2:	fa04 f303 	lsl.w	r3, r4, r3
    3fe6:	432b      	orrs	r3, r5
	}
	else
	{
		PWMx->MCR &= (~PWM_MCR_RESET_ON_MATCH(PWM_MatchConfigStruct->MatchChannel)) \
    3fe8:	6143      	str	r3, [r0, #20]
    3fea:	780b      	ldrb	r3, [r1, #0]
					& PWM_MCR_BITMASK;
	}

	//stop on MRn
	if (PWM_MatchConfigStruct->StopOnMatch == ENABLE)
    3fec:	788c      	ldrb	r4, [r1, #2]
	{
		PWMx->MCR |= PWM_MCR_STOP_ON_MATCH(PWM_MatchConfigStruct->MatchChannel);
    3fee:	005a      	lsls	r2, r3, #1
	if (PWM_MatchConfigStruct->StopOnMatch == ENABLE)
    3ff0:	2c01      	cmp	r4, #1
		PWMx->MCR |= PWM_MCR_STOP_ON_MATCH(PWM_MatchConfigStruct->MatchChannel);
    3ff2:	f002 020e 	and.w	r2, r2, #14
    3ff6:	f003 0307 	and.w	r3, r3, #7
    3ffa:	4413      	add	r3, r2
	}
	else
	{
		PWMx->MCR &= (~PWM_MCR_STOP_ON_MATCH(PWM_MatchConfigStruct->MatchChannel)) \
    3ffc:	bf18      	it	ne
    3ffe:	2201      	movne	r2, #1
		PWMx->MCR |= PWM_MCR_STOP_ON_MATCH(PWM_MatchConfigStruct->MatchChannel);
    4000:	6941      	ldr	r1, [r0, #20]
    4002:	f103 0302 	add.w	r3, r3, #2
    4006:	bf0d      	iteet	eq
    4008:	fa04 f303 	lsleq.w	r3, r4, r3
		PWMx->MCR &= (~PWM_MCR_STOP_ON_MATCH(PWM_MatchConfigStruct->MatchChannel)) \
    400c:	409a      	lslne	r2, r3
    400e:	f3c1 0314 	ubfxne	r3, r1, #0, #21
		PWMx->MCR |= PWM_MCR_STOP_ON_MATCH(PWM_MatchConfigStruct->MatchChannel);
    4012:	430b      	orreq	r3, r1
		PWMx->MCR &= (~PWM_MCR_STOP_ON_MATCH(PWM_MatchConfigStruct->MatchChannel)) \
    4014:	bf18      	it	ne
    4016:	4393      	bicne	r3, r2
    4018:	6143      	str	r3, [r0, #20]
    401a:	bd30      	pop	{r4, r5, pc}
		PWMx->MCR &= (~PWM_MCR_INT_ON_MATCH(PWM_MatchConfigStruct->MatchChannel)) \
    401c:	005c      	lsls	r4, r3, #1
    401e:	f004 040e 	and.w	r4, r4, #14
    4022:	f003 0307 	and.w	r3, r3, #7
    4026:	4423      	add	r3, r4
    4028:	2401      	movs	r4, #1
    402a:	6942      	ldr	r2, [r0, #20]
    402c:	409c      	lsls	r4, r3
    402e:	f3c2 0314 	ubfx	r3, r2, #0, #21
    4032:	ea23 0304 	bic.w	r3, r3, r4
    4036:	6143      	str	r3, [r0, #20]
    4038:	e7c7      	b.n	3fca <PWM_ConfigMatch+0x1e>
		PWMx->MCR &= (~PWM_MCR_RESET_ON_MATCH(PWM_MatchConfigStruct->MatchChannel)) \
    403a:	005a      	lsls	r2, r3, #1
    403c:	f002 020e 	and.w	r2, r2, #14
    4040:	f003 0307 	and.w	r3, r3, #7
    4044:	4413      	add	r3, r2
    4046:	2201      	movs	r2, #1
    4048:	6944      	ldr	r4, [r0, #20]
    404a:	3301      	adds	r3, #1
    404c:	409a      	lsls	r2, r3
    404e:	f3c4 0314 	ubfx	r3, r4, #0, #21
    4052:	ea23 0302 	bic.w	r3, r3, r2
    4056:	e7c7      	b.n	3fe8 <PWM_ConfigMatch+0x3c>

00004058 <PWM_ConfigCapture>:
*                    that contains the configuration information for the
*                    specified PWM capture input function.
 * @return 		None
 **********************************************************************/
void PWM_ConfigCapture(LPC_PWM_TypeDef *PWMx, PWM_CAPTURECFG_Type *PWM_CaptureConfigStruct)
{
    4058:	b530      	push	{r4, r5, lr}
	CHECK_PARAM(PARAM_PWM1_CAPTURE_CHANNEL(PWM_CaptureConfigStruct->CaptureChannel));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(PWM_CaptureConfigStruct->FallingEdge));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(PWM_CaptureConfigStruct->IntOnCaption));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(PWM_CaptureConfigStruct->RisingEdge));

	if (PWM_CaptureConfigStruct->RisingEdge == ENABLE)
    405a:	784a      	ldrb	r2, [r1, #1]
    405c:	780b      	ldrb	r3, [r1, #0]
    405e:	2a01      	cmp	r2, #1
    4060:	d133      	bne.n	40ca <PWM_ConfigCapture+0x72>
	{
		PWMx->CCR |= PWM_CCR_CAP_RISING(PWM_CaptureConfigStruct->CaptureChannel);
    4062:	005c      	lsls	r4, r3, #1
    4064:	f004 0404 	and.w	r4, r4, #4
    4068:	f003 0301 	and.w	r3, r3, #1
    406c:	6a85      	ldr	r5, [r0, #40]	; 0x28
    406e:	4323      	orrs	r3, r4
    4070:	409a      	lsls	r2, r3
    4072:	432a      	orrs	r2, r5
    4074:	6282      	str	r2, [r0, #40]	; 0x28
	{
		PWMx->CCR &= (~PWM_CCR_CAP_RISING(PWM_CaptureConfigStruct->CaptureChannel)) \
					& PWM_CCR_BITMASK;
	}

	if (PWM_CaptureConfigStruct->FallingEdge == ENABLE)
    4076:	788c      	ldrb	r4, [r1, #2]
    4078:	780b      	ldrb	r3, [r1, #0]
    407a:	2c01      	cmp	r4, #1
    407c:	d134      	bne.n	40e8 <PWM_ConfigCapture+0x90>
	{
		PWMx->CCR |= PWM_CCR_CAP_FALLING(PWM_CaptureConfigStruct->CaptureChannel);
    407e:	005a      	lsls	r2, r3, #1
    4080:	f002 0204 	and.w	r2, r2, #4
    4084:	f003 0301 	and.w	r3, r3, #1
    4088:	4313      	orrs	r3, r2
    408a:	6a85      	ldr	r5, [r0, #40]	; 0x28
    408c:	3301      	adds	r3, #1
    408e:	fa04 f303 	lsl.w	r3, r4, r3
    4092:	432b      	orrs	r3, r5
	}
	else
	{
		PWMx->CCR &= (~PWM_CCR_CAP_FALLING(PWM_CaptureConfigStruct->CaptureChannel)) \
    4094:	6283      	str	r3, [r0, #40]	; 0x28
    4096:	780b      	ldrb	r3, [r1, #0]
					& PWM_CCR_BITMASK;
	}

	if (PWM_CaptureConfigStruct->IntOnCaption == ENABLE)
    4098:	78cc      	ldrb	r4, [r1, #3]
	{
		PWMx->CCR |= PWM_CCR_INT_ON_CAP(PWM_CaptureConfigStruct->CaptureChannel);
    409a:	005a      	lsls	r2, r3, #1
	if (PWM_CaptureConfigStruct->IntOnCaption == ENABLE)
    409c:	2c01      	cmp	r4, #1
		PWMx->CCR |= PWM_CCR_INT_ON_CAP(PWM_CaptureConfigStruct->CaptureChannel);
    409e:	f002 0204 	and.w	r2, r2, #4
    40a2:	f003 0301 	and.w	r3, r3, #1
    40a6:	ea43 0302 	orr.w	r3, r3, r2
	}
	else
	{
		PWMx->CCR &= (~PWM_CCR_INT_ON_CAP(PWM_CaptureConfigStruct->CaptureChannel)) \
    40aa:	bf18      	it	ne
    40ac:	2201      	movne	r2, #1
		PWMx->CCR |= PWM_CCR_INT_ON_CAP(PWM_CaptureConfigStruct->CaptureChannel);
    40ae:	6a81      	ldr	r1, [r0, #40]	; 0x28
    40b0:	f103 0302 	add.w	r3, r3, #2
    40b4:	bf0d      	iteet	eq
    40b6:	fa04 f303 	lsleq.w	r3, r4, r3
		PWMx->CCR &= (~PWM_CCR_INT_ON_CAP(PWM_CaptureConfigStruct->CaptureChannel)) \
    40ba:	409a      	lslne	r2, r3
    40bc:	f001 033f 	andne.w	r3, r1, #63	; 0x3f
		PWMx->CCR |= PWM_CCR_INT_ON_CAP(PWM_CaptureConfigStruct->CaptureChannel);
    40c0:	430b      	orreq	r3, r1
		PWMx->CCR &= (~PWM_CCR_INT_ON_CAP(PWM_CaptureConfigStruct->CaptureChannel)) \
    40c2:	bf18      	it	ne
    40c4:	4393      	bicne	r3, r2
    40c6:	6283      	str	r3, [r0, #40]	; 0x28
    40c8:	bd30      	pop	{r4, r5, pc}
		PWMx->CCR &= (~PWM_CCR_CAP_RISING(PWM_CaptureConfigStruct->CaptureChannel)) \
    40ca:	005c      	lsls	r4, r3, #1
    40cc:	f004 0404 	and.w	r4, r4, #4
    40d0:	f003 0301 	and.w	r3, r3, #1
    40d4:	4323      	orrs	r3, r4
    40d6:	2401      	movs	r4, #1
    40d8:	6a82      	ldr	r2, [r0, #40]	; 0x28
    40da:	409c      	lsls	r4, r3
    40dc:	f002 033f 	and.w	r3, r2, #63	; 0x3f
    40e0:	ea23 0304 	bic.w	r3, r3, r4
    40e4:	6283      	str	r3, [r0, #40]	; 0x28
    40e6:	e7c6      	b.n	4076 <PWM_ConfigCapture+0x1e>
		PWMx->CCR &= (~PWM_CCR_CAP_FALLING(PWM_CaptureConfigStruct->CaptureChannel)) \
    40e8:	005a      	lsls	r2, r3, #1
    40ea:	f002 0204 	and.w	r2, r2, #4
    40ee:	f003 0301 	and.w	r3, r3, #1
    40f2:	4313      	orrs	r3, r2
    40f4:	2201      	movs	r2, #1
    40f6:	6a84      	ldr	r4, [r0, #40]	; 0x28
    40f8:	3301      	adds	r3, #1
    40fa:	409a      	lsls	r2, r3
    40fc:	f004 033f 	and.w	r3, r4, #63	; 0x3f
    4100:	ea23 0302 	bic.w	r3, r3, r2
    4104:	e7c6      	b.n	4094 <PWM_ConfigCapture+0x3c>

00004106 <PWM_GetCaptureValue>:
uint32_t PWM_GetCaptureValue(LPC_PWM_TypeDef *PWMx, uint8_t CaptureChannel)
{
	CHECK_PARAM(PARAM_PWMx(PWMx));
	CHECK_PARAM(PARAM_PWM1_CAPTURE_CHANNEL(CaptureChannel));

	switch (CaptureChannel)
    4106:	b119      	cbz	r1, 4110 <PWM_GetCaptureValue+0xa>
    4108:	2901      	cmp	r1, #1
    410a:	d003      	beq.n	4114 <PWM_GetCaptureValue+0xe>

	case 1:
		return PWMx->CR1;

	default:
		return (0);
    410c:	2000      	movs	r0, #0
	}
}
    410e:	4770      	bx	lr
		return PWMx->CR0;
    4110:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    4112:	4770      	bx	lr
		return PWMx->CR1;
    4114:	6b00      	ldr	r0, [r0, #48]	; 0x30
    4116:	4770      	bx	lr

00004118 <PWM_MatchUpdate>:
 * 					this channel on next reset by a PWM Match event.
 * @return		None
 *********************************************************************/
void PWM_MatchUpdate(LPC_PWM_TypeDef *PWMx, uint8_t MatchChannel, \
					uint32_t MatchValue, uint8_t UpdateType)
{
    4118:	b510      	push	{r4, lr}
	CHECK_PARAM(PARAM_PWMx(PWMx));
	CHECK_PARAM(PARAM_PWM1_MATCH_CHANNEL(MatchChannel));
	CHECK_PARAM(PARAM_PWM_MATCH_UPDATE(UpdateType));

	switch (MatchChannel)
    411a:	2906      	cmp	r1, #6
    411c:	d806      	bhi.n	412c <PWM_MatchUpdate+0x14>
    411e:	e8df f001 	tbb	[pc, r1]
    4122:	1904      	.short	0x1904
    4124:	211f1d1b 	.word	0x211f1d1b
    4128:	23          	.byte	0x23
    4129:	00          	.byte	0x00
	{
	case 0:
		PWMx->MR0 = MatchValue;
    412a:	6182      	str	r2, [r0, #24]
		PWMx->MR6 = MatchValue;
		break;
	}

	// Write Latch register
	PWMx->LER |= PWM_LER_EN_MATCHn_LATCH(MatchChannel);
    412c:	2906      	cmp	r1, #6
    412e:	bf94      	ite	ls
    4130:	2201      	movls	r2, #1
    4132:	2100      	movhi	r1, #0
    4134:	6d04      	ldr	r4, [r0, #80]	; 0x50
    4136:	bf98      	it	ls
    4138:	fa02 f101 	lslls.w	r1, r2, r1
    413c:	4321      	orrs	r1, r4
    413e:	6501      	str	r1, [r0, #80]	; 0x50

	// In case of update now
	if (UpdateType == PWM_MATCH_UPDATE_NOW)
    4140:	b93b      	cbnz	r3, 4152 <PWM_MatchUpdate+0x3a>
	{
		PWMx->TCR |= PWM_TCR_COUNTER_RESET;
    4142:	6843      	ldr	r3, [r0, #4]
    4144:	f043 0302 	orr.w	r3, r3, #2
    4148:	6043      	str	r3, [r0, #4]
		PWMx->TCR &= (~PWM_TCR_COUNTER_RESET) & PWM_TCR_BITMASK;
    414a:	6843      	ldr	r3, [r0, #4]
    414c:	f003 0309 	and.w	r3, r3, #9
    4150:	6043      	str	r3, [r0, #4]
    4152:	bd10      	pop	{r4, pc}
		PWMx->MR1 = MatchValue;
    4154:	61c2      	str	r2, [r0, #28]
		break;
    4156:	e7e9      	b.n	412c <PWM_MatchUpdate+0x14>
		PWMx->MR2 = MatchValue;
    4158:	6202      	str	r2, [r0, #32]
		break;
    415a:	e7e7      	b.n	412c <PWM_MatchUpdate+0x14>
		PWMx->MR3 = MatchValue;
    415c:	6242      	str	r2, [r0, #36]	; 0x24
		break;
    415e:	e7e5      	b.n	412c <PWM_MatchUpdate+0x14>
		PWMx->MR4 = MatchValue;
    4160:	6402      	str	r2, [r0, #64]	; 0x40
		break;
    4162:	e7e3      	b.n	412c <PWM_MatchUpdate+0x14>
		PWMx->MR5 = MatchValue;
    4164:	6442      	str	r2, [r0, #68]	; 0x44
		break;
    4166:	e7e1      	b.n	412c <PWM_MatchUpdate+0x14>
		PWMx->MR6 = MatchValue;
    4168:	6482      	str	r2, [r0, #72]	; 0x48
		break;
    416a:	e7df      	b.n	412c <PWM_MatchUpdate+0x14>

0000416c <PWM_MultiMatchUpdate>:
 * 				- PWM_MATCH_UPDATE_NEXT_RST: The update value will be updated for
 * 					this channel on next reset by a PWM Match event.
 * @return		None
 *********************************************************************/
void PWM_MultiMatchUpdate(LPC_PWM_TypeDef *PWMx, PWM_Match_T *MatchStruct , uint8_t UpdateType)
{
    416c:	2300      	movs	r3, #0
    416e:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t LatchValue = 0;
    4170:	461c      	mov	r4, r3
				*((volatile unsigned int *)(&(PWMx->MR0) + i)) = MatchStruct[i].Matchvalue;
			else
			{
				*((volatile unsigned int *)(&(PWMx->MR4) + (i-4))) = MatchStruct[i].Matchvalue;
			}
			LatchValue |=(1<<i);
    4172:	2701      	movs	r7, #1
    4174:	f100 0518 	add.w	r5, r0, #24
		if(MatchStruct[i].Status == SET)
    4178:	eb01 06c3 	add.w	r6, r1, r3, lsl #3
    417c:	7936      	ldrb	r6, [r6, #4]
    417e:	2e01      	cmp	r6, #1
    4180:	d109      	bne.n	4196 <PWM_MultiMatchUpdate+0x2a>
    4182:	f851 6033 	ldr.w	r6, [r1, r3, lsl #3]
			if(i<4)
    4186:	2b03      	cmp	r3, #3
				*((volatile unsigned int *)(&(PWMx->MR0) + i)) = MatchStruct[i].Matchvalue;
    4188:	bf94      	ite	ls
    418a:	602e      	strls	r6, [r5, #0]
				*((volatile unsigned int *)(&(PWMx->MR4) + (i-4))) = MatchStruct[i].Matchvalue;
    418c:	61ae      	strhi	r6, [r5, #24]
			LatchValue |=(1<<i);
    418e:	fa07 f603 	lsl.w	r6, r7, r3
    4192:	4334      	orrs	r4, r6
    4194:	b2e4      	uxtb	r4, r4
    4196:	3301      	adds	r3, #1
	for(i=0;i<7;i++)
    4198:	2b07      	cmp	r3, #7
    419a:	f105 0504 	add.w	r5, r5, #4
    419e:	d1eb      	bne.n	4178 <PWM_MultiMatchUpdate+0xc>
		}
	}
	//set update for multi-channel at the same time
	PWMx->LER = LatchValue;
    41a0:	6504      	str	r4, [r0, #80]	; 0x50

	// In case of update now
	if (UpdateType == PWM_MATCH_UPDATE_NOW)
    41a2:	b93a      	cbnz	r2, 41b4 <PWM_MultiMatchUpdate+0x48>
	{
		PWMx->TCR |= PWM_TCR_COUNTER_RESET;
    41a4:	6843      	ldr	r3, [r0, #4]
    41a6:	f043 0302 	orr.w	r3, r3, #2
    41aa:	6043      	str	r3, [r0, #4]
		PWMx->TCR &= (~PWM_TCR_COUNTER_RESET) & PWM_TCR_BITMASK;
    41ac:	6843      	ldr	r3, [r0, #4]
    41ae:	f003 0309 	and.w	r3, r3, #9
    41b2:	6043      	str	r3, [r0, #4]
    41b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000041b6 <PWM_ChannelConfig>:
 * 				- PWM_CHANNEL_DUAL_EDGE: Dual Edge mode
 * @return 		None
 * Note: PWM Channel 1 can not be selected for mode option
 *********************************************************************/
void PWM_ChannelConfig(LPC_PWM_TypeDef *PWMx, uint8_t PWMChannel, uint8_t ModeOption)
{
    41b6:	b510      	push	{r4, lr}
    41b8:	f001 0307 	and.w	r3, r1, #7
	CHECK_PARAM(PARAM_PWMx(PWMx));
	CHECK_PARAM(PARAM_PWM1_EDGE_MODE_CHANNEL(PWMChannel));
	CHECK_PARAM(PARAM_PWM_CHANNEL_EDGE(ModeOption));

	// Single edge mode
	if (ModeOption == PWM_CHANNEL_SINGLE_EDGE)
    41bc:	b972      	cbnz	r2, 41dc <PWM_ChannelConfig+0x26>
	{
		PWMx->PCR &= (~PWM_PCR_PWMSELn(PWMChannel)) & PWM_PCR_BITMASK;
    41be:	2b01      	cmp	r3, #1
    41c0:	f647 637c 	movw	r3, #32380	; 0x7e7c
    41c4:	bf8a      	itet	hi
    41c6:	2201      	movhi	r2, #1
    41c8:	4619      	movls	r1, r3
    41ca:	fa02 f101 	lslhi.w	r1, r2, r1
    41ce:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
    41d0:	bf88      	it	hi
    41d2:	ea23 0101 	bichi.w	r1, r3, r1
    41d6:	4021      	ands	r1, r4
	}
	// Double edge mode
	else if (PWM_CHANNEL_DUAL_EDGE)
	{
		PWMx->PCR |= PWM_PCR_PWMSELn(PWMChannel);
    41d8:	64c1      	str	r1, [r0, #76]	; 0x4c
    41da:	bd10      	pop	{r4, pc}
    41dc:	2b01      	cmp	r3, #1
    41de:	bf8c      	ite	hi
    41e0:	2301      	movhi	r3, #1
    41e2:	2100      	movls	r1, #0
    41e4:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
    41e6:	bf88      	it	hi
    41e8:	fa03 f101 	lslhi.w	r1, r3, r1
    41ec:	4311      	orrs	r1, r2
    41ee:	e7f3      	b.n	41d8 <PWM_ChannelConfig+0x22>

000041f0 <PWM_ChannelCmd>:
void PWM_ChannelCmd(LPC_PWM_TypeDef *PWMx, uint8_t PWMChannel, FunctionalState NewState)
{
	CHECK_PARAM(PARAM_PWMx(PWMx));
	CHECK_PARAM(PARAM_PWM1_CHANNEL(PWMChannel));

	if (NewState == ENABLE)
    41f0:	2a01      	cmp	r2, #1
{
    41f2:	b530      	push	{r4, r5, lr}
    41f4:	f001 0407 	and.w	r4, r1, #7
	if (NewState == ENABLE)
    41f8:	d10b      	bne.n	4212 <PWM_ChannelCmd+0x22>
	{
		PWMx->PCR |= PWM_PCR_PWMENAn(PWMChannel);
    41fa:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
    41fc:	f004 03ff 	and.w	r3, r4, #255	; 0xff
    4200:	b12c      	cbz	r4, 420e <PWM_ChannelCmd+0x1e>
    4202:	3108      	adds	r1, #8
    4204:	fa02 f101 	lsl.w	r1, r2, r1
    4208:	4329      	orrs	r1, r5
	}
	else
	{
		PWMx->PCR &= (~PWM_PCR_PWMENAn(PWMChannel)) & PWM_PCR_BITMASK;
    420a:	64c1      	str	r1, [r0, #76]	; 0x4c
    420c:	bd30      	pop	{r4, r5, pc}
    420e:	4619      	mov	r1, r3
    4210:	e7fa      	b.n	4208 <PWM_ChannelCmd+0x18>
    4212:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
    4214:	b14c      	cbz	r4, 422a <PWM_ChannelCmd+0x3a>
    4216:	2301      	movs	r3, #1
    4218:	3108      	adds	r1, #8
    421a:	fa03 f101 	lsl.w	r1, r3, r1
    421e:	f647 637c 	movw	r3, #32380	; 0x7e7c
    4222:	ea23 0101 	bic.w	r1, r3, r1
    4226:	4011      	ands	r1, r2
    4228:	e7ef      	b.n	420a <PWM_ChannelCmd+0x1a>
    422a:	f647 617c 	movw	r1, #32380	; 0x7e7c
    422e:	e7fa      	b.n	4226 <PWM_ChannelCmd+0x36>

00004230 <ADC_Init>:
 * @param[in]	ADCx pointer to LPC_ADC_TypeDef, should be: LPC_ADC
 * @param[in]	rate ADC conversion rate, should be <=200KHz
 * @return 		None
 **********************************************************************/
void ADC_Init(LPC_ADC_TypeDef *ADCx, uint32_t rate)
{
    4230:	b538      	push	{r3, r4, r5, lr}
    4232:	4605      	mov	r5, r0
    4234:	460c      	mov	r4, r1

	CHECK_PARAM(PARAM_ADCx(ADCx));
	CHECK_PARAM(PARAM_ADC_RATE(rate));

	// Turn on power and clock
	CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCAD, ENABLE);
    4236:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    423a:	2101      	movs	r1, #1
    423c:	f7ff fc38 	bl	3ab0 <CLKPWR_ConfigPPWR>

	ADCx->ADCR = 0;
    4240:	2300      	movs	r3, #0

	//Enable PDN bit
	tmp = ADC_CR_PDN;
	// Set clock frequency
	ADCPClk = CLKPWR_GetPCLK(CLKPWR_PCLKSEL_ADC);
    4242:	2018      	movs	r0, #24
	ADCx->ADCR = 0;
    4244:	602b      	str	r3, [r5, #0]
	ADCPClk = CLKPWR_GetPCLK(CLKPWR_PCLKSEL_ADC);
    4246:	f7ff fc1f 	bl	3a88 <CLKPWR_GetPCLK>
	 * A/D converter, which should be less than or equal to 13MHz.
	 * A fully conversion requires 65 of these clocks.
	 * ADC clock = PCLK_ADC0 / (CLKDIV + 1);
	 * ADC rate = ADC clock / 65;
	 */
	temp = rate * 65;
    424a:	eb04 1484 	add.w	r4, r4, r4, lsl #6
	temp = (ADCPClk * 2 + temp)/(2 * temp) - 1; //get the round value by fomular: (2*A + B)/(2*B)
    424e:	eb04 0340 	add.w	r3, r4, r0, lsl #1
    4252:	0064      	lsls	r4, r4, #1
    4254:	fbb3 f3f4 	udiv	r3, r3, r4
    4258:	3b01      	subs	r3, #1
	tmp |=  ADC_CR_CLKDIV(temp);
    425a:	021b      	lsls	r3, r3, #8
    425c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000

	ADCx->ADCR = tmp;
    4260:	602b      	str	r3, [r5, #0]
    4262:	bd38      	pop	{r3, r4, r5, pc}

00004264 <ADC_DeInit>:
* @return 		None
**********************************************************************/
void ADC_DeInit(LPC_ADC_TypeDef *ADCx)
{
	CHECK_PARAM(PARAM_ADCx(ADCx));
    if (ADCx->ADCR & ADC_CR_START_MASK) //need to stop START bits before DeInit
    4264:	6803      	ldr	r3, [r0, #0]
     // Clear SEL bits
    ADCx->ADCR &= ~0xFF;
	// Clear PDN bit
	ADCx->ADCR &= ~ADC_CR_PDN;
	// Turn on power and clock
	CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCAD, DISABLE);
    4266:	2100      	movs	r1, #0
    if (ADCx->ADCR & ADC_CR_START_MASK) //need to stop START bits before DeInit
    4268:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
        ADCx->ADCR &= ~ADC_CR_START_MASK;
    426c:	bf1e      	ittt	ne
    426e:	6803      	ldrne	r3, [r0, #0]
    4270:	f023 63e0 	bicne.w	r3, r3, #117440512	; 0x7000000
    4274:	6003      	strne	r3, [r0, #0]
    ADCx->ADCR &= ~0xFF;
    4276:	6803      	ldr	r3, [r0, #0]
    4278:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    427c:	6003      	str	r3, [r0, #0]
	ADCx->ADCR &= ~ADC_CR_PDN;
    427e:	6803      	ldr	r3, [r0, #0]
    4280:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
    4284:	6003      	str	r3, [r0, #0]
	CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCAD, DISABLE);
    4286:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    428a:	f7ff bc11 	b.w	3ab0 <CLKPWR_ConfigPPWR>

0000428e <ADC_GetData>:
{
	uint32_t adc_value;

	CHECK_PARAM(PARAM_ADC_CHANNEL_SELECTION(channel));

	adc_value = *(uint32_t *)((&LPC_ADC->ADDR0) + channel);
    428e:	4b03      	ldr	r3, [pc, #12]	; (429c <ADC_GetData+0xe>)
	return ADC_GDR_RESULT(adc_value);
    4290:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
    4294:	f3c0 100b 	ubfx	r0, r0, #4, #12
    4298:	4770      	bx	lr
    429a:	bf00      	nop
    429c:	40034010 	.word	0x40034010

000042a0 <ADC_StartCmd>:
void ADC_StartCmd(LPC_ADC_TypeDef *ADCx, uint8_t start_mode)
{
	CHECK_PARAM(PARAM_ADCx(ADCx));
	CHECK_PARAM(PARAM_ADC_START_OPT(start_mode));

	ADCx->ADCR &= ~ADC_CR_START_MASK;
    42a0:	6803      	ldr	r3, [r0, #0]
    42a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    42a6:	6003      	str	r3, [r0, #0]
	ADCx->ADCR |=ADC_CR_START_MODE_SEL((uint32_t)start_mode);
    42a8:	6803      	ldr	r3, [r0, #0]
    42aa:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
    42ae:	6001      	str	r1, [r0, #0]
    42b0:	4770      	bx	lr

000042b2 <ADC_BurstCmd>:
**********************************************************************/
void ADC_BurstCmd(LPC_ADC_TypeDef *ADCx, FunctionalState NewState)
{
	CHECK_PARAM(PARAM_ADCx(ADCx));

	ADCx->ADCR &= ~ADC_CR_BURST;
    42b2:	6803      	ldr	r3, [r0, #0]
    42b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    42b8:	6003      	str	r3, [r0, #0]
	if (NewState){
    42ba:	b119      	cbz	r1, 42c4 <ADC_BurstCmd+0x12>
		ADCx->ADCR |= ADC_CR_BURST;
    42bc:	6803      	ldr	r3, [r0, #0]
    42be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    42c2:	6003      	str	r3, [r0, #0]
    42c4:	4770      	bx	lr

000042c6 <ADC_PowerdownCmd>:
**********************************************************************/
void ADC_PowerdownCmd(LPC_ADC_TypeDef *ADCx, FunctionalState NewState)
{
	CHECK_PARAM(PARAM_ADCx(ADCx));

	ADCx->ADCR &= ~ADC_CR_PDN;
    42c6:	6803      	ldr	r3, [r0, #0]
    42c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
    42cc:	6003      	str	r3, [r0, #0]
	if (NewState){
    42ce:	b119      	cbz	r1, 42d8 <ADC_PowerdownCmd+0x12>
		ADCx->ADCR |= ADC_CR_PDN;
    42d0:	6803      	ldr	r3, [r0, #0]
    42d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    42d6:	6003      	str	r3, [r0, #0]
    42d8:	4770      	bx	lr

000042da <ADC_EdgeStartConfig>:
void ADC_EdgeStartConfig(LPC_ADC_TypeDef *ADCx, uint8_t EdgeOption)
{
	CHECK_PARAM(PARAM_ADCx(ADCx));
	CHECK_PARAM(PARAM_ADC_START_ON_EDGE_OPT(EdgeOption));

	ADCx->ADCR &= ~ADC_CR_EDGE;
    42da:	6803      	ldr	r3, [r0, #0]
    42dc:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
    42e0:	6003      	str	r3, [r0, #0]
	if (EdgeOption){
    42e2:	b119      	cbz	r1, 42ec <ADC_EdgeStartConfig+0x12>
		ADCx->ADCR |= ADC_CR_EDGE;
    42e4:	6803      	ldr	r3, [r0, #0]
    42e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    42ea:	6003      	str	r3, [r0, #0]
    42ec:	4770      	bx	lr

000042ee <ADC_IntConfig>:
void ADC_IntConfig (LPC_ADC_TypeDef *ADCx, ADC_TYPE_INT_OPT IntType, FunctionalState NewState)
{
	CHECK_PARAM(PARAM_ADCx(ADCx));
	CHECK_PARAM(PARAM_ADC_TYPE_INT_OPT(IntType));

	ADCx->ADINTEN &= ~ADC_INTEN_CH(IntType);
    42ee:	2301      	movs	r3, #1
{
    42f0:	b510      	push	{r4, lr}
	ADCx->ADINTEN &= ~ADC_INTEN_CH(IntType);
    42f2:	68c4      	ldr	r4, [r0, #12]
    42f4:	fa03 f101 	lsl.w	r1, r3, r1
    42f8:	ea24 0401 	bic.w	r4, r4, r1
    42fc:	60c4      	str	r4, [r0, #12]
	if (NewState){
    42fe:	b112      	cbz	r2, 4306 <ADC_IntConfig+0x18>
		ADCx->ADINTEN |= ADC_INTEN_CH(IntType);
    4300:	68c3      	ldr	r3, [r0, #12]
    4302:	4319      	orrs	r1, r3
    4304:	60c1      	str	r1, [r0, #12]
    4306:	bd10      	pop	{r4, pc}

00004308 <ADC_ChannelCmd>:
void ADC_ChannelCmd (LPC_ADC_TypeDef *ADCx, uint8_t Channel, FunctionalState NewState)
{
	CHECK_PARAM(PARAM_ADCx(ADCx));
	CHECK_PARAM(PARAM_ADC_CHANNEL_SELECTION(Channel));

	if (NewState == ENABLE) {
    4308:	2a01      	cmp	r2, #1
		ADCx->ADCR |= ADC_CR_CH_SEL(Channel);
    430a:	6803      	ldr	r3, [r0, #0]
	if (NewState == ENABLE) {
    430c:	d103      	bne.n	4316 <ADC_ChannelCmd+0xe>
		ADCx->ADCR |= ADC_CR_CH_SEL(Channel);
    430e:	408a      	lsls	r2, r1
    4310:	431a      	orrs	r2, r3
	} else {
        if (ADCx->ADCR & ADC_CR_START_MASK) //need to stop START bits before disable channel
		   ADCx->ADCR &= ~ADC_CR_START_MASK;
		ADCx->ADCR &= ~ADC_CR_CH_SEL(Channel);
    4312:	6002      	str	r2, [r0, #0]
    4314:	4770      	bx	lr
        if (ADCx->ADCR & ADC_CR_START_MASK) //need to stop START bits before disable channel
    4316:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
		   ADCx->ADCR &= ~ADC_CR_START_MASK;
    431a:	bf1e      	ittt	ne
    431c:	6803      	ldrne	r3, [r0, #0]
    431e:	f023 63e0 	bicne.w	r3, r3, #117440512	; 0x7000000
    4322:	6003      	strne	r3, [r0, #0]
		ADCx->ADCR &= ~ADC_CR_CH_SEL(Channel);
    4324:	2301      	movs	r3, #1
    4326:	6802      	ldr	r2, [r0, #0]
    4328:	fa03 f101 	lsl.w	r1, r3, r1
    432c:	ea22 0201 	bic.w	r2, r2, r1
    4330:	e7ef      	b.n	4312 <ADC_ChannelCmd+0xa>

00004332 <ADC_ChannelGetData>:
	uint32_t adc_value;

	CHECK_PARAM(PARAM_ADCx(ADCx));
	CHECK_PARAM(PARAM_ADC_CHANNEL_SELECTION(channel));

	adc_value = *(uint32_t *) ((&ADCx->ADDR0) + channel);
    4332:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	return ADC_DR_RESULT(adc_value);
    4336:	6908      	ldr	r0, [r1, #16]
}
    4338:	f3c0 100b 	ubfx	r0, r0, #4, #12
    433c:	4770      	bx	lr

0000433e <ADC_ChannelGetStatus>:

	CHECK_PARAM(PARAM_ADCx(ADCx));
	CHECK_PARAM(PARAM_ADC_CHANNEL_SELECTION(channel));
	CHECK_PARAM(PARAM_ADC_DATA_STATUS(StatusType));

	temp =  *(uint32_t *) ((&ADCx->ADDR0) + channel);
    433e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    4342:	6908      	ldr	r0, [r1, #16]
	if (StatusType) {
    4344:	b12a      	cbz	r2, 4352 <ADC_ChannelGetStatus+0x14>
		temp &= ADC_DR_DONE_FLAG;
    4346:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
		return SET;
	} else {
		return RESET;
	}

}
    434a:	3000      	adds	r0, #0
    434c:	bf18      	it	ne
    434e:	2001      	movne	r0, #1
    4350:	4770      	bx	lr
		temp &= ADC_DR_OVERRUN_FLAG;
    4352:	f000 4080 	and.w	r0, r0, #1073741824	; 0x40000000
    4356:	e7f8      	b.n	434a <ADC_ChannelGetStatus+0xc>

00004358 <ADC_GlobalGetData>:
**********************************************************************/
uint32_t ADC_GlobalGetData(LPC_ADC_TypeDef *ADCx)
{
	CHECK_PARAM(PARAM_ADCx(ADCx));

	return ((uint32_t)(ADCx->ADGDR));
    4358:	6840      	ldr	r0, [r0, #4]
}
    435a:	4770      	bx	lr

0000435c <ADC_GlobalGetStatus>:
	uint32_t temp;

	CHECK_PARAM(PARAM_ADCx(ADCx));
	CHECK_PARAM(PARAM_ADC_DATA_STATUS(StatusType));

	temp =  ADCx->ADGDR;
    435c:	6840      	ldr	r0, [r0, #4]
	if (StatusType){
    435e:	b129      	cbz	r1, 436c <ADC_GlobalGetStatus+0x10>
		temp &= ADC_DR_DONE_FLAG;
    4360:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
	if (temp){
		return SET;
	}else{
		return RESET;
	}
}
    4364:	3000      	adds	r0, #0
    4366:	bf18      	it	ne
    4368:	2001      	movne	r0, #1
    436a:	4770      	bx	lr
		temp &= ADC_DR_OVERRUN_FLAG;
    436c:	f000 4080 	and.w	r0, r0, #1073741824	; 0x40000000
    4370:	e7f8      	b.n	4364 <ADC_GlobalGetStatus+0x8>
    4372:	bf00      	nop

00004374 <I2C_getNum>:
 * 				- LPC_I2C1
 * 				- LPC_I2C2
 * @return 		I2C number, could be: 0..2
 *********************************************************************/
static int32_t I2C_getNum(LPC_I2C_TypeDef *I2Cx){
	if (I2Cx == LPC_I2C0) {
    4374:	4b09      	ldr	r3, [pc, #36]	; (439c <I2C_getNum+0x28>)
    4376:	4298      	cmp	r0, r3
    4378:	d00b      	beq.n	4392 <I2C_getNum+0x1e>
		return (0);
	} else if (I2Cx == LPC_I2C1) {
    437a:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    437e:	4298      	cmp	r0, r3
    4380:	d009      	beq.n	4396 <I2C_getNum+0x22>
		return (1);
	} else if (I2Cx == LPC_I2C2) {
		return (2);
	}
	return (-1);
    4382:	f503 2388 	add.w	r3, r3, #278528	; 0x44000
    4386:	4298      	cmp	r0, r3
    4388:	bf0c      	ite	eq
    438a:	2002      	moveq	r0, #2
    438c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    4390:	4770      	bx	lr
		return (0);
    4392:	2000      	movs	r0, #0
    4394:	4770      	bx	lr
		return (1);
    4396:	2001      	movs	r0, #1
}
    4398:	4770      	bx	lr
    439a:	bf00      	nop
    439c:	4001c000 	.word	0x4001c000

000043a0 <I2C_Stop>:
 *********************************************************************/
static void I2C_Stop (LPC_I2C_TypeDef *I2Cx)
{

	/* Make sure start bit is not active */
	if (I2Cx->I2CONSET & I2C_I2CONSET_STA)
    43a0:	6803      	ldr	r3, [r0, #0]
    43a2:	069b      	lsls	r3, r3, #26
	{
		I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
    43a4:	bf44      	itt	mi
    43a6:	2320      	movmi	r3, #32
    43a8:	6183      	strmi	r3, [r0, #24]
	}

	I2Cx->I2CONSET = I2C_I2CONSET_STO|I2C_I2CONSET_AA;
    43aa:	2314      	movs	r3, #20
    43ac:	6003      	str	r3, [r0, #0]

	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    43ae:	2308      	movs	r3, #8
    43b0:	6183      	str	r3, [r0, #24]
    43b2:	4770      	bx	lr

000043b4 <I2C_SendByte>:
 * @param[in]	databyte: number of byte
 * @return 		value of I2C status register after sending
 *********************************************************************/
static uint32_t I2C_SendByte (LPC_I2C_TypeDef *I2Cx, uint8_t databyte)
{
	uint32_t CodeStatus = I2Cx->I2STAT & I2C_STAT_CODE_BITMASK;
    43b4:	6843      	ldr	r3, [r0, #4]

	if((CodeStatus != I2C_I2STAT_M_TX_START) &&
    43b6:	f003 02e8 	and.w	r2, r3, #232	; 0xe8
    43ba:	2a08      	cmp	r2, #8
    43bc:	d005      	beq.n	43ca <I2C_SendByte+0x16>
	uint32_t CodeStatus = I2Cx->I2STAT & I2C_STAT_CODE_BITMASK;
    43be:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
	if((CodeStatus != I2C_I2STAT_M_TX_START) &&
    43c2:	2b10      	cmp	r3, #16
    43c4:	d001      	beq.n	43ca <I2C_SendByte+0x16>
		(CodeStatus != I2C_I2STAT_M_TX_RESTART) &&
		(CodeStatus != I2C_I2STAT_M_TX_SLAW_ACK)  &&
    43c6:	2b28      	cmp	r3, #40	; 0x28
    43c8:	d10c      	bne.n	43e4 <I2C_SendByte+0x30>
	{
		return CodeStatus;
	}
	
	/* Make sure start bit is not active */
	if (I2Cx->I2CONSET & I2C_I2CONSET_STA)
    43ca:	6803      	ldr	r3, [r0, #0]
    43cc:	069b      	lsls	r3, r3, #26
	{
		I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
    43ce:	bf44      	itt	mi
    43d0:	2320      	movmi	r3, #32
    43d2:	6183      	strmi	r3, [r0, #24]
	}
	I2Cx->I2DAT = databyte & I2C_I2DAT_BITMASK;

	I2Cx->I2CONSET = I2C_I2CONSET_AA;
    43d4:	2304      	movs	r3, #4
	I2Cx->I2DAT = databyte & I2C_I2DAT_BITMASK;
    43d6:	6081      	str	r1, [r0, #8]
	I2Cx->I2CONSET = I2C_I2CONSET_AA;
    43d8:	6003      	str	r3, [r0, #0]

	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    43da:	2308      	movs	r3, #8
    43dc:	6183      	str	r3, [r0, #24]

	return (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
    43de:	6843      	ldr	r3, [r0, #4]
    43e0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
}
    43e4:	4618      	mov	r0, r3
    43e6:	4770      	bx	lr

000043e8 <I2C_Init>:
 * @param[in]	clockrate Target clock rate value to initialized I2C
 * 				peripheral (Hz)
 * @return 		None
 *********************************************************************/
void I2C_Init(LPC_I2C_TypeDef *I2Cx, uint32_t clockrate)
{
    43e8:	b538      	push	{r3, r4, r5, lr}
	CHECK_PARAM(PARAM_I2Cx(I2Cx));

	if (I2Cx==LPC_I2C0)
    43ea:	4b1b      	ldr	r3, [pc, #108]	; (4458 <I2C_Init+0x70>)
{
    43ec:	4605      	mov	r5, r0
	if (I2Cx==LPC_I2C0)
    43ee:	4298      	cmp	r0, r3
{
    43f0:	460c      	mov	r4, r1
	if (I2Cx==LPC_I2C0)
    43f2:	d114      	bne.n	441e <I2C_Init+0x36>
	{
		/* Set up clock and power for I2C0 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C0, ENABLE);
    43f4:	2101      	movs	r1, #1
    43f6:	2080      	movs	r0, #128	; 0x80
    43f8:	f7ff fb5a 	bl	3ab0 <CLKPWR_ConfigPPWR>
		/* As default, peripheral clock for I2C0 module
		 * is set to FCCLK / 2 */
		CLKPWR_SetPCLKDiv(CLKPWR_PCLKSEL_I2C0, CLKPWR_PCLKSEL_CCLK_DIV_2);
    43fc:	200e      	movs	r0, #14
    43fe:	2102      	movs	r1, #2
    4400:	f7ff fb0c 	bl	3a1c <CLKPWR_SetPCLKDiv>
		temp = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_I2C0) / target_clock;
    4404:	200e      	movs	r0, #14
		temp = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_I2C2) / target_clock;
    4406:	f7ff fb3f 	bl	3a88 <CLKPWR_GetPCLK>
    440a:	fbb0 f0f4 	udiv	r0, r0, r4
	I2Cx->I2SCLH = (uint32_t)(temp / 2);
    440e:	0843      	lsrs	r3, r0, #1
    4410:	612b      	str	r3, [r5, #16]
	I2Cx->I2SCLL = (uint32_t)(temp - I2Cx->I2SCLH);
    4412:	692b      	ldr	r3, [r5, #16]
    4414:	1ac0      	subs	r0, r0, r3
	}

    /* Set clock rate */
    I2C_SetClock(I2Cx, clockrate);
    /* Set I2C operation to default */
    I2Cx->I2CONCLR = (I2C_I2CONCLR_AAC | I2C_I2CONCLR_STAC | I2C_I2CONCLR_I2ENC);
    4416:	2364      	movs	r3, #100	; 0x64
	I2Cx->I2SCLL = (uint32_t)(temp - I2Cx->I2SCLH);
    4418:	6168      	str	r0, [r5, #20]
    I2Cx->I2CONCLR = (I2C_I2CONCLR_AAC | I2C_I2CONCLR_STAC | I2C_I2CONCLR_I2ENC);
    441a:	61ab      	str	r3, [r5, #24]
    441c:	bd38      	pop	{r3, r4, r5, pc}
	else if (I2Cx==LPC_I2C1)
    441e:	4b0f      	ldr	r3, [pc, #60]	; (445c <I2C_Init+0x74>)
    4420:	4298      	cmp	r0, r3
    4422:	d10a      	bne.n	443a <I2C_Init+0x52>
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C1, ENABLE);
    4424:	2101      	movs	r1, #1
    4426:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    442a:	f7ff fb41 	bl	3ab0 <CLKPWR_ConfigPPWR>
		CLKPWR_SetPCLKDiv(CLKPWR_PCLKSEL_I2C1, CLKPWR_PCLKSEL_CCLK_DIV_2);
    442e:	2026      	movs	r0, #38	; 0x26
    4430:	2102      	movs	r1, #2
    4432:	f7ff faf3 	bl	3a1c <CLKPWR_SetPCLKDiv>
		temp = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_I2C1) / target_clock;
    4436:	2026      	movs	r0, #38	; 0x26
    4438:	e7e5      	b.n	4406 <I2C_Init+0x1e>
	else if (I2Cx==LPC_I2C2)
    443a:	4b09      	ldr	r3, [pc, #36]	; (4460 <I2C_Init+0x78>)
    443c:	4298      	cmp	r0, r3
    443e:	d1ed      	bne.n	441c <I2C_Init+0x34>
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C2, ENABLE);
    4440:	2101      	movs	r1, #1
    4442:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    4446:	f7ff fb33 	bl	3ab0 <CLKPWR_ConfigPPWR>
		CLKPWR_SetPCLKDiv(CLKPWR_PCLKSEL_I2C2, CLKPWR_PCLKSEL_CCLK_DIV_2);
    444a:	2034      	movs	r0, #52	; 0x34
    444c:	2102      	movs	r1, #2
    444e:	f7ff fae5 	bl	3a1c <CLKPWR_SetPCLKDiv>
		temp = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_I2C2) / target_clock;
    4452:	2034      	movs	r0, #52	; 0x34
    4454:	e7d7      	b.n	4406 <I2C_Init+0x1e>
    4456:	bf00      	nop
    4458:	4001c000 	.word	0x4001c000
    445c:	4005c000 	.word	0x4005c000
    4460:	400a0000 	.word	0x400a0000

00004464 <I2C_DeInit>:
void I2C_DeInit(LPC_I2C_TypeDef* I2Cx)
{
	CHECK_PARAM(PARAM_I2Cx(I2Cx));

	/* Disable I2C control */
	I2Cx->I2CONCLR = I2C_I2CONCLR_I2ENC;
    4464:	2340      	movs	r3, #64	; 0x40
    4466:	6183      	str	r3, [r0, #24]

	if (I2Cx==LPC_I2C0)
    4468:	4b0a      	ldr	r3, [pc, #40]	; (4494 <I2C_DeInit+0x30>)
    446a:	4298      	cmp	r0, r3
    446c:	d103      	bne.n	4476 <I2C_DeInit+0x12>
	{
		/* Disable power for I2C0 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C0, DISABLE);
    446e:	2100      	movs	r1, #0
    4470:	2080      	movs	r0, #128	; 0x80
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C1, DISABLE);
	}
	else if (I2Cx==LPC_I2C2)
	{
		/* Disable power for I2C2 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C2, DISABLE);
    4472:	f7ff bb1d 	b.w	3ab0 <CLKPWR_ConfigPPWR>
	else if (I2Cx==LPC_I2C1)
    4476:	4b08      	ldr	r3, [pc, #32]	; (4498 <I2C_DeInit+0x34>)
    4478:	4298      	cmp	r0, r3
    447a:	d103      	bne.n	4484 <I2C_DeInit+0x20>
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C1, DISABLE);
    447c:	2100      	movs	r1, #0
    447e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    4482:	e7f6      	b.n	4472 <I2C_DeInit+0xe>
	else if (I2Cx==LPC_I2C2)
    4484:	4b05      	ldr	r3, [pc, #20]	; (449c <I2C_DeInit+0x38>)
    4486:	4298      	cmp	r0, r3
    4488:	d103      	bne.n	4492 <I2C_DeInit+0x2e>
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C2, DISABLE);
    448a:	2100      	movs	r1, #0
    448c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    4490:	e7ef      	b.n	4472 <I2C_DeInit+0xe>
    4492:	4770      	bx	lr
    4494:	4001c000 	.word	0x4001c000
    4498:	4005c000 	.word	0x4005c000
    449c:	400a0000 	.word	0x400a0000

000044a0 <I2C_Cmd>:
void I2C_Cmd(LPC_I2C_TypeDef* I2Cx, en_I2C_Mode Mode,  FunctionalState NewState)
{
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
	CHECK_PARAM(PARAM_I2Cx(I2Cx));

	if (NewState == ENABLE)
    44a0:	2a01      	cmp	r2, #1
    44a2:	d105      	bne.n	44b0 <I2C_Cmd+0x10>
	{
		if(Mode != I2C_SLAVE_MODE)
    44a4:	2901      	cmp	r1, #1
			I2Cx->I2CONSET = I2C_I2CONSET_I2EN;
    44a6:	bf14      	ite	ne
    44a8:	2340      	movne	r3, #64	; 0x40
		else
			I2Cx->I2CONSET = I2C_I2CONSET_I2EN | I2C_I2CONSET_AA;
    44aa:	2344      	moveq	r3, #68	; 0x44
    44ac:	6003      	str	r3, [r0, #0]
    44ae:	4770      	bx	lr
	}
	else
	{
		I2Cx->I2CONCLR = I2C_I2CONCLR_I2ENC;
    44b0:	2340      	movs	r3, #64	; 0x40
    44b2:	6183      	str	r3, [r0, #24]
    44b4:	4770      	bx	lr

000044b6 <I2C_IntCmd>:
 * 				- ENABLE: enable interrupt for this I2C peripheral
 * 				- DISABLE: disable interrupt for this I2C peripheral
 * @return 		None
 **********************************************************************/
void I2C_IntCmd (LPC_I2C_TypeDef *I2Cx, Bool NewState)
{
    44b6:	4b14      	ldr	r3, [pc, #80]	; (4508 <I2C_IntCmd+0x52>)
	if (NewState)
    44b8:	b191      	cbz	r1, 44e0 <I2C_IntCmd+0x2a>
	{
		if(I2Cx == LPC_I2C0)
    44ba:	4298      	cmp	r0, r3
    44bc:	d104      	bne.n	44c8 <I2C_IntCmd+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    44be:	f44f 6280 	mov.w	r2, #1024	; 0x400
    44c2:	4b12      	ldr	r3, [pc, #72]	; (450c <I2C_IntCmd+0x56>)
    44c4:	601a      	str	r2, [r3, #0]
    44c6:	4770      	bx	lr
		{
			NVIC_EnableIRQ(I2C0_IRQn);
		}
		else if (I2Cx == LPC_I2C1)
    44c8:	4b11      	ldr	r3, [pc, #68]	; (4510 <I2C_IntCmd+0x5a>)
    44ca:	4298      	cmp	r0, r3
    44cc:	d102      	bne.n	44d4 <I2C_IntCmd+0x1e>
    44ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
    44d2:	e7f6      	b.n	44c2 <I2C_IntCmd+0xc>
		{
			NVIC_EnableIRQ(I2C1_IRQn);
		}
		else if (I2Cx == LPC_I2C2)
    44d4:	4b0f      	ldr	r3, [pc, #60]	; (4514 <I2C_IntCmd+0x5e>)
    44d6:	4298      	cmp	r0, r3
    44d8:	d109      	bne.n	44ee <I2C_IntCmd+0x38>
    44da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    44de:	e7f0      	b.n	44c2 <I2C_IntCmd+0xc>
			NVIC_EnableIRQ(I2C2_IRQn);
		}
	}
	else
	{
		if(I2Cx == LPC_I2C0)
    44e0:	4298      	cmp	r0, r3
    44e2:	d105      	bne.n	44f0 <I2C_IntCmd+0x3a>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    44e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    44e8:	4b08      	ldr	r3, [pc, #32]	; (450c <I2C_IntCmd+0x56>)
    44ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    44ee:	4770      	bx	lr
		{
			NVIC_DisableIRQ(I2C0_IRQn);
		}
		else if (I2Cx == LPC_I2C1)
    44f0:	4b07      	ldr	r3, [pc, #28]	; (4510 <I2C_IntCmd+0x5a>)
    44f2:	4298      	cmp	r0, r3
    44f4:	d102      	bne.n	44fc <I2C_IntCmd+0x46>
    44f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
    44fa:	e7f5      	b.n	44e8 <I2C_IntCmd+0x32>
		{
			NVIC_DisableIRQ(I2C1_IRQn);
		}
		else if (I2Cx == LPC_I2C2)
    44fc:	4b05      	ldr	r3, [pc, #20]	; (4514 <I2C_IntCmd+0x5e>)
    44fe:	4298      	cmp	r0, r3
    4500:	d1f5      	bne.n	44ee <I2C_IntCmd+0x38>
    4502:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    4506:	e7ef      	b.n	44e8 <I2C_IntCmd+0x32>
    4508:	4001c000 	.word	0x4001c000
    450c:	e000e100 	.word	0xe000e100
    4510:	4005c000 	.word	0x4005c000
    4514:	400a0000 	.word	0x400a0000

00004518 <I2C_MasterHanleStates>:
 *				-I2C_RECV_END
 *				- I2C_ERR
 *				- I2C_NAK_RECV
 **********************************************************************/
int32_t I2C_MasterHanleStates(LPC_I2C_TypeDef  *I2Cx, uint32_t CodeStatus, I2C_M_SETUP_Type *TransferCfg)
{
    4518:	b570      	push	{r4, r5, r6, lr}
    451a:	4614      	mov	r4, r2
	
	//get buffer to send/receive
	txdat = (uint8_t *) &TransferCfg->tx_data[TransferCfg->tx_count];
	rxdat = (uint8_t *) &TransferCfg->rx_data[TransferCfg->rx_count];

	switch(CodeStatus)
    451c:	2928      	cmp	r1, #40	; 0x28
	txdat = (uint8_t *) &TransferCfg->tx_data[TransferCfg->tx_count];
    451e:	68d2      	ldr	r2, [r2, #12]
{
    4520:	4603      	mov	r3, r0
	rxdat = (uint8_t *) &TransferCfg->rx_data[TransferCfg->rx_count];
    4522:	69a5      	ldr	r5, [r4, #24]
    4524:	6926      	ldr	r6, [r4, #16]
	switch(CodeStatus)
    4526:	d03b      	beq.n	45a0 <I2C_MasterHanleStates+0x88>
    4528:	d813      	bhi.n	4552 <I2C_MasterHanleStates+0x3a>
    452a:	2910      	cmp	r1, #16
    452c:	d021      	beq.n	4572 <I2C_MasterHanleStates+0x5a>
    452e:	d806      	bhi.n	453e <I2C_MasterHanleStates+0x26>
    4530:	b149      	cbz	r1, 4546 <I2C_MasterHanleStates+0x2e>
    4532:	2908      	cmp	r1, #8
    4534:	d01d      	beq.n	4572 <I2C_MasterHanleStates+0x5a>
			Ret = I2C_ERR;
			break;
		/* No status information */
		case I2C_I2STAT_NO_INF:
		default:
			I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    4536:	2208      	movs	r2, #8
    4538:	619a      	str	r2, [r3, #24]
	int32_t Ret = I2C_OK;
    453a:	2000      	movs	r0, #0
    453c:	bd70      	pop	{r4, r5, r6, pc}
	switch(CodeStatus)
    453e:	2918      	cmp	r1, #24
    4540:	d02e      	beq.n	45a0 <I2C_MasterHanleStates+0x88>
    4542:	2920      	cmp	r1, #32
    4544:	d1f7      	bne.n	4536 <I2C_MasterHanleStates+0x1e>
			I2C_Stop(I2Cx);
    4546:	4618      	mov	r0, r3
    4548:	f7ff ff2a 	bl	43a0 <I2C_Stop>
			Ret = I2C_ERR;
    454c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
			break;
    4550:	bd70      	pop	{r4, r5, r6, pc}
	switch(CodeStatus)
    4552:	2940      	cmp	r1, #64	; 0x40
    4554:	d036      	beq.n	45c4 <I2C_MasterHanleStates+0xac>
    4556:	d806      	bhi.n	4566 <I2C_MasterHanleStates+0x4e>
    4558:	2930      	cmp	r1, #48	; 0x30
    455a:	d02f      	beq.n	45bc <I2C_MasterHanleStates+0xa4>
    455c:	2938      	cmp	r1, #56	; 0x38
    455e:	d1ea      	bne.n	4536 <I2C_MasterHanleStates+0x1e>
			I2Cx->I2CONSET = I2C_I2CONSET_STA|I2C_I2CONSET_AA;
    4560:	2224      	movs	r2, #36	; 0x24
    4562:	6002      	str	r2, [r0, #0]
    4564:	e7e7      	b.n	4536 <I2C_MasterHanleStates+0x1e>
	switch(CodeStatus)
    4566:	2950      	cmp	r1, #80	; 0x50
    4568:	d032      	beq.n	45d0 <I2C_MasterHanleStates+0xb8>
    456a:	2958      	cmp	r1, #88	; 0x58
    456c:	d046      	beq.n	45fc <I2C_MasterHanleStates+0xe4>
    456e:	2948      	cmp	r1, #72	; 0x48
    4570:	e7e8      	b.n	4544 <I2C_MasterHanleStates+0x2c>
			if(TransferCfg->tx_count < TransferCfg->tx_length)
    4572:	68e1      	ldr	r1, [r4, #12]
    4574:	68a2      	ldr	r2, [r4, #8]
    4576:	4291      	cmp	r1, r2
    4578:	d208      	bcs.n	458c <I2C_MasterHanleStates+0x74>
				I2C_SendByte(I2Cx, (TransferCfg->sl_addr7bit << 1));
    457a:	6821      	ldr	r1, [r4, #0]
    457c:	0049      	lsls	r1, r1, #1
    457e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
				I2C_SendByte(I2Cx, ((TransferCfg->sl_addr7bit << 1) | 0x01));
    4582:	4618      	mov	r0, r3
    4584:	f7ff ff16 	bl	43b4 <I2C_SendByte>
				Ret = I2C_BYTE_SENT;
    4588:	2001      	movs	r0, #1
    458a:	bd70      	pop	{r4, r5, r6, pc}
			else if (TransferCfg->rx_count  < TransferCfg->rx_length)
    458c:	69a1      	ldr	r1, [r4, #24]
    458e:	6962      	ldr	r2, [r4, #20]
    4590:	4291      	cmp	r1, r2
    4592:	d2d2      	bcs.n	453a <I2C_MasterHanleStates+0x22>
				I2C_SendByte(I2Cx, ((TransferCfg->sl_addr7bit << 1) | 0x01));
    4594:	6821      	ldr	r1, [r4, #0]
    4596:	0049      	lsls	r1, r1, #1
    4598:	f041 0101 	orr.w	r1, r1, #1
    459c:	b2c9      	uxtb	r1, r1
    459e:	e7f0      	b.n	4582 <I2C_MasterHanleStates+0x6a>
			if(TransferCfg->tx_count < TransferCfg->tx_length)
    45a0:	68e0      	ldr	r0, [r4, #12]
    45a2:	68a1      	ldr	r1, [r4, #8]
    45a4:	4288      	cmp	r0, r1
    45a6:	d208      	bcs.n	45ba <I2C_MasterHanleStates+0xa2>
				I2C_SendByte(I2Cx, *txdat);
    45a8:	6861      	ldr	r1, [r4, #4]
    45aa:	4618      	mov	r0, r3
    45ac:	5c89      	ldrb	r1, [r1, r2]
    45ae:	f7ff ff01 	bl	43b4 <I2C_SendByte>
				TransferCfg->tx_count++;
    45b2:	68e3      	ldr	r3, [r4, #12]
    45b4:	3301      	adds	r3, #1
    45b6:	60e3      	str	r3, [r4, #12]
    45b8:	e7e6      	b.n	4588 <I2C_MasterHanleStates+0x70>
				I2C_Stop(I2Cx);
    45ba:	4618      	mov	r0, r3
			I2C_Stop(I2Cx);
    45bc:	f7ff fef0 	bl	43a0 <I2C_Stop>
			Ret = I2C_SEND_END;
    45c0:	2008      	movs	r0, #8
			break;
    45c2:	bd70      	pop	{r4, r5, r6, pc}
			I2Cx->I2CONSET = I2C_I2CONSET_AA;
    45c4:	2204      	movs	r2, #4
    45c6:	6002      	str	r2, [r0, #0]
			I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    45c8:	2208      	movs	r2, #8
    45ca:	6182      	str	r2, [r0, #24]
    45cc:	2002      	movs	r0, #2
    45ce:	bd70      	pop	{r4, r5, r6, pc}
			if (TransferCfg->rx_count <TransferCfg->rx_length)
    45d0:	69a1      	ldr	r1, [r4, #24]
    45d2:	6962      	ldr	r2, [r4, #20]
    45d4:	4291      	cmp	r1, r2
    45d6:	d21d      	bcs.n	4614 <I2C_MasterHanleStates+0xfc>
				if (TransferCfg->rx_count < (TransferCfg->rx_length - 2))
    45d8:	69a1      	ldr	r1, [r4, #24]
    45da:	3a02      	subs	r2, #2
    45dc:	4291      	cmp	r1, r2
    45de:	f04f 0104 	mov.w	r1, #4
	*retdat = (uint8_t) (I2Cx->I2DAT & I2C_I2DAT_BITMASK);
    45e2:	6882      	ldr	r2, [r0, #8]
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
    45e4:	bf34      	ite	cc
    45e6:	6001      	strcc	r1, [r0, #0]
		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC;
    45e8:	6181      	strcs	r1, [r0, #24]
	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    45ea:	2108      	movs	r1, #8
	*retdat = (uint8_t) (I2Cx->I2DAT & I2C_I2DAT_BITMASK);
    45ec:	b2d2      	uxtb	r2, r2
	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    45ee:	6181      	str	r1, [r0, #24]
	return (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
    45f0:	685b      	ldr	r3, [r3, #4]
				*rxdat++ = tmp;
    45f2:	5572      	strb	r2, [r6, r5]
				TransferCfg->rx_count++;
    45f4:	69a3      	ldr	r3, [r4, #24]
    45f6:	3301      	adds	r3, #1
    45f8:	61a3      	str	r3, [r4, #24]
    45fa:	e7e7      	b.n	45cc <I2C_MasterHanleStates+0xb4>
		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC;
    45fc:	2104      	movs	r1, #4
	*retdat = (uint8_t) (I2Cx->I2DAT & I2C_I2DAT_BITMASK);
    45fe:	6882      	ldr	r2, [r0, #8]
		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC;
    4600:	6181      	str	r1, [r0, #24]
	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    4602:	2108      	movs	r1, #8
    4604:	6181      	str	r1, [r0, #24]
	return (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
    4606:	685b      	ldr	r3, [r3, #4]
	*retdat = (uint8_t) (I2Cx->I2DAT & I2C_I2DAT_BITMASK);
    4608:	5572      	strb	r2, [r6, r5]
			TransferCfg->rx_count++;
    460a:	69a3      	ldr	r3, [r4, #24]
    460c:	3301      	adds	r3, #1
    460e:	61a3      	str	r3, [r4, #24]
			I2C_Stop(I2Cx);
    4610:	f7ff fec6 	bl	43a0 <I2C_Stop>
				Ret = I2C_RECV_END;
    4614:	2010      	movs	r0, #16
			break;
	}
	
	return Ret;
}
    4616:	bd70      	pop	{r4, r5, r6, pc}

00004618 <I2C_SlaveHanleStates>:

	//get buffer to send/receive
	txdat = (uint8_t *) &TransferCfg->tx_data[TransferCfg->tx_count];
	rxdat = (uint8_t *) &TransferCfg->rx_data[TransferCfg->rx_count];
	
	switch (CodeStatus)
    4618:	2990      	cmp	r1, #144	; 0x90
{
    461a:	b570      	push	{r4, r5, r6, lr}
	txdat = (uint8_t *) &TransferCfg->tx_data[TransferCfg->tx_count];
    461c:	6813      	ldr	r3, [r2, #0]
{
    461e:	4604      	mov	r4, r0
	txdat = (uint8_t *) &TransferCfg->tx_data[TransferCfg->tx_count];
    4620:	6895      	ldr	r5, [r2, #8]
	rxdat = (uint8_t *) &TransferCfg->rx_data[TransferCfg->rx_count];
    4622:	68d0      	ldr	r0, [r2, #12]
    4624:	6956      	ldr	r6, [r2, #20]
	switch (CodeStatus)
    4626:	d051      	beq.n	46cc <I2C_SlaveHanleStates+0xb4>
    4628:	d814      	bhi.n	4654 <I2C_SlaveHanleStates+0x3c>
    462a:	2970      	cmp	r1, #112	; 0x70
    462c:	d004      	beq.n	4638 <I2C_SlaveHanleStates+0x20>
    462e:	d805      	bhi.n	463c <I2C_SlaveHanleStates+0x24>
    4630:	2960      	cmp	r1, #96	; 0x60
    4632:	d001      	beq.n	4638 <I2C_SlaveHanleStates+0x20>
    4634:	2968      	cmp	r1, #104	; 0x68
    4636:	d034      	beq.n	46a2 <I2C_SlaveHanleStates+0x8a>
		
		/* No status information */
		case I2C_I2STAT_NO_INF:
		/* Other status must be captured */
		default:
			I2Cx->I2CONSET = I2C_I2CONSET_AA;
    4638:	2304      	movs	r3, #4
    463a:	e006      	b.n	464a <I2C_SlaveHanleStates+0x32>
	switch (CodeStatus)
    463c:	2980      	cmp	r1, #128	; 0x80
    463e:	d030      	beq.n	46a2 <I2C_SlaveHanleStates+0x8a>
    4640:	2988      	cmp	r1, #136	; 0x88
    4642:	d012      	beq.n	466a <I2C_SlaveHanleStates+0x52>
    4644:	2978      	cmp	r1, #120	; 0x78
    4646:	d1f7      	bne.n	4638 <I2C_SlaveHanleStates+0x20>
			I2Cx->I2CONSET = I2C_I2CONSET_AA|I2C_I2CONSET_STA;
    4648:	2324      	movs	r3, #36	; 0x24
			I2Cx->I2CONSET = I2C_I2CONSET_AA;
    464a:	6023      	str	r3, [r4, #0]
			I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    464c:	2308      	movs	r3, #8
	int32_t Ret = I2C_OK;
    464e:	2000      	movs	r0, #0
			I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    4650:	61a3      	str	r3, [r4, #24]
			break;
		
	}

	return Ret;
}
    4652:	bd70      	pop	{r4, r5, r6, pc}
	switch (CodeStatus)
    4654:	29b0      	cmp	r1, #176	; 0xb0
    4656:	d04d      	beq.n	46f4 <I2C_SlaveHanleStates+0xdc>
    4658:	f04f 0004 	mov.w	r0, #4
    465c:	d80b      	bhi.n	4676 <I2C_SlaveHanleStates+0x5e>
    465e:	29a0      	cmp	r1, #160	; 0xa0
    4660:	d05d      	beq.n	471e <I2C_SlaveHanleStates+0x106>
    4662:	29a8      	cmp	r1, #168	; 0xa8
    4664:	d00d      	beq.n	4682 <I2C_SlaveHanleStates+0x6a>
    4666:	2998      	cmp	r1, #152	; 0x98
    4668:	d1e6      	bne.n	4638 <I2C_SlaveHanleStates+0x20>
			I2Cx->I2CONSET = I2C_I2CONSET_AA;
    466a:	2304      	movs	r3, #4
    466c:	6023      	str	r3, [r4, #0]
			I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    466e:	2308      	movs	r3, #8
			Ret = I2C_RECV_END;
    4670:	2010      	movs	r0, #16
			I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    4672:	61a3      	str	r3, [r4, #24]
			break;
    4674:	bd70      	pop	{r4, r5, r6, pc}
	switch (CodeStatus)
    4676:	29c0      	cmp	r1, #192	; 0xc0
    4678:	d04d      	beq.n	4716 <I2C_SlaveHanleStates+0xfe>
    467a:	29c8      	cmp	r1, #200	; 0xc8
    467c:	d04b      	beq.n	4716 <I2C_SlaveHanleStates+0xfe>
    467e:	29b8      	cmp	r1, #184	; 0xb8
    4680:	d1da      	bne.n	4638 <I2C_SlaveHanleStates+0x20>
			if ((TransferCfg->tx_count < TransferCfg->tx_length) && (TransferCfg->tx_data != NULL))
    4682:	6890      	ldr	r0, [r2, #8]
    4684:	6851      	ldr	r1, [r2, #4]
    4686:	4288      	cmp	r0, r1
    4688:	d230      	bcs.n	46ec <I2C_SlaveHanleStates+0xd4>
    468a:	2b00      	cmp	r3, #0
    468c:	d030      	beq.n	46f0 <I2C_SlaveHanleStates+0xd8>
				Ret = I2C_BYTE_SENT;
    468e:	2001      	movs	r0, #1
				I2Cx->I2DAT = *txdat++;
    4690:	5d5b      	ldrb	r3, [r3, r5]
    4692:	60a3      	str	r3, [r4, #8]
				TransferCfg->tx_count++;
    4694:	6893      	ldr	r3, [r2, #8]
    4696:	3301      	adds	r3, #1
    4698:	6093      	str	r3, [r2, #8]
			I2Cx->I2CONSET = I2C_I2CONSET_AA;
    469a:	2304      	movs	r3, #4
			I2Cx->I2CONSET = I2C_I2CONSET_AA|I2C_I2CONSET_STA;
    469c:	6023      	str	r3, [r4, #0]
			I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    469e:	2308      	movs	r3, #8
    46a0:	e020      	b.n	46e4 <I2C_SlaveHanleStates+0xcc>
			if ((TransferCfg->rx_count < TransferCfg->rx_length) && (TransferCfg->rx_data != NULL))
    46a2:	6951      	ldr	r1, [r2, #20]
    46a4:	6913      	ldr	r3, [r2, #16]
    46a6:	4299      	cmp	r1, r3
    46a8:	d20e      	bcs.n	46c8 <I2C_SlaveHanleStates+0xb0>
    46aa:	b128      	cbz	r0, 46b8 <I2C_SlaveHanleStates+0xa0>
				*rxdat++ = (uint8_t)I2Cx->I2DAT;
    46ac:	68a3      	ldr	r3, [r4, #8]
    46ae:	5583      	strb	r3, [r0, r6]
				Ret = I2C_BYTE_RECV;
    46b0:	2002      	movs	r0, #2
				TransferCfg->rx_count++;
    46b2:	6953      	ldr	r3, [r2, #20]
    46b4:	3301      	adds	r3, #1
    46b6:	6153      	str	r3, [r2, #20]
			if(TransferCfg->rx_count == (TransferCfg->rx_length) ) {
    46b8:	6951      	ldr	r1, [r2, #20]
    46ba:	6913      	ldr	r3, [r2, #16]
    46bc:	4299      	cmp	r1, r3
    46be:	d1ec      	bne.n	469a <I2C_SlaveHanleStates+0x82>
				I2Cx->I2CONCLR = I2C_I2CONCLR_AAC|I2C_I2CONCLR_SIC;
    46c0:	230c      	movs	r3, #12
				Ret = I2C_BYTE_RECV;
    46c2:	2002      	movs	r0, #2
				I2Cx->I2CONCLR = I2C_I2CONCLR_AAC|I2C_I2CONCLR_SIC;
    46c4:	61a3      	str	r3, [r4, #24]
    46c6:	bd70      	pop	{r4, r5, r6, pc}
	int32_t Ret = I2C_OK;
    46c8:	2000      	movs	r0, #0
    46ca:	e7f5      	b.n	46b8 <I2C_SlaveHanleStates+0xa0>
			if ((TransferCfg->rx_count < TransferCfg->rx_length) && (TransferCfg->rx_data != NULL))
    46cc:	6951      	ldr	r1, [r2, #20]
    46ce:	6913      	ldr	r3, [r2, #16]
    46d0:	4299      	cmp	r1, r3
    46d2:	d209      	bcs.n	46e8 <I2C_SlaveHanleStates+0xd0>
    46d4:	b128      	cbz	r0, 46e2 <I2C_SlaveHanleStates+0xca>
				*rxdat++ = (uint8_t)I2Cx->I2DAT;
    46d6:	68a3      	ldr	r3, [r4, #8]
    46d8:	5583      	strb	r3, [r0, r6]
				Ret = I2C_BYTE_RECV;
    46da:	2002      	movs	r0, #2
				TransferCfg->rx_count++;
    46dc:	6953      	ldr	r3, [r2, #20]
    46de:	3301      	adds	r3, #1
    46e0:	6153      	str	r3, [r2, #20]
			I2Cx->I2CONCLR = I2C_I2CONCLR_AAC|I2C_I2CONCLR_SIC;
    46e2:	230c      	movs	r3, #12
    46e4:	61a3      	str	r3, [r4, #24]
			break;
    46e6:	bd70      	pop	{r4, r5, r6, pc}
	int32_t Ret = I2C_OK;
    46e8:	2000      	movs	r0, #0
    46ea:	e7fa      	b.n	46e2 <I2C_SlaveHanleStates+0xca>
    46ec:	2000      	movs	r0, #0
    46ee:	e7d4      	b.n	469a <I2C_SlaveHanleStates+0x82>
    46f0:	4618      	mov	r0, r3
    46f2:	e7d2      	b.n	469a <I2C_SlaveHanleStates+0x82>
			if ((TransferCfg->tx_count < TransferCfg->tx_length) && (TransferCfg->tx_data != NULL))
    46f4:	6890      	ldr	r0, [r2, #8]
    46f6:	6851      	ldr	r1, [r2, #4]
    46f8:	4288      	cmp	r0, r1
    46fa:	d208      	bcs.n	470e <I2C_SlaveHanleStates+0xf6>
    46fc:	b14b      	cbz	r3, 4712 <I2C_SlaveHanleStates+0xfa>
				Ret = I2C_BYTE_SENT;
    46fe:	2001      	movs	r0, #1
				I2Cx->I2DAT = *txdat++;
    4700:	5d5b      	ldrb	r3, [r3, r5]
    4702:	60a3      	str	r3, [r4, #8]
				TransferCfg->tx_count++;
    4704:	6893      	ldr	r3, [r2, #8]
    4706:	3301      	adds	r3, #1
    4708:	6093      	str	r3, [r2, #8]
			I2Cx->I2CONSET = I2C_I2CONSET_AA|I2C_I2CONSET_STA;
    470a:	2324      	movs	r3, #36	; 0x24
    470c:	e7c6      	b.n	469c <I2C_SlaveHanleStates+0x84>
	int32_t Ret = I2C_OK;
    470e:	2000      	movs	r0, #0
    4710:	e7fb      	b.n	470a <I2C_SlaveHanleStates+0xf2>
    4712:	4618      	mov	r0, r3
    4714:	e7f9      	b.n	470a <I2C_SlaveHanleStates+0xf2>
			I2Cx->I2CONSET = I2C_I2CONSET_AA;
    4716:	6020      	str	r0, [r4, #0]
			I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    4718:	2008      	movs	r0, #8
    471a:	61a0      	str	r0, [r4, #24]
			break;
    471c:	bd70      	pop	{r4, r5, r6, pc}
			I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    471e:	2308      	movs	r3, #8
			I2Cx->I2CONSET = I2C_I2CONSET_AA;
    4720:	6020      	str	r0, [r4, #0]
			I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    4722:	61a3      	str	r3, [r4, #24]
			Ret = I2C_STA_STO_RECV;
    4724:	2020      	movs	r0, #32
			break;
    4726:	bd70      	pop	{r4, r5, r6, pc}

00004728 <I2C_MasterHandler>:
 * 				- LPC_I2C1
 * 				- LPC_I2C2
 * @return 		None
 **********************************************************************/
void I2C_MasterHandler(LPC_I2C_TypeDef  *I2Cx)
{
    4728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    472a:	4605      	mov	r5, r0
	uint32_t i2cId = I2C_getNum(I2Cx);
    472c:	f7ff fe22 	bl	4374 <I2C_getNum>
	uint8_t returnCode;
	I2C_M_SETUP_Type *txrx_setup;
	int32_t Ret = I2C_OK;

	txrx_setup = (I2C_M_SETUP_Type *) i2cdat[i2cId].txrx_setup;
    4730:	4e17      	ldr	r6, [pc, #92]	; (4790 <I2C_MasterHandler+0x68>)

	returnCode = (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
    4732:	6869      	ldr	r1, [r5, #4]
	txrx_setup = (I2C_M_SETUP_Type *) i2cdat[i2cId].txrx_setup;
    4734:	f856 4030 	ldr.w	r4, [r6, r0, lsl #3]

	// Save current status
	txrx_setup->status = returnCode;
    4738:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
    473c:	6261      	str	r1, [r4, #36]	; 0x24
	uint32_t i2cId = I2C_getNum(I2Cx);
    473e:	4607      	mov	r7, r0

	Ret = I2C_MasterHanleStates(I2Cx, returnCode, txrx_setup);
    4740:	4622      	mov	r2, r4
    4742:	4628      	mov	r0, r5
    4744:	f7ff fee8 	bl	4518 <I2C_MasterHanleStates>

	if(I2C_CheckError(Ret))
    4748:	00c1      	lsls	r1, r0, #3
    474a:	d50d      	bpl.n	4768 <I2C_MasterHandler+0x40>
	{
		if(txrx_setup->retransmissions_count < txrx_setup->retransmissions_max)
    474c:	6a23      	ldr	r3, [r4, #32]
    474e:	69e2      	ldr	r2, [r4, #28]
    4750:	4293      	cmp	r3, r2
    4752:	d20f      	bcs.n	4774 <I2C_MasterHandler+0x4c>
		{
			// Retry
			txrx_setup->retransmissions_count ++;
    4754:	3301      	adds	r3, #1
    4756:	6223      	str	r3, [r4, #32]
			txrx_setup->tx_count = 0;
    4758:	2300      	movs	r3, #0
    475a:	60e3      	str	r3, [r4, #12]
			txrx_setup->rx_count = 0;
    475c:	61a3      	str	r3, [r4, #24]
			goto s_int_end;
		}
		else	// Start to wait for data from Slave
		{
			// Reset STA, STO, SI
	       		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC|I2C_I2CONCLR_STOC|I2C_I2CONCLR_STAC;
    475e:	2338      	movs	r3, #56	; 0x38
    4760:	61ab      	str	r3, [r5, #24]
	       		I2Cx->I2CONSET = I2C_I2CONSET_STA;
    4762:	2320      	movs	r3, #32
    4764:	602b      	str	r3, [r5, #0]
	       		return;
    4766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if (Ret & I2C_SEND_END)
    4768:	0702      	lsls	r2, r0, #28
    476a:	d50e      	bpl.n	478a <I2C_MasterHandler+0x62>
		if(txrx_setup->rx_count >= (txrx_setup->rx_length)) 
    476c:	69a2      	ldr	r2, [r4, #24]
    476e:	6963      	ldr	r3, [r4, #20]
    4770:	429a      	cmp	r2, r3
    4772:	d3f4      	bcc.n	475e <I2C_MasterHandler+0x36>
		return;
	}

s_int_end:
	// Disable interrupt
	I2C_IntCmd(I2Cx, FALSE);
    4774:	2100      	movs	r1, #0
    4776:	4628      	mov	r0, r5
    4778:	f7ff fe9d 	bl	44b6 <I2C_IntCmd>

	I2Cx->I2CONCLR = I2C_I2CONCLR_AAC | I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC;
    477c:	232c      	movs	r3, #44	; 0x2c
    477e:	61ab      	str	r3, [r5, #24]

	I2C_MasterComplete[i2cId] = TRUE;
    4780:	2301      	movs	r3, #1
    4782:	eb06 0687 	add.w	r6, r6, r7, lsl #2
    4786:	61b3      	str	r3, [r6, #24]
    4788:	e001      	b.n	478e <I2C_MasterHandler+0x66>
	else if (Ret & I2C_RECV_END) 
    478a:	06c3      	lsls	r3, r0, #27
    478c:	d4f2      	bmi.n	4774 <I2C_MasterHandler+0x4c>
    478e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4790:	10003458 	.word	0x10003458

00004794 <I2C_SlaveHandler>:
 *  			- LPC_I2C1
 *  			- LPC_I2C2
 * @return 		None
 **********************************************************************/
void I2C_SlaveHandler (LPC_I2C_TypeDef  *I2Cx)
{
    4794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4796:	4604      	mov	r4, r0
	uint32_t i2cId = I2C_getNum(I2Cx);
    4798:	f7ff fdec 	bl	4374 <I2C_getNum>
    479c:	4607      	mov	r7, r0
	uint8_t returnCode;
	I2C_S_SETUP_Type *txrx_setup;
	uint32_t timeout;
	int32_t Ret = I2C_OK;

	txrx_setup = (I2C_S_SETUP_Type *) i2cdat[i2cId].txrx_setup;
    479e:	4d18      	ldr	r5, [pc, #96]	; (4800 <I2C_SlaveHandler+0x6c>)
    47a0:	f855 6030 	ldr.w	r6, [r5, r0, lsl #3]

handle_state:

	returnCode = (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
    47a4:	6861      	ldr	r1, [r4, #4]
	// Save current status
	txrx_setup->status = returnCode;


	Ret = I2C_SlaveHanleStates(I2Cx, returnCode, txrx_setup);
    47a6:	4632      	mov	r2, r6
	txrx_setup->status = returnCode;
    47a8:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
    47ac:	61b1      	str	r1, [r6, #24]
	Ret = I2C_SlaveHanleStates(I2Cx, returnCode, txrx_setup);
    47ae:	4620      	mov	r0, r4
    47b0:	f7ff ff32 	bl	4618 <I2C_SlaveHanleStates>

	if(I2C_CheckError(Ret))
    47b4:	f010 5180 	ands.w	r1, r0, #268435456	; 0x10000000
    47b8:	d114      	bne.n	47e4 <I2C_SlaveHandler+0x50>
	{
		goto s_int_end;
	}
	else if (Ret & I2C_STA_STO_RECV)
    47ba:	0683      	lsls	r3, r0, #26
    47bc:	d51d      	bpl.n	47fa <I2C_SlaveHandler+0x66>
	{
		// Temporally lock the interrupt for timeout condition
		I2C_IntCmd(I2Cx, FALSE);
    47be:	4620      	mov	r0, r4
    47c0:	f7ff fe79 	bl	44b6 <I2C_IntCmd>
    47c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
		// enable time out
		timeout = I2C_SLAVE_TIME_OUT;
		while(1)
		{
			if (I2Cx->I2CONSET & I2C_I2CONSET_SI)
    47c8:	6822      	ldr	r2, [r4, #0]
    47ca:	0712      	lsls	r2, r2, #28
    47cc:	d504      	bpl.n	47d8 <I2C_SlaveHandler+0x44>
			{
				// re-Enable interrupt
				I2C_IntCmd(I2Cx, TRUE);
    47ce:	2101      	movs	r1, #1
    47d0:	4620      	mov	r0, r4
    47d2:	f7ff fe70 	bl	44b6 <I2C_IntCmd>
				goto handle_state;
    47d6:	e7e5      	b.n	47a4 <I2C_SlaveHandler+0x10>
			}
			else
			{
				timeout--;
				if (timeout == 0)
    47d8:	3b01      	subs	r3, #1
    47da:	d1f5      	bne.n	47c8 <I2C_SlaveHandler+0x34>
				{
					// timeout occur, it's really a stop condition
					txrx_setup->status |= I2C_SETUP_STATUS_DONE;
    47dc:	69b3      	ldr	r3, [r6, #24]
    47de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    47e2:	61b3      	str	r3, [r6, #24]
		return;
	}

s_int_end:
	// Disable interrupt
	I2C_IntCmd(I2Cx, FALSE);
    47e4:	2100      	movs	r1, #0
    47e6:	4620      	mov	r0, r4
    47e8:	f7ff fe65 	bl	44b6 <I2C_IntCmd>
	I2Cx->I2CONCLR = I2C_I2CONCLR_AAC | I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC;
    47ec:	232c      	movs	r3, #44	; 0x2c
    47ee:	61a3      	str	r3, [r4, #24]

	I2C_SlaveComplete[i2cId] = TRUE;
    47f0:	2301      	movs	r3, #1
    47f2:	eb05 0587 	add.w	r5, r5, r7, lsl #2
    47f6:	626b      	str	r3, [r5, #36]	; 0x24
    47f8:	e001      	b.n	47fe <I2C_SlaveHandler+0x6a>
	else if(Ret &I2C_SEND_END)
    47fa:	0703      	lsls	r3, r0, #28
    47fc:	d4f2      	bmi.n	47e4 <I2C_SlaveHandler+0x50>
    47fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4800:	10003458 	.word	0x10003458

00004804 <I2C_MasterTransferData>:
 * transmit data pointer, receive length and receive data pointer should be set
 * corresponding.
 **********************************************************************/
Status I2C_MasterTransferData(LPC_I2C_TypeDef *I2Cx, I2C_M_SETUP_Type *TransferCfg, \
																	I2C_TRANSFER_OPT_Type Opt)
{
    4804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4808:	4604      	mov	r4, r0
    480a:	460d      	mov	r5, r1
    480c:	4616      	mov	r6, r2
	uint32_t i2cId = I2C_getNum(I2Cx);	uint32_t CodeStatus;
    480e:	f7ff fdb1 	bl	4374 <I2C_getNum>
	int32_t Ret = I2C_OK;

	// Reset I2C setup value to default state
	TransferCfg->tx_count = 0;
    4812:	2300      	movs	r3, #0
    4814:	60cb      	str	r3, [r1, #12]
	TransferCfg->rx_count = 0;
    4816:	618b      	str	r3, [r1, #24]
	TransferCfg->status = 0;
    4818:	624b      	str	r3, [r1, #36]	; 0x24

	if (Opt == I2C_TRANSFER_POLLING)
    481a:	2a00      	cmp	r2, #0
    481c:	d141      	bne.n	48a2 <I2C_MasterTransferData+0x9e>
	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC|I2C_I2CONCLR_STOC|I2C_I2CONCLR_STAC;
    481e:	f04f 0938 	mov.w	r9, #56	; 0x38
	I2Cx->I2CONSET = I2C_I2CONSET_STA;
    4822:	f04f 0820 	mov.w	r8, #32
	{
		/* First Start condition -------------------------------------------------------------- */
		TransferCfg->retransmissions_count = 0;
    4826:	622a      	str	r2, [r5, #32]
retry:
		// Reset I2C setup value to default state
		TransferCfg->tx_count = 0;
    4828:	60ee      	str	r6, [r5, #12]
		TransferCfg->rx_count = 0;
    482a:	61ae      	str	r6, [r5, #24]
	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC|I2C_I2CONCLR_STOC|I2C_I2CONCLR_STAC;
    482c:	f8c4 9018 	str.w	r9, [r4, #24]
	I2Cx->I2CONSET = I2C_I2CONSET_STA;
    4830:	f8c4 8000 	str.w	r8, [r4]
	while (!(I2Cx->I2CONSET & I2C_I2CONSET_SI));
    4834:	6823      	ldr	r3, [r4, #0]
    4836:	071a      	lsls	r2, r3, #28
    4838:	d5fc      	bpl.n	4834 <I2C_MasterTransferData+0x30>
	I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
    483a:	f8c4 8018 	str.w	r8, [r4, #24]
	return (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
    483e:	6867      	ldr	r7, [r4, #4]
		// Start command
		CodeStatus = I2C_Start(I2Cx);
		
		while(1)	// send data first and then receive data from Slave.
		{
			Ret = I2C_MasterHanleStates(I2Cx, CodeStatus, TransferCfg);
    4840:	462a      	mov	r2, r5
	return (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
    4842:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
			Ret = I2C_MasterHanleStates(I2Cx, CodeStatus, TransferCfg);
    4846:	4639      	mov	r1, r7
    4848:	4620      	mov	r0, r4
    484a:	f7ff fe65 	bl	4518 <I2C_MasterHanleStates>
			if(I2C_CheckError(Ret))
    484e:	00c3      	lsls	r3, r0, #3
    4850:	d50b      	bpl.n	486a <I2C_MasterTransferData+0x66>
			{
				TransferCfg->retransmissions_count++;
    4852:	6a2b      	ldr	r3, [r5, #32]
				if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max){
    4854:	69ea      	ldr	r2, [r5, #28]
				TransferCfg->retransmissions_count++;
    4856:	3301      	adds	r3, #1
				if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max){
    4858:	4293      	cmp	r3, r2
				TransferCfg->retransmissions_count++;
    485a:	622b      	str	r3, [r5, #32]
				if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max){
    485c:	d9e4      	bls.n	4828 <I2C_MasterTransferData+0x24>
						// save status
						TransferCfg->status = CodeStatus | I2C_SETUP_STATUS_NOACKF;
    485e:	f447 7700 	orr.w	r7, r7, #512	; 0x200
    4862:	626f      	str	r7, [r5, #36]	; 0x24
			}
             		CodeStatus = I2Cx->I2STAT & I2C_STAT_CODE_BITMASK;
		}
		return SUCCESS;
error:
		return ERROR;
    4864:	2000      	movs	r0, #0
    4866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			else if( (Ret & I2C_BYTE_SENT) ||
    486a:	0787      	lsls	r7, r0, #30
    486c:	d003      	beq.n	4876 <I2C_MasterTransferData+0x72>
				while (!(I2Cx->I2CONSET & I2C_I2CONSET_SI));
    486e:	6823      	ldr	r3, [r4, #0]
    4870:	0718      	lsls	r0, r3, #28
    4872:	d5fc      	bpl.n	486e <I2C_MasterTransferData+0x6a>
    4874:	e7e3      	b.n	483e <I2C_MasterTransferData+0x3a>
			else if (Ret & I2C_SEND_END) // already send all data
    4876:	0701      	lsls	r1, r0, #28
    4878:	d50e      	bpl.n	4898 <I2C_MasterTransferData+0x94>
				if(TransferCfg->rx_count >= (TransferCfg->rx_length)) 
    487a:	69aa      	ldr	r2, [r5, #24]
    487c:	696b      	ldr	r3, [r5, #20]
    487e:	429a      	cmp	r2, r3
    4880:	d20c      	bcs.n	489c <I2C_MasterTransferData+0x98>
	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC|I2C_I2CONCLR_STOC|I2C_I2CONCLR_STAC;
    4882:	f8c4 9018 	str.w	r9, [r4, #24]
	I2Cx->I2CONSET = I2C_I2CONSET_STA;
    4886:	f8c4 8000 	str.w	r8, [r4]
	while (!(I2Cx->I2CONSET & I2C_I2CONSET_SI));
    488a:	6823      	ldr	r3, [r4, #0]
    488c:	071a      	lsls	r2, r3, #28
    488e:	d5fc      	bpl.n	488a <I2C_MasterTransferData+0x86>
	I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
    4890:	f8c4 8018 	str.w	r8, [r4, #24]
	return (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
    4894:	6863      	ldr	r3, [r4, #4]
    4896:	e7d2      	b.n	483e <I2C_MasterTransferData+0x3a>
			else if (Ret & I2C_RECV_END) // already receive all data
    4898:	06c3      	lsls	r3, r0, #27
    489a:	d5d0      	bpl.n	483e <I2C_MasterTransferData+0x3a>
		return SUCCESS;
    489c:	2001      	movs	r0, #1
    489e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	}

	else if (Opt == I2C_TRANSFER_INTERRUPT)
    48a2:	2a01      	cmp	r2, #1
    48a4:	d1de      	bne.n	4864 <I2C_MasterTransferData+0x60>
	{
		// Setup tx_rx data, callback and interrupt handler
		i2cdat[i2cId].txrx_setup = (uint32_t) TransferCfg;
    48a6:	4a07      	ldr	r2, [pc, #28]	; (48c4 <I2C_MasterTransferData+0xc0>)
    48a8:	f842 1030 	str.w	r1, [r2, r0, lsl #3]

		// Set direction phase, write first
		i2cdat[i2cId].dir = 0;
    48ac:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
    48b0:	6053      	str	r3, [r2, #4]

		/* First Start condition -------------------------------------------------------------- */
		// Reset STA, STO, SI
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC|I2C_I2CONCLR_STOC|I2C_I2CONCLR_STAC;
    48b2:	2338      	movs	r3, #56	; 0x38
    48b4:	61a3      	str	r3, [r4, #24]
		I2Cx->I2CONSET = I2C_I2CONSET_STA;
    48b6:	2320      	movs	r3, #32

		I2C_IntCmd(I2Cx, TRUE);
    48b8:	4631      	mov	r1, r6
		I2Cx->I2CONSET = I2C_I2CONSET_STA;
    48ba:	6023      	str	r3, [r4, #0]
		I2C_IntCmd(I2Cx, TRUE);
    48bc:	4620      	mov	r0, r4
    48be:	f7ff fdfa 	bl	44b6 <I2C_IntCmd>
    48c2:	e7eb      	b.n	489c <I2C_MasterTransferData+0x98>
    48c4:	10003458 	.word	0x10003458

000048c8 <I2C_SlaveTransferData>:
 * value.
 * - In case of writing operation (from master): slave will ignore remain data from master.
 **********************************************************************/
Status I2C_SlaveTransferData(LPC_I2C_TypeDef *I2Cx, I2C_S_SETUP_Type *TransferCfg, \
								I2C_TRANSFER_OPT_Type Opt)
{
    48c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    48cc:	4614      	mov	r4, r2
    48ce:	4605      	mov	r5, r0
    48d0:	460e      	mov	r6, r1
	int32_t   Ret = I2C_OK;
	
	uint32_t CodeStatus;
	uint32_t timeout;
	int32_t time_en;
	uint32_t i2cId = I2C_getNum(I2Cx);
    48d2:	f7ff fd4f 	bl	4374 <I2C_getNum>
	// Reset I2C setup value to default state
	TransferCfg->tx_count = 0;
    48d6:	2200      	movs	r2, #0
    48d8:	608a      	str	r2, [r1, #8]
	TransferCfg->rx_count = 0;
    48da:	614a      	str	r2, [r1, #20]
	TransferCfg->status = 0;
    48dc:	618a      	str	r2, [r1, #24]

	// Polling option
	if (Opt == I2C_TRANSFER_POLLING)
    48de:	bb84      	cbnz	r4, 4942 <I2C_SlaveTransferData+0x7a>
	{
		/* Set AA bit to ACK command on I2C bus */
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
    48e0:	2304      	movs	r3, #4
    48e2:	602b      	str	r3, [r5, #0]
		
		/* Clear SI bit to be ready ... */
		I2Cx->I2CONCLR = (I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC|I2C_I2CONCLR_STOC);
    48e4:	2338      	movs	r3, #56	; 0x38

		time_en = 0;
		timeout = 0;
    48e6:	46a0      	mov	r8, r4
		I2Cx->I2CONCLR = (I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC|I2C_I2CONCLR_STOC);
    48e8:	61ab      	str	r3, [r5, #24]

		while (1)
		{
			/* Check SI flag ready */
			if (I2Cx->I2CONSET & I2C_I2CONSET_SI)
    48ea:	682b      	ldr	r3, [r5, #0]
    48ec:	0719      	lsls	r1, r3, #28
    48ee:	d51a      	bpl.n	4926 <I2C_SlaveTransferData+0x5e>
			{
				time_en = 0;

				CodeStatus = (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
    48f0:	686f      	ldr	r7, [r5, #4]

				Ret = I2C_SlaveHanleStates(I2Cx, CodeStatus, TransferCfg);
    48f2:	4632      	mov	r2, r6
				CodeStatus = (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
    48f4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
				Ret = I2C_SlaveHanleStates(I2Cx, CodeStatus, TransferCfg);
    48f8:	4639      	mov	r1, r7
    48fa:	4628      	mov	r0, r5
    48fc:	f7ff fe8c 	bl	4618 <I2C_SlaveHanleStates>
				if(I2C_CheckError(Ret))
    4900:	f010 5380 	ands.w	r3, r0, #268435456	; 0x10000000
    4904:	d117      	bne.n	4936 <I2C_SlaveTransferData+0x6e>
				{
					goto s_error;
				}
				else if(Ret & I2C_STA_STO_RECV)
    4906:	0682      	lsls	r2, r0, #26
    4908:	d40a      	bmi.n	4920 <I2C_SlaveTransferData+0x58>
				{
					time_en = 1;
					timeout = 0;
				}
                else if (Ret & I2C_SEND_END)
    490a:	f010 0408 	ands.w	r4, r0, #8
    490e:	d0ec      	beq.n	48ea <I2C_SlaveTransferData+0x22>
			}
		}

s_end_stage:
		/* Clear AA bit to disable ACK on I2C bus */
		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC;
    4910:	2304      	movs	r3, #4

		// Check if there's no error during operation
		// Update status
		TransferCfg->status = CodeStatus | I2C_SETUP_STATUS_DONE;
    4912:	f447 6780 	orr.w	r7, r7, #1024	; 0x400
		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC;
    4916:	61ab      	str	r3, [r5, #24]
		TransferCfg->status = CodeStatus | I2C_SETUP_STATUS_DONE;
    4918:	61b7      	str	r7, [r6, #24]
		return SUCCESS;
    491a:	2001      	movs	r0, #1
    491c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					time_en = 1;
    4920:	2401      	movs	r4, #1
				if (timeout++ > I2C_SLAVE_TIME_OUT)
    4922:	4698      	mov	r8, r3
    4924:	e7e1      	b.n	48ea <I2C_SlaveTransferData+0x22>
			else if (time_en)
    4926:	2c00      	cmp	r4, #0
    4928:	d0df      	beq.n	48ea <I2C_SlaveTransferData+0x22>
				if (timeout++ > I2C_SLAVE_TIME_OUT)
    492a:	f5b8 3f80 	cmp.w	r8, #65536	; 0x10000
    492e:	f108 0301 	add.w	r3, r8, #1
    4932:	d9f6      	bls.n	4922 <I2C_SlaveTransferData+0x5a>
    4934:	e7ec      	b.n	4910 <I2C_SlaveTransferData+0x48>

s_error:
		/* Clear AA bit to disable ACK on I2C bus */
		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC;
    4936:	2304      	movs	r3, #4
    4938:	61ab      	str	r3, [r5, #24]

		// Update status
		TransferCfg->status = CodeStatus;
    493a:	61b7      	str	r7, [r6, #24]
		return ERROR;
    493c:	2000      	movs	r0, #0
    493e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	else if (Opt == I2C_TRANSFER_INTERRUPT)
    4942:	2c01      	cmp	r4, #1
    4944:	d1fa      	bne.n	493c <I2C_SlaveTransferData+0x74>
	{
		// Setup tx_rx data, callback and interrupt handler
		i2cdat[i2cId].txrx_setup = (uint32_t) TransferCfg;
    4946:	4b07      	ldr	r3, [pc, #28]	; (4964 <I2C_SlaveTransferData+0x9c>)
    4948:	f843 1030 	str.w	r1, [r3, r0, lsl #3]

		// Set direction phase, read first
		i2cdat[i2cId].dir = 1;
    494c:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    4950:	605c      	str	r4, [r3, #4]

		// Enable AA
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
    4952:	2304      	movs	r3, #4
    4954:	602b      	str	r3, [r5, #0]
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC;
    4956:	2328      	movs	r3, #40	; 0x28
		I2C_IntCmd(I2Cx, TRUE);
    4958:	4621      	mov	r1, r4
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC;
    495a:	61ab      	str	r3, [r5, #24]
		I2C_IntCmd(I2Cx, TRUE);
    495c:	4628      	mov	r0, r5
    495e:	f7ff fdaa 	bl	44b6 <I2C_IntCmd>
    4962:	e7da      	b.n	491a <I2C_SlaveTransferData+0x52>
    4964:	10003458 	.word	0x10003458

00004968 <I2C_SetOwnSlaveAddr>:
	CHECK_PARAM(PARAM_I2Cx(I2Cx));
	CHECK_PARAM(PARAM_I2C_SLAVEADDR_CH(OwnSlaveAddrConfigStruct->SlaveAddrChannel));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(OwnSlaveAddrConfigStruct->GeneralCallState));

	tmp = (((uint32_t)(OwnSlaveAddrConfigStruct->SlaveAddr_7bit << 1)) \
			| ((OwnSlaveAddrConfigStruct->GeneralCallState == ENABLE) ? 0x01 : 0x00))& I2C_I2ADR_BITMASK;
    4968:	788b      	ldrb	r3, [r1, #2]
{
    496a:	b500      	push	{lr}
			| ((OwnSlaveAddrConfigStruct->GeneralCallState == ENABLE) ? 0x01 : 0x00))& I2C_I2ADR_BITMASK;
    496c:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
	tmp = (((uint32_t)(OwnSlaveAddrConfigStruct->SlaveAddr_7bit << 1)) \
    4970:	784a      	ldrb	r2, [r1, #1]
			| ((OwnSlaveAddrConfigStruct->GeneralCallState == ENABLE) ? 0x01 : 0x00))& I2C_I2ADR_BITMASK;
    4972:	f1de 0300 	rsbs	r3, lr, #0
    4976:	eb43 030e 	adc.w	r3, r3, lr
    497a:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
	switch (OwnSlaveAddrConfigStruct->SlaveAddrChannel)
    497e:	780a      	ldrb	r2, [r1, #0]
	tmp = (((uint32_t)(OwnSlaveAddrConfigStruct->SlaveAddr_7bit << 1)) \
    4980:	b2db      	uxtb	r3, r3
	switch (OwnSlaveAddrConfigStruct->SlaveAddrChannel)
    4982:	2a03      	cmp	r2, #3
    4984:	d808      	bhi.n	4998 <I2C_SetOwnSlaveAddr+0x30>
    4986:	e8df f002 	tbb	[pc, r2]
    498a:	0902      	.short	0x0902
    498c:	150f      	.short	0x150f
	{
	case 0:
		I2Cx->I2ADR0 = tmp;
    498e:	60c3      	str	r3, [r0, #12]
		I2Cx->I2MASK0 = I2C_I2MASK_MASK((uint32_t) \
    4990:	78cb      	ldrb	r3, [r1, #3]
    4992:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    4996:	6303      	str	r3, [r0, #48]	; 0x30
    4998:	f85d fb04 	ldr.w	pc, [sp], #4
				(OwnSlaveAddrConfigStruct->SlaveAddrMaskValue));
		break;
	case 1:
		I2Cx->I2ADR1 = tmp;
    499c:	6203      	str	r3, [r0, #32]
		I2Cx->I2MASK1 = I2C_I2MASK_MASK((uint32_t) \
    499e:	78cb      	ldrb	r3, [r1, #3]
    49a0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    49a4:	6343      	str	r3, [r0, #52]	; 0x34
    49a6:	e7f7      	b.n	4998 <I2C_SetOwnSlaveAddr+0x30>
				(OwnSlaveAddrConfigStruct->SlaveAddrMaskValue));
		break;
	case 2:
		I2Cx->I2ADR2 = tmp;
    49a8:	6243      	str	r3, [r0, #36]	; 0x24
		I2Cx->I2MASK2 = I2C_I2MASK_MASK((uint32_t) \
    49aa:	78cb      	ldrb	r3, [r1, #3]
    49ac:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    49b0:	6383      	str	r3, [r0, #56]	; 0x38
    49b2:	e7f1      	b.n	4998 <I2C_SetOwnSlaveAddr+0x30>
				(OwnSlaveAddrConfigStruct->SlaveAddrMaskValue));
		break;
	case 3:
		I2Cx->I2ADR3 = tmp;
    49b4:	6283      	str	r3, [r0, #40]	; 0x28
		I2Cx->I2MASK3 = I2C_I2MASK_MASK((uint32_t) \
    49b6:	78cb      	ldrb	r3, [r1, #3]
    49b8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    49bc:	63c3      	str	r3, [r0, #60]	; 0x3c
				(OwnSlaveAddrConfigStruct->SlaveAddrMaskValue));
		break;
	}
}
    49be:	e7eb      	b.n	4998 <I2C_SetOwnSlaveAddr+0x30>

000049c0 <I2C_MonitorModeConfig>:
{
	CHECK_PARAM(PARAM_I2Cx(I2Cx));
	CHECK_PARAM(PARAM_I2C_MONITOR_CFG(MonitorCfgType));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
    49c0:	2a01      	cmp	r2, #1
	{
		I2Cx->MMCTRL |= MonitorCfgType;
	}
	else
	{
		I2Cx->MMCTRL &= (~MonitorCfgType) & I2C_I2MMCTRL_BITMASK;
    49c2:	bf18      	it	ne
    49c4:	43c9      	mvnne	r1, r1
		I2Cx->MMCTRL |= MonitorCfgType;
    49c6:	69c3      	ldr	r3, [r0, #28]
		I2Cx->MMCTRL &= (~MonitorCfgType) & I2C_I2MMCTRL_BITMASK;
    49c8:	bf16      	itet	ne
    49ca:	f001 0107 	andne.w	r1, r1, #7
		I2Cx->MMCTRL |= MonitorCfgType;
    49ce:	4319      	orreq	r1, r3
		I2Cx->MMCTRL &= (~MonitorCfgType) & I2C_I2MMCTRL_BITMASK;
    49d0:	4019      	andne	r1, r3
    49d2:	61c1      	str	r1, [r0, #28]
    49d4:	4770      	bx	lr

000049d6 <I2C_MonitorModeCmd>:
	CHECK_PARAM(PARAM_I2Cx(I2Cx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
	{
		I2Cx->MMCTRL |= I2C_I2MMCTRL_MM_ENA;
    49d6:	69c3      	ldr	r3, [r0, #28]
	if (NewState == ENABLE)
    49d8:	2901      	cmp	r1, #1
		I2Cx->MMCTRL |= I2C_I2MMCTRL_MM_ENA;
    49da:	bf03      	ittte	eq
    49dc:	f043 0301 	orreq.w	r3, r3, #1
    49e0:	61c3      	streq	r3, [r0, #28]
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
    49e2:	2304      	moveq	r3, #4
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC;
	}
	else
	{
		I2Cx->MMCTRL &= (~I2C_I2MMCTRL_MM_ENA) & I2C_I2MMCTRL_BITMASK;
    49e4:	f003 0306 	andne.w	r3, r3, #6
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
    49e8:	bf0b      	itete	eq
    49ea:	6003      	streq	r3, [r0, #0]
		I2Cx->MMCTRL &= (~I2C_I2MMCTRL_MM_ENA) & I2C_I2MMCTRL_BITMASK;
    49ec:	61c3      	strne	r3, [r0, #28]
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC;
    49ee:	2328      	moveq	r3, #40	; 0x28
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC | I2C_I2CONCLR_AAC;
    49f0:	232c      	movne	r3, #44	; 0x2c
	}
	I2C_MonitorBufferIndex = 0;
    49f2:	2200      	movs	r2, #0
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC | I2C_I2CONCLR_AAC;
    49f4:	6183      	str	r3, [r0, #24]
	I2C_MonitorBufferIndex = 0;
    49f6:	4b01      	ldr	r3, [pc, #4]	; (49fc <I2C_MonitorModeCmd+0x26>)
    49f8:	631a      	str	r2, [r3, #48]	; 0x30
    49fa:	4770      	bx	lr
    49fc:	10003458 	.word	0x10003458

00004a00 <I2C_MonitorGetDatabuffer>:
 * new data.
 **********************************************************************/
uint8_t I2C_MonitorGetDatabuffer(LPC_I2C_TypeDef *I2Cx)
{
	CHECK_PARAM(PARAM_I2Cx(I2Cx));
	return ((uint8_t)(I2Cx->I2DATA_BUFFER));
    4a00:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
    4a02:	b2c0      	uxtb	r0, r0
    4a04:	4770      	bx	lr

00004a06 <I2C_MonitorHandler>:
 **********************************************************************/
BOOL_8 I2C_MonitorHandler(LPC_I2C_TypeDef *I2Cx, uint8_t *buffer, uint32_t size)
{
	BOOL_8 ret=FALSE;

	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    4a06:	2308      	movs	r3, #8
{
    4a08:	b510      	push	{r4, lr}

	buffer[I2C_MonitorBufferIndex] = (uint8_t)(I2Cx->I2DATA_BUFFER);
    4a0a:	4c06      	ldr	r4, [pc, #24]	; (4a24 <I2C_MonitorHandler+0x1e>)
	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
    4a0c:	6183      	str	r3, [r0, #24]
	buffer[I2C_MonitorBufferIndex] = (uint8_t)(I2Cx->I2DATA_BUFFER);
    4a0e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    4a10:	6b23      	ldr	r3, [r4, #48]	; 0x30
    4a12:	54c8      	strb	r0, [r1, r3]
	I2C_MonitorBufferIndex++;
    4a14:	1c58      	adds	r0, r3, #1
	if(I2C_MonitorBufferIndex >= size)
	{
		ret = TRUE;
	}
	return ret;
}
    4a16:	4290      	cmp	r0, r2
	I2C_MonitorBufferIndex++;
    4a18:	6320      	str	r0, [r4, #48]	; 0x30
}
    4a1a:	bf34      	ite	cc
    4a1c:	2000      	movcc	r0, #0
    4a1e:	2001      	movcs	r0, #1
    4a20:	bd10      	pop	{r4, pc}
    4a22:	bf00      	nop
    4a24:	10003458 	.word	0x10003458

00004a28 <I2C_MasterTransferComplete>:
 * @return 		Master transfer status, could be:
 * 				- TRUE	master transfer completed
 * 				- FALSE master transfer have not completed yet
 **********************************************************************/
uint32_t I2C_MasterTransferComplete(LPC_I2C_TypeDef *I2Cx)
{
    4a28:	b508      	push	{r3, lr}
	uint32_t retval, tmp;
	tmp = I2C_getNum(I2Cx);
    4a2a:	f7ff fca3 	bl	4374 <I2C_getNum>
	retval = I2C_MasterComplete[tmp];
	I2C_MasterComplete[tmp] = FALSE;
    4a2e:	2200      	movs	r2, #0
	retval = I2C_MasterComplete[tmp];
    4a30:	4b02      	ldr	r3, [pc, #8]	; (4a3c <I2C_MasterTransferComplete+0x14>)
    4a32:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    4a36:	6998      	ldr	r0, [r3, #24]
	I2C_MasterComplete[tmp] = FALSE;
    4a38:	619a      	str	r2, [r3, #24]
	return retval;
}
    4a3a:	bd08      	pop	{r3, pc}
    4a3c:	10003458 	.word	0x10003458

00004a40 <I2C_SlaveTransferComplete>:
 * 				- LPC_I2C1
 * 				- LPC_I2C2
 * @return 		Complete status, could be: TRUE/FALSE
 **********************************************************************/
uint32_t I2C_SlaveTransferComplete(LPC_I2C_TypeDef *I2Cx)
{
    4a40:	b508      	push	{r3, lr}
	uint32_t retval, tmp;
	tmp = I2C_getNum(I2Cx);
    4a42:	f7ff fc97 	bl	4374 <I2C_getNum>
	retval = I2C_SlaveComplete[tmp];
	I2C_SlaveComplete[tmp] = FALSE;
    4a46:	2200      	movs	r2, #0
	retval = I2C_SlaveComplete[tmp];
    4a48:	4b02      	ldr	r3, [pc, #8]	; (4a54 <I2C_SlaveTransferComplete+0x14>)
    4a4a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    4a4e:	6a58      	ldr	r0, [r3, #36]	; 0x24
	I2C_SlaveComplete[tmp] = FALSE;
    4a50:	625a      	str	r2, [r3, #36]	; 0x24
	return retval;
}
    4a52:	bd08      	pop	{r3, pc}
    4a54:	10003458 	.word	0x10003458

00004a58 <__aeabi_drsub>:
    4a58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    4a5c:	e002      	b.n	4a64 <__adddf3>
    4a5e:	bf00      	nop

00004a60 <__aeabi_dsub>:
    4a60:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00004a64 <__adddf3>:
    4a64:	b530      	push	{r4, r5, lr}
    4a66:	ea4f 0441 	mov.w	r4, r1, lsl #1
    4a6a:	ea4f 0543 	mov.w	r5, r3, lsl #1
    4a6e:	ea94 0f05 	teq	r4, r5
    4a72:	bf08      	it	eq
    4a74:	ea90 0f02 	teqeq	r0, r2
    4a78:	bf1f      	itttt	ne
    4a7a:	ea54 0c00 	orrsne.w	ip, r4, r0
    4a7e:	ea55 0c02 	orrsne.w	ip, r5, r2
    4a82:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    4a86:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    4a8a:	f000 80e2 	beq.w	4c52 <__adddf3+0x1ee>
    4a8e:	ea4f 5454 	mov.w	r4, r4, lsr #21
    4a92:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    4a96:	bfb8      	it	lt
    4a98:	426d      	neglt	r5, r5
    4a9a:	dd0c      	ble.n	4ab6 <__adddf3+0x52>
    4a9c:	442c      	add	r4, r5
    4a9e:	ea80 0202 	eor.w	r2, r0, r2
    4aa2:	ea81 0303 	eor.w	r3, r1, r3
    4aa6:	ea82 0000 	eor.w	r0, r2, r0
    4aaa:	ea83 0101 	eor.w	r1, r3, r1
    4aae:	ea80 0202 	eor.w	r2, r0, r2
    4ab2:	ea81 0303 	eor.w	r3, r1, r3
    4ab6:	2d36      	cmp	r5, #54	; 0x36
    4ab8:	bf88      	it	hi
    4aba:	bd30      	pophi	{r4, r5, pc}
    4abc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    4ac0:	ea4f 3101 	mov.w	r1, r1, lsl #12
    4ac4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    4ac8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    4acc:	d002      	beq.n	4ad4 <__adddf3+0x70>
    4ace:	4240      	negs	r0, r0
    4ad0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    4ad4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    4ad8:	ea4f 3303 	mov.w	r3, r3, lsl #12
    4adc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    4ae0:	d002      	beq.n	4ae8 <__adddf3+0x84>
    4ae2:	4252      	negs	r2, r2
    4ae4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    4ae8:	ea94 0f05 	teq	r4, r5
    4aec:	f000 80a7 	beq.w	4c3e <__adddf3+0x1da>
    4af0:	f1a4 0401 	sub.w	r4, r4, #1
    4af4:	f1d5 0e20 	rsbs	lr, r5, #32
    4af8:	db0d      	blt.n	4b16 <__adddf3+0xb2>
    4afa:	fa02 fc0e 	lsl.w	ip, r2, lr
    4afe:	fa22 f205 	lsr.w	r2, r2, r5
    4b02:	1880      	adds	r0, r0, r2
    4b04:	f141 0100 	adc.w	r1, r1, #0
    4b08:	fa03 f20e 	lsl.w	r2, r3, lr
    4b0c:	1880      	adds	r0, r0, r2
    4b0e:	fa43 f305 	asr.w	r3, r3, r5
    4b12:	4159      	adcs	r1, r3
    4b14:	e00e      	b.n	4b34 <__adddf3+0xd0>
    4b16:	f1a5 0520 	sub.w	r5, r5, #32
    4b1a:	f10e 0e20 	add.w	lr, lr, #32
    4b1e:	2a01      	cmp	r2, #1
    4b20:	fa03 fc0e 	lsl.w	ip, r3, lr
    4b24:	bf28      	it	cs
    4b26:	f04c 0c02 	orrcs.w	ip, ip, #2
    4b2a:	fa43 f305 	asr.w	r3, r3, r5
    4b2e:	18c0      	adds	r0, r0, r3
    4b30:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    4b34:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    4b38:	d507      	bpl.n	4b4a <__adddf3+0xe6>
    4b3a:	f04f 0e00 	mov.w	lr, #0
    4b3e:	f1dc 0c00 	rsbs	ip, ip, #0
    4b42:	eb7e 0000 	sbcs.w	r0, lr, r0
    4b46:	eb6e 0101 	sbc.w	r1, lr, r1
    4b4a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    4b4e:	d31b      	bcc.n	4b88 <__adddf3+0x124>
    4b50:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    4b54:	d30c      	bcc.n	4b70 <__adddf3+0x10c>
    4b56:	0849      	lsrs	r1, r1, #1
    4b58:	ea5f 0030 	movs.w	r0, r0, rrx
    4b5c:	ea4f 0c3c 	mov.w	ip, ip, rrx
    4b60:	f104 0401 	add.w	r4, r4, #1
    4b64:	ea4f 5244 	mov.w	r2, r4, lsl #21
    4b68:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    4b6c:	f080 809a 	bcs.w	4ca4 <__adddf3+0x240>
    4b70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    4b74:	bf08      	it	eq
    4b76:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    4b7a:	f150 0000 	adcs.w	r0, r0, #0
    4b7e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    4b82:	ea41 0105 	orr.w	r1, r1, r5
    4b86:	bd30      	pop	{r4, r5, pc}
    4b88:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    4b8c:	4140      	adcs	r0, r0
    4b8e:	eb41 0101 	adc.w	r1, r1, r1
    4b92:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    4b96:	f1a4 0401 	sub.w	r4, r4, #1
    4b9a:	d1e9      	bne.n	4b70 <__adddf3+0x10c>
    4b9c:	f091 0f00 	teq	r1, #0
    4ba0:	bf04      	itt	eq
    4ba2:	4601      	moveq	r1, r0
    4ba4:	2000      	moveq	r0, #0
    4ba6:	fab1 f381 	clz	r3, r1
    4baa:	bf08      	it	eq
    4bac:	3320      	addeq	r3, #32
    4bae:	f1a3 030b 	sub.w	r3, r3, #11
    4bb2:	f1b3 0220 	subs.w	r2, r3, #32
    4bb6:	da0c      	bge.n	4bd2 <__adddf3+0x16e>
    4bb8:	320c      	adds	r2, #12
    4bba:	dd08      	ble.n	4bce <__adddf3+0x16a>
    4bbc:	f102 0c14 	add.w	ip, r2, #20
    4bc0:	f1c2 020c 	rsb	r2, r2, #12
    4bc4:	fa01 f00c 	lsl.w	r0, r1, ip
    4bc8:	fa21 f102 	lsr.w	r1, r1, r2
    4bcc:	e00c      	b.n	4be8 <__adddf3+0x184>
    4bce:	f102 0214 	add.w	r2, r2, #20
    4bd2:	bfd8      	it	le
    4bd4:	f1c2 0c20 	rsble	ip, r2, #32
    4bd8:	fa01 f102 	lsl.w	r1, r1, r2
    4bdc:	fa20 fc0c 	lsr.w	ip, r0, ip
    4be0:	bfdc      	itt	le
    4be2:	ea41 010c 	orrle.w	r1, r1, ip
    4be6:	4090      	lslle	r0, r2
    4be8:	1ae4      	subs	r4, r4, r3
    4bea:	bfa2      	ittt	ge
    4bec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    4bf0:	4329      	orrge	r1, r5
    4bf2:	bd30      	popge	{r4, r5, pc}
    4bf4:	ea6f 0404 	mvn.w	r4, r4
    4bf8:	3c1f      	subs	r4, #31
    4bfa:	da1c      	bge.n	4c36 <__adddf3+0x1d2>
    4bfc:	340c      	adds	r4, #12
    4bfe:	dc0e      	bgt.n	4c1e <__adddf3+0x1ba>
    4c00:	f104 0414 	add.w	r4, r4, #20
    4c04:	f1c4 0220 	rsb	r2, r4, #32
    4c08:	fa20 f004 	lsr.w	r0, r0, r4
    4c0c:	fa01 f302 	lsl.w	r3, r1, r2
    4c10:	ea40 0003 	orr.w	r0, r0, r3
    4c14:	fa21 f304 	lsr.w	r3, r1, r4
    4c18:	ea45 0103 	orr.w	r1, r5, r3
    4c1c:	bd30      	pop	{r4, r5, pc}
    4c1e:	f1c4 040c 	rsb	r4, r4, #12
    4c22:	f1c4 0220 	rsb	r2, r4, #32
    4c26:	fa20 f002 	lsr.w	r0, r0, r2
    4c2a:	fa01 f304 	lsl.w	r3, r1, r4
    4c2e:	ea40 0003 	orr.w	r0, r0, r3
    4c32:	4629      	mov	r1, r5
    4c34:	bd30      	pop	{r4, r5, pc}
    4c36:	fa21 f004 	lsr.w	r0, r1, r4
    4c3a:	4629      	mov	r1, r5
    4c3c:	bd30      	pop	{r4, r5, pc}
    4c3e:	f094 0f00 	teq	r4, #0
    4c42:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    4c46:	bf06      	itte	eq
    4c48:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    4c4c:	3401      	addeq	r4, #1
    4c4e:	3d01      	subne	r5, #1
    4c50:	e74e      	b.n	4af0 <__adddf3+0x8c>
    4c52:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    4c56:	bf18      	it	ne
    4c58:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    4c5c:	d029      	beq.n	4cb2 <__adddf3+0x24e>
    4c5e:	ea94 0f05 	teq	r4, r5
    4c62:	bf08      	it	eq
    4c64:	ea90 0f02 	teqeq	r0, r2
    4c68:	d005      	beq.n	4c76 <__adddf3+0x212>
    4c6a:	ea54 0c00 	orrs.w	ip, r4, r0
    4c6e:	bf04      	itt	eq
    4c70:	4619      	moveq	r1, r3
    4c72:	4610      	moveq	r0, r2
    4c74:	bd30      	pop	{r4, r5, pc}
    4c76:	ea91 0f03 	teq	r1, r3
    4c7a:	bf1e      	ittt	ne
    4c7c:	2100      	movne	r1, #0
    4c7e:	2000      	movne	r0, #0
    4c80:	bd30      	popne	{r4, r5, pc}
    4c82:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    4c86:	d105      	bne.n	4c94 <__adddf3+0x230>
    4c88:	0040      	lsls	r0, r0, #1
    4c8a:	4149      	adcs	r1, r1
    4c8c:	bf28      	it	cs
    4c8e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    4c92:	bd30      	pop	{r4, r5, pc}
    4c94:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    4c98:	bf3c      	itt	cc
    4c9a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    4c9e:	bd30      	popcc	{r4, r5, pc}
    4ca0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    4ca4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    4ca8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    4cac:	f04f 0000 	mov.w	r0, #0
    4cb0:	bd30      	pop	{r4, r5, pc}
    4cb2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    4cb6:	bf1a      	itte	ne
    4cb8:	4619      	movne	r1, r3
    4cba:	4610      	movne	r0, r2
    4cbc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    4cc0:	bf1c      	itt	ne
    4cc2:	460b      	movne	r3, r1
    4cc4:	4602      	movne	r2, r0
    4cc6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    4cca:	bf06      	itte	eq
    4ccc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    4cd0:	ea91 0f03 	teqeq	r1, r3
    4cd4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    4cd8:	bd30      	pop	{r4, r5, pc}
    4cda:	bf00      	nop

00004cdc <__aeabi_ui2d>:
    4cdc:	f090 0f00 	teq	r0, #0
    4ce0:	bf04      	itt	eq
    4ce2:	2100      	moveq	r1, #0
    4ce4:	4770      	bxeq	lr
    4ce6:	b530      	push	{r4, r5, lr}
    4ce8:	f44f 6480 	mov.w	r4, #1024	; 0x400
    4cec:	f104 0432 	add.w	r4, r4, #50	; 0x32
    4cf0:	f04f 0500 	mov.w	r5, #0
    4cf4:	f04f 0100 	mov.w	r1, #0
    4cf8:	e750      	b.n	4b9c <__adddf3+0x138>
    4cfa:	bf00      	nop

00004cfc <__aeabi_i2d>:
    4cfc:	f090 0f00 	teq	r0, #0
    4d00:	bf04      	itt	eq
    4d02:	2100      	moveq	r1, #0
    4d04:	4770      	bxeq	lr
    4d06:	b530      	push	{r4, r5, lr}
    4d08:	f44f 6480 	mov.w	r4, #1024	; 0x400
    4d0c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    4d10:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    4d14:	bf48      	it	mi
    4d16:	4240      	negmi	r0, r0
    4d18:	f04f 0100 	mov.w	r1, #0
    4d1c:	e73e      	b.n	4b9c <__adddf3+0x138>
    4d1e:	bf00      	nop

00004d20 <__aeabi_f2d>:
    4d20:	0042      	lsls	r2, r0, #1
    4d22:	ea4f 01e2 	mov.w	r1, r2, asr #3
    4d26:	ea4f 0131 	mov.w	r1, r1, rrx
    4d2a:	ea4f 7002 	mov.w	r0, r2, lsl #28
    4d2e:	bf1f      	itttt	ne
    4d30:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    4d34:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    4d38:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    4d3c:	4770      	bxne	lr
    4d3e:	f092 0f00 	teq	r2, #0
    4d42:	bf14      	ite	ne
    4d44:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    4d48:	4770      	bxeq	lr
    4d4a:	b530      	push	{r4, r5, lr}
    4d4c:	f44f 7460 	mov.w	r4, #896	; 0x380
    4d50:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    4d54:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    4d58:	e720      	b.n	4b9c <__adddf3+0x138>
    4d5a:	bf00      	nop

00004d5c <__aeabi_ul2d>:
    4d5c:	ea50 0201 	orrs.w	r2, r0, r1
    4d60:	bf08      	it	eq
    4d62:	4770      	bxeq	lr
    4d64:	b530      	push	{r4, r5, lr}
    4d66:	f04f 0500 	mov.w	r5, #0
    4d6a:	e00a      	b.n	4d82 <__aeabi_l2d+0x16>

00004d6c <__aeabi_l2d>:
    4d6c:	ea50 0201 	orrs.w	r2, r0, r1
    4d70:	bf08      	it	eq
    4d72:	4770      	bxeq	lr
    4d74:	b530      	push	{r4, r5, lr}
    4d76:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    4d7a:	d502      	bpl.n	4d82 <__aeabi_l2d+0x16>
    4d7c:	4240      	negs	r0, r0
    4d7e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    4d82:	f44f 6480 	mov.w	r4, #1024	; 0x400
    4d86:	f104 0432 	add.w	r4, r4, #50	; 0x32
    4d8a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    4d8e:	f43f aedc 	beq.w	4b4a <__adddf3+0xe6>
    4d92:	f04f 0203 	mov.w	r2, #3
    4d96:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    4d9a:	bf18      	it	ne
    4d9c:	3203      	addne	r2, #3
    4d9e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    4da2:	bf18      	it	ne
    4da4:	3203      	addne	r2, #3
    4da6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    4daa:	f1c2 0320 	rsb	r3, r2, #32
    4dae:	fa00 fc03 	lsl.w	ip, r0, r3
    4db2:	fa20 f002 	lsr.w	r0, r0, r2
    4db6:	fa01 fe03 	lsl.w	lr, r1, r3
    4dba:	ea40 000e 	orr.w	r0, r0, lr
    4dbe:	fa21 f102 	lsr.w	r1, r1, r2
    4dc2:	4414      	add	r4, r2
    4dc4:	e6c1      	b.n	4b4a <__adddf3+0xe6>
    4dc6:	bf00      	nop

00004dc8 <__aeabi_dmul>:
    4dc8:	b570      	push	{r4, r5, r6, lr}
    4dca:	f04f 0cff 	mov.w	ip, #255	; 0xff
    4dce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    4dd2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    4dd6:	bf1d      	ittte	ne
    4dd8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    4ddc:	ea94 0f0c 	teqne	r4, ip
    4de0:	ea95 0f0c 	teqne	r5, ip
    4de4:	f000 f8de 	bleq	4fa4 <__aeabi_dmul+0x1dc>
    4de8:	442c      	add	r4, r5
    4dea:	ea81 0603 	eor.w	r6, r1, r3
    4dee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    4df2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    4df6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    4dfa:	bf18      	it	ne
    4dfc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    4e00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    4e04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    4e08:	d038      	beq.n	4e7c <__aeabi_dmul+0xb4>
    4e0a:	fba0 ce02 	umull	ip, lr, r0, r2
    4e0e:	f04f 0500 	mov.w	r5, #0
    4e12:	fbe1 e502 	umlal	lr, r5, r1, r2
    4e16:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    4e1a:	fbe0 e503 	umlal	lr, r5, r0, r3
    4e1e:	f04f 0600 	mov.w	r6, #0
    4e22:	fbe1 5603 	umlal	r5, r6, r1, r3
    4e26:	f09c 0f00 	teq	ip, #0
    4e2a:	bf18      	it	ne
    4e2c:	f04e 0e01 	orrne.w	lr, lr, #1
    4e30:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    4e34:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    4e38:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    4e3c:	d204      	bcs.n	4e48 <__aeabi_dmul+0x80>
    4e3e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    4e42:	416d      	adcs	r5, r5
    4e44:	eb46 0606 	adc.w	r6, r6, r6
    4e48:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    4e4c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    4e50:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    4e54:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    4e58:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    4e5c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    4e60:	bf88      	it	hi
    4e62:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    4e66:	d81e      	bhi.n	4ea6 <__aeabi_dmul+0xde>
    4e68:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    4e6c:	bf08      	it	eq
    4e6e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    4e72:	f150 0000 	adcs.w	r0, r0, #0
    4e76:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    4e7a:	bd70      	pop	{r4, r5, r6, pc}
    4e7c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    4e80:	ea46 0101 	orr.w	r1, r6, r1
    4e84:	ea40 0002 	orr.w	r0, r0, r2
    4e88:	ea81 0103 	eor.w	r1, r1, r3
    4e8c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    4e90:	bfc2      	ittt	gt
    4e92:	ebd4 050c 	rsbsgt	r5, r4, ip
    4e96:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    4e9a:	bd70      	popgt	{r4, r5, r6, pc}
    4e9c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    4ea0:	f04f 0e00 	mov.w	lr, #0
    4ea4:	3c01      	subs	r4, #1
    4ea6:	f300 80ab 	bgt.w	5000 <__aeabi_dmul+0x238>
    4eaa:	f114 0f36 	cmn.w	r4, #54	; 0x36
    4eae:	bfde      	ittt	le
    4eb0:	2000      	movle	r0, #0
    4eb2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    4eb6:	bd70      	pople	{r4, r5, r6, pc}
    4eb8:	f1c4 0400 	rsb	r4, r4, #0
    4ebc:	3c20      	subs	r4, #32
    4ebe:	da35      	bge.n	4f2c <__aeabi_dmul+0x164>
    4ec0:	340c      	adds	r4, #12
    4ec2:	dc1b      	bgt.n	4efc <__aeabi_dmul+0x134>
    4ec4:	f104 0414 	add.w	r4, r4, #20
    4ec8:	f1c4 0520 	rsb	r5, r4, #32
    4ecc:	fa00 f305 	lsl.w	r3, r0, r5
    4ed0:	fa20 f004 	lsr.w	r0, r0, r4
    4ed4:	fa01 f205 	lsl.w	r2, r1, r5
    4ed8:	ea40 0002 	orr.w	r0, r0, r2
    4edc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    4ee0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    4ee4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    4ee8:	fa21 f604 	lsr.w	r6, r1, r4
    4eec:	eb42 0106 	adc.w	r1, r2, r6
    4ef0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    4ef4:	bf08      	it	eq
    4ef6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    4efa:	bd70      	pop	{r4, r5, r6, pc}
    4efc:	f1c4 040c 	rsb	r4, r4, #12
    4f00:	f1c4 0520 	rsb	r5, r4, #32
    4f04:	fa00 f304 	lsl.w	r3, r0, r4
    4f08:	fa20 f005 	lsr.w	r0, r0, r5
    4f0c:	fa01 f204 	lsl.w	r2, r1, r4
    4f10:	ea40 0002 	orr.w	r0, r0, r2
    4f14:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    4f18:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    4f1c:	f141 0100 	adc.w	r1, r1, #0
    4f20:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    4f24:	bf08      	it	eq
    4f26:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    4f2a:	bd70      	pop	{r4, r5, r6, pc}
    4f2c:	f1c4 0520 	rsb	r5, r4, #32
    4f30:	fa00 f205 	lsl.w	r2, r0, r5
    4f34:	ea4e 0e02 	orr.w	lr, lr, r2
    4f38:	fa20 f304 	lsr.w	r3, r0, r4
    4f3c:	fa01 f205 	lsl.w	r2, r1, r5
    4f40:	ea43 0302 	orr.w	r3, r3, r2
    4f44:	fa21 f004 	lsr.w	r0, r1, r4
    4f48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    4f4c:	fa21 f204 	lsr.w	r2, r1, r4
    4f50:	ea20 0002 	bic.w	r0, r0, r2
    4f54:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    4f58:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    4f5c:	bf08      	it	eq
    4f5e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    4f62:	bd70      	pop	{r4, r5, r6, pc}
    4f64:	f094 0f00 	teq	r4, #0
    4f68:	d10f      	bne.n	4f8a <__aeabi_dmul+0x1c2>
    4f6a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    4f6e:	0040      	lsls	r0, r0, #1
    4f70:	eb41 0101 	adc.w	r1, r1, r1
    4f74:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    4f78:	bf08      	it	eq
    4f7a:	3c01      	subeq	r4, #1
    4f7c:	d0f7      	beq.n	4f6e <__aeabi_dmul+0x1a6>
    4f7e:	ea41 0106 	orr.w	r1, r1, r6
    4f82:	f095 0f00 	teq	r5, #0
    4f86:	bf18      	it	ne
    4f88:	4770      	bxne	lr
    4f8a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    4f8e:	0052      	lsls	r2, r2, #1
    4f90:	eb43 0303 	adc.w	r3, r3, r3
    4f94:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    4f98:	bf08      	it	eq
    4f9a:	3d01      	subeq	r5, #1
    4f9c:	d0f7      	beq.n	4f8e <__aeabi_dmul+0x1c6>
    4f9e:	ea43 0306 	orr.w	r3, r3, r6
    4fa2:	4770      	bx	lr
    4fa4:	ea94 0f0c 	teq	r4, ip
    4fa8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    4fac:	bf18      	it	ne
    4fae:	ea95 0f0c 	teqne	r5, ip
    4fb2:	d00c      	beq.n	4fce <__aeabi_dmul+0x206>
    4fb4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    4fb8:	bf18      	it	ne
    4fba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    4fbe:	d1d1      	bne.n	4f64 <__aeabi_dmul+0x19c>
    4fc0:	ea81 0103 	eor.w	r1, r1, r3
    4fc4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    4fc8:	f04f 0000 	mov.w	r0, #0
    4fcc:	bd70      	pop	{r4, r5, r6, pc}
    4fce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    4fd2:	bf06      	itte	eq
    4fd4:	4610      	moveq	r0, r2
    4fd6:	4619      	moveq	r1, r3
    4fd8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    4fdc:	d019      	beq.n	5012 <__aeabi_dmul+0x24a>
    4fde:	ea94 0f0c 	teq	r4, ip
    4fe2:	d102      	bne.n	4fea <__aeabi_dmul+0x222>
    4fe4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    4fe8:	d113      	bne.n	5012 <__aeabi_dmul+0x24a>
    4fea:	ea95 0f0c 	teq	r5, ip
    4fee:	d105      	bne.n	4ffc <__aeabi_dmul+0x234>
    4ff0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    4ff4:	bf1c      	itt	ne
    4ff6:	4610      	movne	r0, r2
    4ff8:	4619      	movne	r1, r3
    4ffa:	d10a      	bne.n	5012 <__aeabi_dmul+0x24a>
    4ffc:	ea81 0103 	eor.w	r1, r1, r3
    5000:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    5004:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    5008:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    500c:	f04f 0000 	mov.w	r0, #0
    5010:	bd70      	pop	{r4, r5, r6, pc}
    5012:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    5016:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    501a:	bd70      	pop	{r4, r5, r6, pc}

0000501c <__aeabi_ddiv>:
    501c:	b570      	push	{r4, r5, r6, lr}
    501e:	f04f 0cff 	mov.w	ip, #255	; 0xff
    5022:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    5026:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    502a:	bf1d      	ittte	ne
    502c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    5030:	ea94 0f0c 	teqne	r4, ip
    5034:	ea95 0f0c 	teqne	r5, ip
    5038:	f000 f8a7 	bleq	518a <__aeabi_ddiv+0x16e>
    503c:	eba4 0405 	sub.w	r4, r4, r5
    5040:	ea81 0e03 	eor.w	lr, r1, r3
    5044:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    5048:	ea4f 3101 	mov.w	r1, r1, lsl #12
    504c:	f000 8088 	beq.w	5160 <__aeabi_ddiv+0x144>
    5050:	ea4f 3303 	mov.w	r3, r3, lsl #12
    5054:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    5058:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    505c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    5060:	ea4f 2202 	mov.w	r2, r2, lsl #8
    5064:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    5068:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    506c:	ea4f 2600 	mov.w	r6, r0, lsl #8
    5070:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    5074:	429d      	cmp	r5, r3
    5076:	bf08      	it	eq
    5078:	4296      	cmpeq	r6, r2
    507a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    507e:	f504 7440 	add.w	r4, r4, #768	; 0x300
    5082:	d202      	bcs.n	508a <__aeabi_ddiv+0x6e>
    5084:	085b      	lsrs	r3, r3, #1
    5086:	ea4f 0232 	mov.w	r2, r2, rrx
    508a:	1ab6      	subs	r6, r6, r2
    508c:	eb65 0503 	sbc.w	r5, r5, r3
    5090:	085b      	lsrs	r3, r3, #1
    5092:	ea4f 0232 	mov.w	r2, r2, rrx
    5096:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    509a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    509e:	ebb6 0e02 	subs.w	lr, r6, r2
    50a2:	eb75 0e03 	sbcs.w	lr, r5, r3
    50a6:	bf22      	ittt	cs
    50a8:	1ab6      	subcs	r6, r6, r2
    50aa:	4675      	movcs	r5, lr
    50ac:	ea40 000c 	orrcs.w	r0, r0, ip
    50b0:	085b      	lsrs	r3, r3, #1
    50b2:	ea4f 0232 	mov.w	r2, r2, rrx
    50b6:	ebb6 0e02 	subs.w	lr, r6, r2
    50ba:	eb75 0e03 	sbcs.w	lr, r5, r3
    50be:	bf22      	ittt	cs
    50c0:	1ab6      	subcs	r6, r6, r2
    50c2:	4675      	movcs	r5, lr
    50c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    50c8:	085b      	lsrs	r3, r3, #1
    50ca:	ea4f 0232 	mov.w	r2, r2, rrx
    50ce:	ebb6 0e02 	subs.w	lr, r6, r2
    50d2:	eb75 0e03 	sbcs.w	lr, r5, r3
    50d6:	bf22      	ittt	cs
    50d8:	1ab6      	subcs	r6, r6, r2
    50da:	4675      	movcs	r5, lr
    50dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    50e0:	085b      	lsrs	r3, r3, #1
    50e2:	ea4f 0232 	mov.w	r2, r2, rrx
    50e6:	ebb6 0e02 	subs.w	lr, r6, r2
    50ea:	eb75 0e03 	sbcs.w	lr, r5, r3
    50ee:	bf22      	ittt	cs
    50f0:	1ab6      	subcs	r6, r6, r2
    50f2:	4675      	movcs	r5, lr
    50f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    50f8:	ea55 0e06 	orrs.w	lr, r5, r6
    50fc:	d018      	beq.n	5130 <__aeabi_ddiv+0x114>
    50fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
    5102:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    5106:	ea4f 1606 	mov.w	r6, r6, lsl #4
    510a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    510e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    5112:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    5116:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    511a:	d1c0      	bne.n	509e <__aeabi_ddiv+0x82>
    511c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    5120:	d10b      	bne.n	513a <__aeabi_ddiv+0x11e>
    5122:	ea41 0100 	orr.w	r1, r1, r0
    5126:	f04f 0000 	mov.w	r0, #0
    512a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    512e:	e7b6      	b.n	509e <__aeabi_ddiv+0x82>
    5130:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    5134:	bf04      	itt	eq
    5136:	4301      	orreq	r1, r0
    5138:	2000      	moveq	r0, #0
    513a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    513e:	bf88      	it	hi
    5140:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    5144:	f63f aeaf 	bhi.w	4ea6 <__aeabi_dmul+0xde>
    5148:	ebb5 0c03 	subs.w	ip, r5, r3
    514c:	bf04      	itt	eq
    514e:	ebb6 0c02 	subseq.w	ip, r6, r2
    5152:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    5156:	f150 0000 	adcs.w	r0, r0, #0
    515a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    515e:	bd70      	pop	{r4, r5, r6, pc}
    5160:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    5164:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    5168:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    516c:	bfc2      	ittt	gt
    516e:	ebd4 050c 	rsbsgt	r5, r4, ip
    5172:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    5176:	bd70      	popgt	{r4, r5, r6, pc}
    5178:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    517c:	f04f 0e00 	mov.w	lr, #0
    5180:	3c01      	subs	r4, #1
    5182:	e690      	b.n	4ea6 <__aeabi_dmul+0xde>
    5184:	ea45 0e06 	orr.w	lr, r5, r6
    5188:	e68d      	b.n	4ea6 <__aeabi_dmul+0xde>
    518a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    518e:	ea94 0f0c 	teq	r4, ip
    5192:	bf08      	it	eq
    5194:	ea95 0f0c 	teqeq	r5, ip
    5198:	f43f af3b 	beq.w	5012 <__aeabi_dmul+0x24a>
    519c:	ea94 0f0c 	teq	r4, ip
    51a0:	d10a      	bne.n	51b8 <__aeabi_ddiv+0x19c>
    51a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    51a6:	f47f af34 	bne.w	5012 <__aeabi_dmul+0x24a>
    51aa:	ea95 0f0c 	teq	r5, ip
    51ae:	f47f af25 	bne.w	4ffc <__aeabi_dmul+0x234>
    51b2:	4610      	mov	r0, r2
    51b4:	4619      	mov	r1, r3
    51b6:	e72c      	b.n	5012 <__aeabi_dmul+0x24a>
    51b8:	ea95 0f0c 	teq	r5, ip
    51bc:	d106      	bne.n	51cc <__aeabi_ddiv+0x1b0>
    51be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    51c2:	f43f aefd 	beq.w	4fc0 <__aeabi_dmul+0x1f8>
    51c6:	4610      	mov	r0, r2
    51c8:	4619      	mov	r1, r3
    51ca:	e722      	b.n	5012 <__aeabi_dmul+0x24a>
    51cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    51d0:	bf18      	it	ne
    51d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    51d6:	f47f aec5 	bne.w	4f64 <__aeabi_dmul+0x19c>
    51da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    51de:	f47f af0d 	bne.w	4ffc <__aeabi_dmul+0x234>
    51e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    51e6:	f47f aeeb 	bne.w	4fc0 <__aeabi_dmul+0x1f8>
    51ea:	e712      	b.n	5012 <__aeabi_dmul+0x24a>

000051ec <__gedf2>:
    51ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    51f0:	e006      	b.n	5200 <__cmpdf2+0x4>
    51f2:	bf00      	nop

000051f4 <__ledf2>:
    51f4:	f04f 0c01 	mov.w	ip, #1
    51f8:	e002      	b.n	5200 <__cmpdf2+0x4>
    51fa:	bf00      	nop

000051fc <__cmpdf2>:
    51fc:	f04f 0c01 	mov.w	ip, #1
    5200:	f84d cd04 	str.w	ip, [sp, #-4]!
    5204:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    5208:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    520c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    5210:	bf18      	it	ne
    5212:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    5216:	d01b      	beq.n	5250 <__cmpdf2+0x54>
    5218:	b001      	add	sp, #4
    521a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    521e:	bf0c      	ite	eq
    5220:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    5224:	ea91 0f03 	teqne	r1, r3
    5228:	bf02      	ittt	eq
    522a:	ea90 0f02 	teqeq	r0, r2
    522e:	2000      	moveq	r0, #0
    5230:	4770      	bxeq	lr
    5232:	f110 0f00 	cmn.w	r0, #0
    5236:	ea91 0f03 	teq	r1, r3
    523a:	bf58      	it	pl
    523c:	4299      	cmppl	r1, r3
    523e:	bf08      	it	eq
    5240:	4290      	cmpeq	r0, r2
    5242:	bf2c      	ite	cs
    5244:	17d8      	asrcs	r0, r3, #31
    5246:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    524a:	f040 0001 	orr.w	r0, r0, #1
    524e:	4770      	bx	lr
    5250:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    5254:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    5258:	d102      	bne.n	5260 <__cmpdf2+0x64>
    525a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    525e:	d107      	bne.n	5270 <__cmpdf2+0x74>
    5260:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    5264:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    5268:	d1d6      	bne.n	5218 <__cmpdf2+0x1c>
    526a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    526e:	d0d3      	beq.n	5218 <__cmpdf2+0x1c>
    5270:	f85d 0b04 	ldr.w	r0, [sp], #4
    5274:	4770      	bx	lr
    5276:	bf00      	nop

00005278 <__aeabi_cdrcmple>:
    5278:	4684      	mov	ip, r0
    527a:	4610      	mov	r0, r2
    527c:	4662      	mov	r2, ip
    527e:	468c      	mov	ip, r1
    5280:	4619      	mov	r1, r3
    5282:	4663      	mov	r3, ip
    5284:	e000      	b.n	5288 <__aeabi_cdcmpeq>
    5286:	bf00      	nop

00005288 <__aeabi_cdcmpeq>:
    5288:	b501      	push	{r0, lr}
    528a:	f7ff ffb7 	bl	51fc <__cmpdf2>
    528e:	2800      	cmp	r0, #0
    5290:	bf48      	it	mi
    5292:	f110 0f00 	cmnmi.w	r0, #0
    5296:	bd01      	pop	{r0, pc}

00005298 <__aeabi_dcmpeq>:
    5298:	f84d ed08 	str.w	lr, [sp, #-8]!
    529c:	f7ff fff4 	bl	5288 <__aeabi_cdcmpeq>
    52a0:	bf0c      	ite	eq
    52a2:	2001      	moveq	r0, #1
    52a4:	2000      	movne	r0, #0
    52a6:	f85d fb08 	ldr.w	pc, [sp], #8
    52aa:	bf00      	nop

000052ac <__aeabi_dcmplt>:
    52ac:	f84d ed08 	str.w	lr, [sp, #-8]!
    52b0:	f7ff ffea 	bl	5288 <__aeabi_cdcmpeq>
    52b4:	bf34      	ite	cc
    52b6:	2001      	movcc	r0, #1
    52b8:	2000      	movcs	r0, #0
    52ba:	f85d fb08 	ldr.w	pc, [sp], #8
    52be:	bf00      	nop

000052c0 <__aeabi_dcmple>:
    52c0:	f84d ed08 	str.w	lr, [sp, #-8]!
    52c4:	f7ff ffe0 	bl	5288 <__aeabi_cdcmpeq>
    52c8:	bf94      	ite	ls
    52ca:	2001      	movls	r0, #1
    52cc:	2000      	movhi	r0, #0
    52ce:	f85d fb08 	ldr.w	pc, [sp], #8
    52d2:	bf00      	nop

000052d4 <__aeabi_dcmpge>:
    52d4:	f84d ed08 	str.w	lr, [sp, #-8]!
    52d8:	f7ff ffce 	bl	5278 <__aeabi_cdrcmple>
    52dc:	bf94      	ite	ls
    52de:	2001      	movls	r0, #1
    52e0:	2000      	movhi	r0, #0
    52e2:	f85d fb08 	ldr.w	pc, [sp], #8
    52e6:	bf00      	nop

000052e8 <__aeabi_dcmpgt>:
    52e8:	f84d ed08 	str.w	lr, [sp, #-8]!
    52ec:	f7ff ffc4 	bl	5278 <__aeabi_cdrcmple>
    52f0:	bf34      	ite	cc
    52f2:	2001      	movcc	r0, #1
    52f4:	2000      	movcs	r0, #0
    52f6:	f85d fb08 	ldr.w	pc, [sp], #8
    52fa:	bf00      	nop

000052fc <__aeabi_uldivmod>:
    52fc:	b953      	cbnz	r3, 5314 <__aeabi_uldivmod+0x18>
    52fe:	b94a      	cbnz	r2, 5314 <__aeabi_uldivmod+0x18>
    5300:	2900      	cmp	r1, #0
    5302:	bf08      	it	eq
    5304:	2800      	cmpeq	r0, #0
    5306:	bf1c      	itt	ne
    5308:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    530c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    5310:	f000 b97a 	b.w	5608 <__aeabi_idiv0>
    5314:	f1ad 0c08 	sub.w	ip, sp, #8
    5318:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    531c:	f000 f806 	bl	532c <__udivmoddi4>
    5320:	f8dd e004 	ldr.w	lr, [sp, #4]
    5324:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    5328:	b004      	add	sp, #16
    532a:	4770      	bx	lr

0000532c <__udivmoddi4>:
    532c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5330:	468c      	mov	ip, r1
    5332:	460e      	mov	r6, r1
    5334:	4604      	mov	r4, r0
    5336:	9d08      	ldr	r5, [sp, #32]
    5338:	2b00      	cmp	r3, #0
    533a:	d150      	bne.n	53de <__udivmoddi4+0xb2>
    533c:	428a      	cmp	r2, r1
    533e:	4617      	mov	r7, r2
    5340:	d96c      	bls.n	541c <__udivmoddi4+0xf0>
    5342:	fab2 fe82 	clz	lr, r2
    5346:	f1be 0f00 	cmp.w	lr, #0
    534a:	d00b      	beq.n	5364 <__udivmoddi4+0x38>
    534c:	f1ce 0c20 	rsb	ip, lr, #32
    5350:	fa01 f60e 	lsl.w	r6, r1, lr
    5354:	fa20 fc0c 	lsr.w	ip, r0, ip
    5358:	fa02 f70e 	lsl.w	r7, r2, lr
    535c:	ea4c 0c06 	orr.w	ip, ip, r6
    5360:	fa00 f40e 	lsl.w	r4, r0, lr
    5364:	0c3a      	lsrs	r2, r7, #16
    5366:	fbbc f9f2 	udiv	r9, ip, r2
    536a:	b2bb      	uxth	r3, r7
    536c:	fb02 cc19 	mls	ip, r2, r9, ip
    5370:	fb09 fa03 	mul.w	sl, r9, r3
    5374:	ea4f 4814 	mov.w	r8, r4, lsr #16
    5378:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
    537c:	45b2      	cmp	sl, r6
    537e:	d90a      	bls.n	5396 <__udivmoddi4+0x6a>
    5380:	19f6      	adds	r6, r6, r7
    5382:	f109 31ff 	add.w	r1, r9, #4294967295	; 0xffffffff
    5386:	f080 8125 	bcs.w	55d4 <__udivmoddi4+0x2a8>
    538a:	45b2      	cmp	sl, r6
    538c:	f240 8122 	bls.w	55d4 <__udivmoddi4+0x2a8>
    5390:	f1a9 0902 	sub.w	r9, r9, #2
    5394:	443e      	add	r6, r7
    5396:	eba6 060a 	sub.w	r6, r6, sl
    539a:	fbb6 f0f2 	udiv	r0, r6, r2
    539e:	fb02 6610 	mls	r6, r2, r0, r6
    53a2:	fb00 f303 	mul.w	r3, r0, r3
    53a6:	b2a4      	uxth	r4, r4
    53a8:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
    53ac:	42a3      	cmp	r3, r4
    53ae:	d909      	bls.n	53c4 <__udivmoddi4+0x98>
    53b0:	19e4      	adds	r4, r4, r7
    53b2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
    53b6:	f080 810b 	bcs.w	55d0 <__udivmoddi4+0x2a4>
    53ba:	42a3      	cmp	r3, r4
    53bc:	f240 8108 	bls.w	55d0 <__udivmoddi4+0x2a4>
    53c0:	3802      	subs	r0, #2
    53c2:	443c      	add	r4, r7
    53c4:	2100      	movs	r1, #0
    53c6:	1ae4      	subs	r4, r4, r3
    53c8:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    53cc:	2d00      	cmp	r5, #0
    53ce:	d062      	beq.n	5496 <__udivmoddi4+0x16a>
    53d0:	2300      	movs	r3, #0
    53d2:	fa24 f40e 	lsr.w	r4, r4, lr
    53d6:	602c      	str	r4, [r5, #0]
    53d8:	606b      	str	r3, [r5, #4]
    53da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    53de:	428b      	cmp	r3, r1
    53e0:	d907      	bls.n	53f2 <__udivmoddi4+0xc6>
    53e2:	2d00      	cmp	r5, #0
    53e4:	d055      	beq.n	5492 <__udivmoddi4+0x166>
    53e6:	2100      	movs	r1, #0
    53e8:	e885 0041 	stmia.w	r5, {r0, r6}
    53ec:	4608      	mov	r0, r1
    53ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    53f2:	fab3 f183 	clz	r1, r3
    53f6:	2900      	cmp	r1, #0
    53f8:	f040 808f 	bne.w	551a <__udivmoddi4+0x1ee>
    53fc:	42b3      	cmp	r3, r6
    53fe:	d302      	bcc.n	5406 <__udivmoddi4+0xda>
    5400:	4282      	cmp	r2, r0
    5402:	f200 80fc 	bhi.w	55fe <__udivmoddi4+0x2d2>
    5406:	1a84      	subs	r4, r0, r2
    5408:	eb66 0603 	sbc.w	r6, r6, r3
    540c:	2001      	movs	r0, #1
    540e:	46b4      	mov	ip, r6
    5410:	2d00      	cmp	r5, #0
    5412:	d040      	beq.n	5496 <__udivmoddi4+0x16a>
    5414:	e885 1010 	stmia.w	r5, {r4, ip}
    5418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    541c:	b912      	cbnz	r2, 5424 <__udivmoddi4+0xf8>
    541e:	2701      	movs	r7, #1
    5420:	fbb7 f7f2 	udiv	r7, r7, r2
    5424:	fab7 fe87 	clz	lr, r7
    5428:	f1be 0f00 	cmp.w	lr, #0
    542c:	d135      	bne.n	549a <__udivmoddi4+0x16e>
    542e:	2101      	movs	r1, #1
    5430:	1bf6      	subs	r6, r6, r7
    5432:	ea4f 4c17 	mov.w	ip, r7, lsr #16
    5436:	fa1f f887 	uxth.w	r8, r7
    543a:	fbb6 f2fc 	udiv	r2, r6, ip
    543e:	fb0c 6612 	mls	r6, ip, r2, r6
    5442:	fb08 f002 	mul.w	r0, r8, r2
    5446:	0c23      	lsrs	r3, r4, #16
    5448:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
    544c:	42b0      	cmp	r0, r6
    544e:	d907      	bls.n	5460 <__udivmoddi4+0x134>
    5450:	19f6      	adds	r6, r6, r7
    5452:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
    5456:	d202      	bcs.n	545e <__udivmoddi4+0x132>
    5458:	42b0      	cmp	r0, r6
    545a:	f200 80d2 	bhi.w	5602 <__udivmoddi4+0x2d6>
    545e:	461a      	mov	r2, r3
    5460:	1a36      	subs	r6, r6, r0
    5462:	fbb6 f0fc 	udiv	r0, r6, ip
    5466:	fb0c 6610 	mls	r6, ip, r0, r6
    546a:	fb08 f800 	mul.w	r8, r8, r0
    546e:	b2a3      	uxth	r3, r4
    5470:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
    5474:	45a0      	cmp	r8, r4
    5476:	d907      	bls.n	5488 <__udivmoddi4+0x15c>
    5478:	19e4      	adds	r4, r4, r7
    547a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    547e:	d202      	bcs.n	5486 <__udivmoddi4+0x15a>
    5480:	45a0      	cmp	r8, r4
    5482:	f200 80b9 	bhi.w	55f8 <__udivmoddi4+0x2cc>
    5486:	4618      	mov	r0, r3
    5488:	eba4 0408 	sub.w	r4, r4, r8
    548c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
    5490:	e79c      	b.n	53cc <__udivmoddi4+0xa0>
    5492:	4629      	mov	r1, r5
    5494:	4628      	mov	r0, r5
    5496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    549a:	fa07 f70e 	lsl.w	r7, r7, lr
    549e:	f1ce 0320 	rsb	r3, lr, #32
    54a2:	fa26 f203 	lsr.w	r2, r6, r3
    54a6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
    54aa:	fbb2 f1fc 	udiv	r1, r2, ip
    54ae:	fa1f f887 	uxth.w	r8, r7
    54b2:	fb0c 2211 	mls	r2, ip, r1, r2
    54b6:	fa06 f60e 	lsl.w	r6, r6, lr
    54ba:	fa20 f303 	lsr.w	r3, r0, r3
    54be:	fb01 f908 	mul.w	r9, r1, r8
    54c2:	4333      	orrs	r3, r6
    54c4:	0c1e      	lsrs	r6, r3, #16
    54c6:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
    54ca:	45b1      	cmp	r9, r6
    54cc:	fa00 f40e 	lsl.w	r4, r0, lr
    54d0:	d909      	bls.n	54e6 <__udivmoddi4+0x1ba>
    54d2:	19f6      	adds	r6, r6, r7
    54d4:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
    54d8:	f080 808c 	bcs.w	55f4 <__udivmoddi4+0x2c8>
    54dc:	45b1      	cmp	r9, r6
    54de:	f240 8089 	bls.w	55f4 <__udivmoddi4+0x2c8>
    54e2:	3902      	subs	r1, #2
    54e4:	443e      	add	r6, r7
    54e6:	eba6 0609 	sub.w	r6, r6, r9
    54ea:	fbb6 f0fc 	udiv	r0, r6, ip
    54ee:	fb0c 6210 	mls	r2, ip, r0, r6
    54f2:	fb00 f908 	mul.w	r9, r0, r8
    54f6:	b29e      	uxth	r6, r3
    54f8:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
    54fc:	45b1      	cmp	r9, r6
    54fe:	d907      	bls.n	5510 <__udivmoddi4+0x1e4>
    5500:	19f6      	adds	r6, r6, r7
    5502:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    5506:	d271      	bcs.n	55ec <__udivmoddi4+0x2c0>
    5508:	45b1      	cmp	r9, r6
    550a:	d96f      	bls.n	55ec <__udivmoddi4+0x2c0>
    550c:	3802      	subs	r0, #2
    550e:	443e      	add	r6, r7
    5510:	eba6 0609 	sub.w	r6, r6, r9
    5514:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    5518:	e78f      	b.n	543a <__udivmoddi4+0x10e>
    551a:	f1c1 0720 	rsb	r7, r1, #32
    551e:	fa22 f807 	lsr.w	r8, r2, r7
    5522:	408b      	lsls	r3, r1
    5524:	ea48 0303 	orr.w	r3, r8, r3
    5528:	fa26 f407 	lsr.w	r4, r6, r7
    552c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
    5530:	fbb4 f9fe 	udiv	r9, r4, lr
    5534:	fa1f fc83 	uxth.w	ip, r3
    5538:	fb0e 4419 	mls	r4, lr, r9, r4
    553c:	408e      	lsls	r6, r1
    553e:	fa20 f807 	lsr.w	r8, r0, r7
    5542:	fb09 fa0c 	mul.w	sl, r9, ip
    5546:	ea48 0806 	orr.w	r8, r8, r6
    554a:	ea4f 4618 	mov.w	r6, r8, lsr #16
    554e:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
    5552:	45a2      	cmp	sl, r4
    5554:	fa02 f201 	lsl.w	r2, r2, r1
    5558:	fa00 f601 	lsl.w	r6, r0, r1
    555c:	d908      	bls.n	5570 <__udivmoddi4+0x244>
    555e:	18e4      	adds	r4, r4, r3
    5560:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    5564:	d244      	bcs.n	55f0 <__udivmoddi4+0x2c4>
    5566:	45a2      	cmp	sl, r4
    5568:	d942      	bls.n	55f0 <__udivmoddi4+0x2c4>
    556a:	f1a9 0902 	sub.w	r9, r9, #2
    556e:	441c      	add	r4, r3
    5570:	eba4 040a 	sub.w	r4, r4, sl
    5574:	fbb4 f0fe 	udiv	r0, r4, lr
    5578:	fb0e 4410 	mls	r4, lr, r0, r4
    557c:	fb00 fc0c 	mul.w	ip, r0, ip
    5580:	fa1f f888 	uxth.w	r8, r8
    5584:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
    5588:	45a4      	cmp	ip, r4
    558a:	d907      	bls.n	559c <__udivmoddi4+0x270>
    558c:	18e4      	adds	r4, r4, r3
    558e:	f100 3eff 	add.w	lr, r0, #4294967295	; 0xffffffff
    5592:	d229      	bcs.n	55e8 <__udivmoddi4+0x2bc>
    5594:	45a4      	cmp	ip, r4
    5596:	d927      	bls.n	55e8 <__udivmoddi4+0x2bc>
    5598:	3802      	subs	r0, #2
    559a:	441c      	add	r4, r3
    559c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    55a0:	fba0 8902 	umull	r8, r9, r0, r2
    55a4:	eba4 0c0c 	sub.w	ip, r4, ip
    55a8:	45cc      	cmp	ip, r9
    55aa:	46c2      	mov	sl, r8
    55ac:	46ce      	mov	lr, r9
    55ae:	d315      	bcc.n	55dc <__udivmoddi4+0x2b0>
    55b0:	d012      	beq.n	55d8 <__udivmoddi4+0x2ac>
    55b2:	b155      	cbz	r5, 55ca <__udivmoddi4+0x29e>
    55b4:	ebb6 030a 	subs.w	r3, r6, sl
    55b8:	eb6c 060e 	sbc.w	r6, ip, lr
    55bc:	fa06 f707 	lsl.w	r7, r6, r7
    55c0:	40cb      	lsrs	r3, r1
    55c2:	431f      	orrs	r7, r3
    55c4:	40ce      	lsrs	r6, r1
    55c6:	602f      	str	r7, [r5, #0]
    55c8:	606e      	str	r6, [r5, #4]
    55ca:	2100      	movs	r1, #0
    55cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    55d0:	4610      	mov	r0, r2
    55d2:	e6f7      	b.n	53c4 <__udivmoddi4+0x98>
    55d4:	4689      	mov	r9, r1
    55d6:	e6de      	b.n	5396 <__udivmoddi4+0x6a>
    55d8:	4546      	cmp	r6, r8
    55da:	d2ea      	bcs.n	55b2 <__udivmoddi4+0x286>
    55dc:	ebb8 0a02 	subs.w	sl, r8, r2
    55e0:	eb69 0e03 	sbc.w	lr, r9, r3
    55e4:	3801      	subs	r0, #1
    55e6:	e7e4      	b.n	55b2 <__udivmoddi4+0x286>
    55e8:	4670      	mov	r0, lr
    55ea:	e7d7      	b.n	559c <__udivmoddi4+0x270>
    55ec:	4618      	mov	r0, r3
    55ee:	e78f      	b.n	5510 <__udivmoddi4+0x1e4>
    55f0:	4681      	mov	r9, r0
    55f2:	e7bd      	b.n	5570 <__udivmoddi4+0x244>
    55f4:	4611      	mov	r1, r2
    55f6:	e776      	b.n	54e6 <__udivmoddi4+0x1ba>
    55f8:	3802      	subs	r0, #2
    55fa:	443c      	add	r4, r7
    55fc:	e744      	b.n	5488 <__udivmoddi4+0x15c>
    55fe:	4608      	mov	r0, r1
    5600:	e706      	b.n	5410 <__udivmoddi4+0xe4>
    5602:	3a02      	subs	r2, #2
    5604:	443e      	add	r6, r7
    5606:	e72b      	b.n	5460 <__udivmoddi4+0x134>

00005608 <__aeabi_idiv0>:
    5608:	4770      	bx	lr
    560a:	bf00      	nop

0000560c <exit>:
    560c:	b508      	push	{r3, lr}
    560e:	2100      	movs	r1, #0
    5610:	4604      	mov	r4, r0
    5612:	f001 fc51 	bl	6eb8 <__call_exitprocs>
    5616:	4b04      	ldr	r3, [pc, #16]	; (5628 <exit+0x1c>)
    5618:	6818      	ldr	r0, [r3, #0]
    561a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    561c:	b103      	cbz	r3, 5620 <exit+0x14>
    561e:	4798      	blx	r3
    5620:	4620      	mov	r0, r4
    5622:	f004 ffd5 	bl	a5d0 <_exit>
    5626:	bf00      	nop
    5628:	0000a6d8 	.word	0x0000a6d8

0000562c <__libc_init_array>:
    562c:	b570      	push	{r4, r5, r6, lr}
    562e:	4e0f      	ldr	r6, [pc, #60]	; (566c <__libc_init_array+0x40>)
    5630:	4d0f      	ldr	r5, [pc, #60]	; (5670 <__libc_init_array+0x44>)
    5632:	1b76      	subs	r6, r6, r5
    5634:	10b6      	asrs	r6, r6, #2
    5636:	bf18      	it	ne
    5638:	2400      	movne	r4, #0
    563a:	d005      	beq.n	5648 <__libc_init_array+0x1c>
    563c:	3401      	adds	r4, #1
    563e:	f855 3b04 	ldr.w	r3, [r5], #4
    5642:	4798      	blx	r3
    5644:	42a6      	cmp	r6, r4
    5646:	d1f9      	bne.n	563c <__libc_init_array+0x10>
    5648:	4e0a      	ldr	r6, [pc, #40]	; (5674 <__libc_init_array+0x48>)
    564a:	4d0b      	ldr	r5, [pc, #44]	; (5678 <__libc_init_array+0x4c>)
    564c:	f004 ffc2 	bl	a5d4 <_init>
    5650:	1b76      	subs	r6, r6, r5
    5652:	10b6      	asrs	r6, r6, #2
    5654:	bf18      	it	ne
    5656:	2400      	movne	r4, #0
    5658:	d006      	beq.n	5668 <__libc_init_array+0x3c>
    565a:	3401      	adds	r4, #1
    565c:	f855 3b04 	ldr.w	r3, [r5], #4
    5660:	4798      	blx	r3
    5662:	42a6      	cmp	r6, r4
    5664:	d1f9      	bne.n	565a <__libc_init_array+0x2e>
    5666:	bd70      	pop	{r4, r5, r6, pc}
    5668:	bd70      	pop	{r4, r5, r6, pc}
    566a:	bf00      	nop
    566c:	10000a88 	.word	0x10000a88
    5670:	10000a88 	.word	0x10000a88
    5674:	10000a90 	.word	0x10000a90
    5678:	10000a88 	.word	0x10000a88

0000567c <memcpy>:
    567c:	4684      	mov	ip, r0
    567e:	ea41 0300 	orr.w	r3, r1, r0
    5682:	f013 0303 	ands.w	r3, r3, #3
    5686:	d149      	bne.n	571c <memcpy+0xa0>
    5688:	3a40      	subs	r2, #64	; 0x40
    568a:	d323      	bcc.n	56d4 <memcpy+0x58>
    568c:	680b      	ldr	r3, [r1, #0]
    568e:	6003      	str	r3, [r0, #0]
    5690:	684b      	ldr	r3, [r1, #4]
    5692:	6043      	str	r3, [r0, #4]
    5694:	688b      	ldr	r3, [r1, #8]
    5696:	6083      	str	r3, [r0, #8]
    5698:	68cb      	ldr	r3, [r1, #12]
    569a:	60c3      	str	r3, [r0, #12]
    569c:	690b      	ldr	r3, [r1, #16]
    569e:	6103      	str	r3, [r0, #16]
    56a0:	694b      	ldr	r3, [r1, #20]
    56a2:	6143      	str	r3, [r0, #20]
    56a4:	698b      	ldr	r3, [r1, #24]
    56a6:	6183      	str	r3, [r0, #24]
    56a8:	69cb      	ldr	r3, [r1, #28]
    56aa:	61c3      	str	r3, [r0, #28]
    56ac:	6a0b      	ldr	r3, [r1, #32]
    56ae:	6203      	str	r3, [r0, #32]
    56b0:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    56b2:	6243      	str	r3, [r0, #36]	; 0x24
    56b4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    56b6:	6283      	str	r3, [r0, #40]	; 0x28
    56b8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    56ba:	62c3      	str	r3, [r0, #44]	; 0x2c
    56bc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    56be:	6303      	str	r3, [r0, #48]	; 0x30
    56c0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    56c2:	6343      	str	r3, [r0, #52]	; 0x34
    56c4:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    56c6:	6383      	str	r3, [r0, #56]	; 0x38
    56c8:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    56ca:	63c3      	str	r3, [r0, #60]	; 0x3c
    56cc:	3040      	adds	r0, #64	; 0x40
    56ce:	3140      	adds	r1, #64	; 0x40
    56d0:	3a40      	subs	r2, #64	; 0x40
    56d2:	d2db      	bcs.n	568c <memcpy+0x10>
    56d4:	3230      	adds	r2, #48	; 0x30
    56d6:	d30b      	bcc.n	56f0 <memcpy+0x74>
    56d8:	680b      	ldr	r3, [r1, #0]
    56da:	6003      	str	r3, [r0, #0]
    56dc:	684b      	ldr	r3, [r1, #4]
    56de:	6043      	str	r3, [r0, #4]
    56e0:	688b      	ldr	r3, [r1, #8]
    56e2:	6083      	str	r3, [r0, #8]
    56e4:	68cb      	ldr	r3, [r1, #12]
    56e6:	60c3      	str	r3, [r0, #12]
    56e8:	3010      	adds	r0, #16
    56ea:	3110      	adds	r1, #16
    56ec:	3a10      	subs	r2, #16
    56ee:	d2f3      	bcs.n	56d8 <memcpy+0x5c>
    56f0:	320c      	adds	r2, #12
    56f2:	d305      	bcc.n	5700 <memcpy+0x84>
    56f4:	f851 3b04 	ldr.w	r3, [r1], #4
    56f8:	f840 3b04 	str.w	r3, [r0], #4
    56fc:	3a04      	subs	r2, #4
    56fe:	d2f9      	bcs.n	56f4 <memcpy+0x78>
    5700:	3204      	adds	r2, #4
    5702:	d008      	beq.n	5716 <memcpy+0x9a>
    5704:	07d2      	lsls	r2, r2, #31
    5706:	bf1c      	itt	ne
    5708:	f811 3b01 	ldrbne.w	r3, [r1], #1
    570c:	f800 3b01 	strbne.w	r3, [r0], #1
    5710:	d301      	bcc.n	5716 <memcpy+0x9a>
    5712:	880b      	ldrh	r3, [r1, #0]
    5714:	8003      	strh	r3, [r0, #0]
    5716:	4660      	mov	r0, ip
    5718:	4770      	bx	lr
    571a:	bf00      	nop
    571c:	2a08      	cmp	r2, #8
    571e:	d313      	bcc.n	5748 <memcpy+0xcc>
    5720:	078b      	lsls	r3, r1, #30
    5722:	d0b1      	beq.n	5688 <memcpy+0xc>
    5724:	f010 0303 	ands.w	r3, r0, #3
    5728:	d0ae      	beq.n	5688 <memcpy+0xc>
    572a:	f1c3 0304 	rsb	r3, r3, #4
    572e:	1ad2      	subs	r2, r2, r3
    5730:	07db      	lsls	r3, r3, #31
    5732:	bf1c      	itt	ne
    5734:	f811 3b01 	ldrbne.w	r3, [r1], #1
    5738:	f800 3b01 	strbne.w	r3, [r0], #1
    573c:	d3a4      	bcc.n	5688 <memcpy+0xc>
    573e:	f831 3b02 	ldrh.w	r3, [r1], #2
    5742:	f820 3b02 	strh.w	r3, [r0], #2
    5746:	e79f      	b.n	5688 <memcpy+0xc>
    5748:	3a04      	subs	r2, #4
    574a:	d3d9      	bcc.n	5700 <memcpy+0x84>
    574c:	3a01      	subs	r2, #1
    574e:	f811 3b01 	ldrb.w	r3, [r1], #1
    5752:	f800 3b01 	strb.w	r3, [r0], #1
    5756:	d2f9      	bcs.n	574c <memcpy+0xd0>
    5758:	780b      	ldrb	r3, [r1, #0]
    575a:	7003      	strb	r3, [r0, #0]
    575c:	784b      	ldrb	r3, [r1, #1]
    575e:	7043      	strb	r3, [r0, #1]
    5760:	788b      	ldrb	r3, [r1, #2]
    5762:	7083      	strb	r3, [r0, #2]
    5764:	4660      	mov	r0, ip
    5766:	4770      	bx	lr

00005768 <memset>:
    5768:	b470      	push	{r4, r5, r6}
    576a:	0786      	lsls	r6, r0, #30
    576c:	d046      	beq.n	57fc <memset+0x94>
    576e:	1e54      	subs	r4, r2, #1
    5770:	2a00      	cmp	r2, #0
    5772:	d041      	beq.n	57f8 <memset+0x90>
    5774:	b2ca      	uxtb	r2, r1
    5776:	4603      	mov	r3, r0
    5778:	e002      	b.n	5780 <memset+0x18>
    577a:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
    577e:	d33b      	bcc.n	57f8 <memset+0x90>
    5780:	f803 2b01 	strb.w	r2, [r3], #1
    5784:	079d      	lsls	r5, r3, #30
    5786:	d1f8      	bne.n	577a <memset+0x12>
    5788:	2c03      	cmp	r4, #3
    578a:	d92e      	bls.n	57ea <memset+0x82>
    578c:	b2cd      	uxtb	r5, r1
    578e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    5792:	2c0f      	cmp	r4, #15
    5794:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    5798:	d919      	bls.n	57ce <memset+0x66>
    579a:	4626      	mov	r6, r4
    579c:	f103 0210 	add.w	r2, r3, #16
    57a0:	3e10      	subs	r6, #16
    57a2:	2e0f      	cmp	r6, #15
    57a4:	f842 5c10 	str.w	r5, [r2, #-16]
    57a8:	f842 5c0c 	str.w	r5, [r2, #-12]
    57ac:	f842 5c08 	str.w	r5, [r2, #-8]
    57b0:	f842 5c04 	str.w	r5, [r2, #-4]
    57b4:	f102 0210 	add.w	r2, r2, #16
    57b8:	d8f2      	bhi.n	57a0 <memset+0x38>
    57ba:	f1a4 0210 	sub.w	r2, r4, #16
    57be:	f022 020f 	bic.w	r2, r2, #15
    57c2:	f004 040f 	and.w	r4, r4, #15
    57c6:	3210      	adds	r2, #16
    57c8:	2c03      	cmp	r4, #3
    57ca:	4413      	add	r3, r2
    57cc:	d90d      	bls.n	57ea <memset+0x82>
    57ce:	461e      	mov	r6, r3
    57d0:	4622      	mov	r2, r4
    57d2:	3a04      	subs	r2, #4
    57d4:	2a03      	cmp	r2, #3
    57d6:	f846 5b04 	str.w	r5, [r6], #4
    57da:	d8fa      	bhi.n	57d2 <memset+0x6a>
    57dc:	1f22      	subs	r2, r4, #4
    57de:	f022 0203 	bic.w	r2, r2, #3
    57e2:	3204      	adds	r2, #4
    57e4:	4413      	add	r3, r2
    57e6:	f004 0403 	and.w	r4, r4, #3
    57ea:	b12c      	cbz	r4, 57f8 <memset+0x90>
    57ec:	b2c9      	uxtb	r1, r1
    57ee:	441c      	add	r4, r3
    57f0:	f803 1b01 	strb.w	r1, [r3], #1
    57f4:	429c      	cmp	r4, r3
    57f6:	d1fb      	bne.n	57f0 <memset+0x88>
    57f8:	bc70      	pop	{r4, r5, r6}
    57fa:	4770      	bx	lr
    57fc:	4614      	mov	r4, r2
    57fe:	4603      	mov	r3, r0
    5800:	e7c2      	b.n	5788 <memset+0x20>
    5802:	bf00      	nop

00005804 <_sprintf_r>:
    5804:	b40c      	push	{r2, r3}
    5806:	460b      	mov	r3, r1
    5808:	b5f0      	push	{r4, r5, r6, r7, lr}
    580a:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    580e:	f44f 7702 	mov.w	r7, #520	; 0x208
    5812:	f64f 76ff 	movw	r6, #65535	; 0xffff
    5816:	b09d      	sub	sp, #116	; 0x74
    5818:	ac22      	add	r4, sp, #136	; 0x88
    581a:	f854 2b04 	ldr.w	r2, [r4], #4
    581e:	9302      	str	r3, [sp, #8]
    5820:	9306      	str	r3, [sp, #24]
    5822:	a902      	add	r1, sp, #8
    5824:	4623      	mov	r3, r4
    5826:	9401      	str	r4, [sp, #4]
    5828:	f8ad 7014 	strh.w	r7, [sp, #20]
    582c:	9504      	str	r5, [sp, #16]
    582e:	9507      	str	r5, [sp, #28]
    5830:	f8ad 6016 	strh.w	r6, [sp, #22]
    5834:	f000 f8ba 	bl	59ac <_svfprintf_r>
    5838:	2200      	movs	r2, #0
    583a:	9b02      	ldr	r3, [sp, #8]
    583c:	701a      	strb	r2, [r3, #0]
    583e:	b01d      	add	sp, #116	; 0x74
    5840:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    5844:	b002      	add	sp, #8
    5846:	4770      	bx	lr

00005848 <sprintf>:
    5848:	b40e      	push	{r1, r2, r3}
    584a:	4601      	mov	r1, r0
    584c:	b5f0      	push	{r4, r5, r6, r7, lr}
    584e:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    5852:	f44f 7702 	mov.w	r7, #520	; 0x208
    5856:	f64f 76ff 	movw	r6, #65535	; 0xffff
    585a:	b09c      	sub	sp, #112	; 0x70
    585c:	ac21      	add	r4, sp, #132	; 0x84
    585e:	f854 2b04 	ldr.w	r2, [r4], #4
    5862:	4b0b      	ldr	r3, [pc, #44]	; (5890 <sprintf+0x48>)
    5864:	9102      	str	r1, [sp, #8]
    5866:	9106      	str	r1, [sp, #24]
    5868:	6818      	ldr	r0, [r3, #0]
    586a:	a902      	add	r1, sp, #8
    586c:	4623      	mov	r3, r4
    586e:	9401      	str	r4, [sp, #4]
    5870:	f8ad 7014 	strh.w	r7, [sp, #20]
    5874:	9504      	str	r5, [sp, #16]
    5876:	9507      	str	r5, [sp, #28]
    5878:	f8ad 6016 	strh.w	r6, [sp, #22]
    587c:	f000 f896 	bl	59ac <_svfprintf_r>
    5880:	2200      	movs	r2, #0
    5882:	9b02      	ldr	r3, [sp, #8]
    5884:	701a      	strb	r2, [r3, #0]
    5886:	b01c      	add	sp, #112	; 0x70
    5888:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    588c:	b003      	add	sp, #12
    588e:	4770      	bx	lr
    5890:	100000dc 	.word	0x100000dc

00005894 <strcpy>:
    5894:	ea80 0201 	eor.w	r2, r0, r1
    5898:	4684      	mov	ip, r0
    589a:	f012 0f03 	tst.w	r2, #3
    589e:	d14f      	bne.n	5940 <strcpy+0xac>
    58a0:	f011 0f03 	tst.w	r1, #3
    58a4:	d132      	bne.n	590c <strcpy+0x78>
    58a6:	f84d 4d04 	str.w	r4, [sp, #-4]!
    58aa:	f011 0f04 	tst.w	r1, #4
    58ae:	f851 3b04 	ldr.w	r3, [r1], #4
    58b2:	d00b      	beq.n	58cc <strcpy+0x38>
    58b4:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    58b8:	439a      	bics	r2, r3
    58ba:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    58be:	bf04      	itt	eq
    58c0:	f84c 3b04 	streq.w	r3, [ip], #4
    58c4:	f851 3b04 	ldreq.w	r3, [r1], #4
    58c8:	d116      	bne.n	58f8 <strcpy+0x64>
    58ca:	bf00      	nop
    58cc:	f851 4b04 	ldr.w	r4, [r1], #4
    58d0:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    58d4:	439a      	bics	r2, r3
    58d6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    58da:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    58de:	d10b      	bne.n	58f8 <strcpy+0x64>
    58e0:	f84c 3b04 	str.w	r3, [ip], #4
    58e4:	43a2      	bics	r2, r4
    58e6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    58ea:	bf04      	itt	eq
    58ec:	f851 3b04 	ldreq.w	r3, [r1], #4
    58f0:	f84c 4b04 	streq.w	r4, [ip], #4
    58f4:	d0ea      	beq.n	58cc <strcpy+0x38>
    58f6:	4623      	mov	r3, r4
    58f8:	f80c 3b01 	strb.w	r3, [ip], #1
    58fc:	f013 0fff 	tst.w	r3, #255	; 0xff
    5900:	ea4f 2333 	mov.w	r3, r3, ror #8
    5904:	d1f8      	bne.n	58f8 <strcpy+0x64>
    5906:	f85d 4b04 	ldr.w	r4, [sp], #4
    590a:	4770      	bx	lr
    590c:	f011 0f01 	tst.w	r1, #1
    5910:	d006      	beq.n	5920 <strcpy+0x8c>
    5912:	f811 2b01 	ldrb.w	r2, [r1], #1
    5916:	f80c 2b01 	strb.w	r2, [ip], #1
    591a:	2a00      	cmp	r2, #0
    591c:	bf08      	it	eq
    591e:	4770      	bxeq	lr
    5920:	f011 0f02 	tst.w	r1, #2
    5924:	d0bf      	beq.n	58a6 <strcpy+0x12>
    5926:	f831 2b02 	ldrh.w	r2, [r1], #2
    592a:	f012 0fff 	tst.w	r2, #255	; 0xff
    592e:	bf16      	itet	ne
    5930:	f82c 2b02 	strhne.w	r2, [ip], #2
    5934:	f88c 2000 	strbeq.w	r2, [ip]
    5938:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
    593c:	d1b3      	bne.n	58a6 <strcpy+0x12>
    593e:	4770      	bx	lr
    5940:	f811 2b01 	ldrb.w	r2, [r1], #1
    5944:	f80c 2b01 	strb.w	r2, [ip], #1
    5948:	2a00      	cmp	r2, #0
    594a:	d1f9      	bne.n	5940 <strcpy+0xac>
    594c:	4770      	bx	lr
    594e:	bf00      	nop

00005950 <strlen>:
    5950:	f020 0103 	bic.w	r1, r0, #3
    5954:	f010 0003 	ands.w	r0, r0, #3
    5958:	f1c0 0000 	rsb	r0, r0, #0
    595c:	f851 3b04 	ldr.w	r3, [r1], #4
    5960:	f100 0c04 	add.w	ip, r0, #4
    5964:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    5968:	f06f 0200 	mvn.w	r2, #0
    596c:	bf1c      	itt	ne
    596e:	fa22 f20c 	lsrne.w	r2, r2, ip
    5972:	4313      	orrne	r3, r2
    5974:	f04f 0c01 	mov.w	ip, #1
    5978:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
    597c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
    5980:	eba3 020c 	sub.w	r2, r3, ip
    5984:	ea22 0203 	bic.w	r2, r2, r3
    5988:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
    598c:	bf04      	itt	eq
    598e:	f851 3b04 	ldreq.w	r3, [r1], #4
    5992:	3004      	addeq	r0, #4
    5994:	d0f4      	beq.n	5980 <strlen+0x30>
    5996:	f1c2 0100 	rsb	r1, r2, #0
    599a:	ea02 0201 	and.w	r2, r2, r1
    599e:	fab2 f282 	clz	r2, r2
    59a2:	f1c2 021f 	rsb	r2, r2, #31
    59a6:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    59aa:	4770      	bx	lr

000059ac <_svfprintf_r>:
    59ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    59b0:	b0c3      	sub	sp, #268	; 0x10c
    59b2:	460c      	mov	r4, r1
    59b4:	910b      	str	r1, [sp, #44]	; 0x2c
    59b6:	4692      	mov	sl, r2
    59b8:	930f      	str	r3, [sp, #60]	; 0x3c
    59ba:	900c      	str	r0, [sp, #48]	; 0x30
    59bc:	f002 faca 	bl	7f54 <_localeconv_r>
    59c0:	6803      	ldr	r3, [r0, #0]
    59c2:	4618      	mov	r0, r3
    59c4:	931a      	str	r3, [sp, #104]	; 0x68
    59c6:	f7ff ffc3 	bl	5950 <strlen>
    59ca:	89a3      	ldrh	r3, [r4, #12]
    59cc:	9019      	str	r0, [sp, #100]	; 0x64
    59ce:	0619      	lsls	r1, r3, #24
    59d0:	d503      	bpl.n	59da <_svfprintf_r+0x2e>
    59d2:	6923      	ldr	r3, [r4, #16]
    59d4:	2b00      	cmp	r3, #0
    59d6:	f001 8031 	beq.w	6a3c <_svfprintf_r+0x1090>
    59da:	2300      	movs	r3, #0
    59dc:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
    59e0:	46c8      	mov	r8, r9
    59e2:	9314      	str	r3, [sp, #80]	; 0x50
    59e4:	9313      	str	r3, [sp, #76]	; 0x4c
    59e6:	9315      	str	r3, [sp, #84]	; 0x54
    59e8:	9318      	str	r3, [sp, #96]	; 0x60
    59ea:	931b      	str	r3, [sp, #108]	; 0x6c
    59ec:	9309      	str	r3, [sp, #36]	; 0x24
    59ee:	9316      	str	r3, [sp, #88]	; 0x58
    59f0:	9317      	str	r3, [sp, #92]	; 0x5c
    59f2:	9327      	str	r3, [sp, #156]	; 0x9c
    59f4:	9326      	str	r3, [sp, #152]	; 0x98
    59f6:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
    59fa:	f89a 3000 	ldrb.w	r3, [sl]
    59fe:	4654      	mov	r4, sl
    5a00:	b1eb      	cbz	r3, 5a3e <_svfprintf_r+0x92>
    5a02:	2b25      	cmp	r3, #37	; 0x25
    5a04:	d102      	bne.n	5a0c <_svfprintf_r+0x60>
    5a06:	e01a      	b.n	5a3e <_svfprintf_r+0x92>
    5a08:	2b25      	cmp	r3, #37	; 0x25
    5a0a:	d003      	beq.n	5a14 <_svfprintf_r+0x68>
    5a0c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    5a10:	2b00      	cmp	r3, #0
    5a12:	d1f9      	bne.n	5a08 <_svfprintf_r+0x5c>
    5a14:	eba4 050a 	sub.w	r5, r4, sl
    5a18:	b18d      	cbz	r5, 5a3e <_svfprintf_r+0x92>
    5a1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
    5a1c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
    5a1e:	3301      	adds	r3, #1
    5a20:	442a      	add	r2, r5
    5a22:	2b07      	cmp	r3, #7
    5a24:	f8c8 a000 	str.w	sl, [r8]
    5a28:	f8c8 5004 	str.w	r5, [r8, #4]
    5a2c:	9227      	str	r2, [sp, #156]	; 0x9c
    5a2e:	9326      	str	r3, [sp, #152]	; 0x98
    5a30:	f300 808a 	bgt.w	5b48 <_svfprintf_r+0x19c>
    5a34:	f108 0808 	add.w	r8, r8, #8
    5a38:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5a3a:	442b      	add	r3, r5
    5a3c:	9309      	str	r3, [sp, #36]	; 0x24
    5a3e:	7823      	ldrb	r3, [r4, #0]
    5a40:	2b00      	cmp	r3, #0
    5a42:	f000 8089 	beq.w	5b58 <_svfprintf_r+0x1ac>
    5a46:	2300      	movs	r3, #0
    5a48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5a4c:	461a      	mov	r2, r3
    5a4e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
    5a52:	4619      	mov	r1, r3
    5a54:	930d      	str	r3, [sp, #52]	; 0x34
    5a56:	469b      	mov	fp, r3
    5a58:	7863      	ldrb	r3, [r4, #1]
    5a5a:	f104 0a01 	add.w	sl, r4, #1
    5a5e:	900a      	str	r0, [sp, #40]	; 0x28
    5a60:	f10a 0a01 	add.w	sl, sl, #1
    5a64:	f1a3 0020 	sub.w	r0, r3, #32
    5a68:	2858      	cmp	r0, #88	; 0x58
    5a6a:	f200 83b6 	bhi.w	61da <_svfprintf_r+0x82e>
    5a6e:	e8df f010 	tbh	[pc, r0, lsl #1]
    5a72:	034b      	.short	0x034b
    5a74:	03b403b4 	.word	0x03b403b4
    5a78:	03b40353 	.word	0x03b40353
    5a7c:	03b403b4 	.word	0x03b403b4
    5a80:	03b403b4 	.word	0x03b403b4
    5a84:	005903b4 	.word	0x005903b4
    5a88:	03b40358 	.word	0x03b40358
    5a8c:	02140066 	.word	0x02140066
    5a90:	022f03b4 	.word	0x022f03b4
    5a94:	03a403a4 	.word	0x03a403a4
    5a98:	03a403a4 	.word	0x03a403a4
    5a9c:	03a403a4 	.word	0x03a403a4
    5aa0:	03a403a4 	.word	0x03a403a4
    5aa4:	03b403a4 	.word	0x03b403a4
    5aa8:	03b403b4 	.word	0x03b403b4
    5aac:	03b403b4 	.word	0x03b403b4
    5ab0:	03b403b4 	.word	0x03b403b4
    5ab4:	03b403b4 	.word	0x03b403b4
    5ab8:	028b03b4 	.word	0x028b03b4
    5abc:	03b402d3 	.word	0x03b402d3
    5ac0:	03b402d3 	.word	0x03b402d3
    5ac4:	03b403b4 	.word	0x03b403b4
    5ac8:	031a03b4 	.word	0x031a03b4
    5acc:	03b403b4 	.word	0x03b403b4
    5ad0:	03b4031f 	.word	0x03b4031f
    5ad4:	03b403b4 	.word	0x03b403b4
    5ad8:	03b403b4 	.word	0x03b403b4
    5adc:	03b40234 	.word	0x03b40234
    5ae0:	024b03b4 	.word	0x024b03b4
    5ae4:	03b403b4 	.word	0x03b403b4
    5ae8:	03b403b4 	.word	0x03b403b4
    5aec:	03b403b4 	.word	0x03b403b4
    5af0:	03b403b4 	.word	0x03b403b4
    5af4:	03b403b4 	.word	0x03b403b4
    5af8:	039d0276 	.word	0x039d0276
    5afc:	02d302d3 	.word	0x02d302d3
    5b00:	036202d3 	.word	0x036202d3
    5b04:	03b4039d 	.word	0x03b4039d
    5b08:	036703b4 	.word	0x036703b4
    5b0c:	037403b4 	.word	0x037403b4
    5b10:	038b01dd 	.word	0x038b01dd
    5b14:	03b4035d 	.word	0x03b4035d
    5b18:	03b401f2 	.word	0x03b401f2
    5b1c:	03b40087 	.word	0x03b40087
    5b20:	033103b4 	.word	0x033103b4
    5b24:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    5b26:	6823      	ldr	r3, [r4, #0]
    5b28:	4618      	mov	r0, r3
    5b2a:	930d      	str	r3, [sp, #52]	; 0x34
    5b2c:	4623      	mov	r3, r4
    5b2e:	2800      	cmp	r0, #0
    5b30:	f103 0304 	add.w	r3, r3, #4
    5b34:	930f      	str	r3, [sp, #60]	; 0x3c
    5b36:	da04      	bge.n	5b42 <_svfprintf_r+0x196>
    5b38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5b3a:	425b      	negs	r3, r3
    5b3c:	930d      	str	r3, [sp, #52]	; 0x34
    5b3e:	f04b 0b04 	orr.w	fp, fp, #4
    5b42:	f89a 3000 	ldrb.w	r3, [sl]
    5b46:	e78b      	b.n	5a60 <_svfprintf_r+0xb4>
    5b48:	aa25      	add	r2, sp, #148	; 0x94
    5b4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    5b4c:	980c      	ldr	r0, [sp, #48]	; 0x30
    5b4e:	f003 f9a7 	bl	8ea0 <__ssprint_r>
    5b52:	b940      	cbnz	r0, 5b66 <_svfprintf_r+0x1ba>
    5b54:	46c8      	mov	r8, r9
    5b56:	e76f      	b.n	5a38 <_svfprintf_r+0x8c>
    5b58:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    5b5a:	b123      	cbz	r3, 5b66 <_svfprintf_r+0x1ba>
    5b5c:	980c      	ldr	r0, [sp, #48]	; 0x30
    5b5e:	aa25      	add	r2, sp, #148	; 0x94
    5b60:	990b      	ldr	r1, [sp, #44]	; 0x2c
    5b62:	f003 f99d 	bl	8ea0 <__ssprint_r>
    5b66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5b68:	899b      	ldrh	r3, [r3, #12]
    5b6a:	f013 0f40 	tst.w	r3, #64	; 0x40
    5b6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5b70:	bf18      	it	ne
    5b72:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
    5b76:	9309      	str	r3, [sp, #36]	; 0x24
    5b78:	9809      	ldr	r0, [sp, #36]	; 0x24
    5b7a:	b043      	add	sp, #268	; 0x10c
    5b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5b80:	f01b 0f20 	tst.w	fp, #32
    5b84:	9311      	str	r3, [sp, #68]	; 0x44
    5b86:	f040 81af 	bne.w	5ee8 <_svfprintf_r+0x53c>
    5b8a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    5b8c:	f01b 0f10 	tst.w	fp, #16
    5b90:	4613      	mov	r3, r2
    5b92:	f040 8596 	bne.w	66c2 <_svfprintf_r+0xd16>
    5b96:	f01b 0f40 	tst.w	fp, #64	; 0x40
    5b9a:	f000 8592 	beq.w	66c2 <_svfprintf_r+0xd16>
    5b9e:	2500      	movs	r5, #0
    5ba0:	2301      	movs	r3, #1
    5ba2:	8814      	ldrh	r4, [r2, #0]
    5ba4:	3204      	adds	r2, #4
    5ba6:	920f      	str	r2, [sp, #60]	; 0x3c
    5ba8:	2200      	movs	r2, #0
    5baa:	4617      	mov	r7, r2
    5bac:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
    5bb0:	990a      	ldr	r1, [sp, #40]	; 0x28
    5bb2:	1c4a      	adds	r2, r1, #1
    5bb4:	f000 8210 	beq.w	5fd8 <_svfprintf_r+0x62c>
    5bb8:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
    5bbc:	9207      	str	r2, [sp, #28]
    5bbe:	ea54 0205 	orrs.w	r2, r4, r5
    5bc2:	f040 820f 	bne.w	5fe4 <_svfprintf_r+0x638>
    5bc6:	2900      	cmp	r1, #0
    5bc8:	f040 842d 	bne.w	6426 <_svfprintf_r+0xa7a>
    5bcc:	2b00      	cmp	r3, #0
    5bce:	f040 8535 	bne.w	663c <_svfprintf_r+0xc90>
    5bd2:	f01b 0301 	ands.w	r3, fp, #1
    5bd6:	930e      	str	r3, [sp, #56]	; 0x38
    5bd8:	f000 865e 	beq.w	6898 <_svfprintf_r+0xeec>
    5bdc:	2330      	movs	r3, #48	; 0x30
    5bde:	ae42      	add	r6, sp, #264	; 0x108
    5be0:	f806 3d41 	strb.w	r3, [r6, #-65]!
    5be4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5be6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    5be8:	4293      	cmp	r3, r2
    5bea:	bfb8      	it	lt
    5bec:	4613      	movlt	r3, r2
    5bee:	9308      	str	r3, [sp, #32]
    5bf0:	2300      	movs	r3, #0
    5bf2:	9312      	str	r3, [sp, #72]	; 0x48
    5bf4:	b117      	cbz	r7, 5bfc <_svfprintf_r+0x250>
    5bf6:	9b08      	ldr	r3, [sp, #32]
    5bf8:	3301      	adds	r3, #1
    5bfa:	9308      	str	r3, [sp, #32]
    5bfc:	9b07      	ldr	r3, [sp, #28]
    5bfe:	f013 0302 	ands.w	r3, r3, #2
    5c02:	9310      	str	r3, [sp, #64]	; 0x40
    5c04:	d002      	beq.n	5c0c <_svfprintf_r+0x260>
    5c06:	9b08      	ldr	r3, [sp, #32]
    5c08:	3302      	adds	r3, #2
    5c0a:	9308      	str	r3, [sp, #32]
    5c0c:	9b07      	ldr	r3, [sp, #28]
    5c0e:	f013 0584 	ands.w	r5, r3, #132	; 0x84
    5c12:	f040 830e 	bne.w	6232 <_svfprintf_r+0x886>
    5c16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5c18:	9a08      	ldr	r2, [sp, #32]
    5c1a:	eba3 0b02 	sub.w	fp, r3, r2
    5c1e:	f1bb 0f00 	cmp.w	fp, #0
    5c22:	f340 8306 	ble.w	6232 <_svfprintf_r+0x886>
    5c26:	f1bb 0f10 	cmp.w	fp, #16
    5c2a:	f340 87ae 	ble.w	6b8a <_svfprintf_r+0x11de>
    5c2e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
    5c30:	4643      	mov	r3, r8
    5c32:	4621      	mov	r1, r4
    5c34:	46a8      	mov	r8, r5
    5c36:	2710      	movs	r7, #16
    5c38:	9a26      	ldr	r2, [sp, #152]	; 0x98
    5c3a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    5c3c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    5c3e:	e006      	b.n	5c4e <_svfprintf_r+0x2a2>
    5c40:	f1ab 0b10 	sub.w	fp, fp, #16
    5c44:	f1bb 0f10 	cmp.w	fp, #16
    5c48:	f103 0308 	add.w	r3, r3, #8
    5c4c:	dd18      	ble.n	5c80 <_svfprintf_r+0x2d4>
    5c4e:	3201      	adds	r2, #1
    5c50:	48ab      	ldr	r0, [pc, #684]	; (5f00 <_svfprintf_r+0x554>)
    5c52:	3110      	adds	r1, #16
    5c54:	2a07      	cmp	r2, #7
    5c56:	9127      	str	r1, [sp, #156]	; 0x9c
    5c58:	9226      	str	r2, [sp, #152]	; 0x98
    5c5a:	e883 0081 	stmia.w	r3, {r0, r7}
    5c5e:	ddef      	ble.n	5c40 <_svfprintf_r+0x294>
    5c60:	aa25      	add	r2, sp, #148	; 0x94
    5c62:	4629      	mov	r1, r5
    5c64:	4620      	mov	r0, r4
    5c66:	f003 f91b 	bl	8ea0 <__ssprint_r>
    5c6a:	2800      	cmp	r0, #0
    5c6c:	f47f af7b 	bne.w	5b66 <_svfprintf_r+0x1ba>
    5c70:	f1ab 0b10 	sub.w	fp, fp, #16
    5c74:	f1bb 0f10 	cmp.w	fp, #16
    5c78:	464b      	mov	r3, r9
    5c7a:	9927      	ldr	r1, [sp, #156]	; 0x9c
    5c7c:	9a26      	ldr	r2, [sp, #152]	; 0x98
    5c7e:	dce6      	bgt.n	5c4e <_svfprintf_r+0x2a2>
    5c80:	4645      	mov	r5, r8
    5c82:	460c      	mov	r4, r1
    5c84:	4698      	mov	r8, r3
    5c86:	3201      	adds	r2, #1
    5c88:	4b9d      	ldr	r3, [pc, #628]	; (5f00 <_svfprintf_r+0x554>)
    5c8a:	445c      	add	r4, fp
    5c8c:	2a07      	cmp	r2, #7
    5c8e:	9427      	str	r4, [sp, #156]	; 0x9c
    5c90:	9226      	str	r2, [sp, #152]	; 0x98
    5c92:	e888 0808 	stmia.w	r8, {r3, fp}
    5c96:	f300 82c1 	bgt.w	621c <_svfprintf_r+0x870>
    5c9a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
    5c9e:	f108 0808 	add.w	r8, r8, #8
    5ca2:	b187      	cbz	r7, 5cc6 <_svfprintf_r+0x31a>
    5ca4:	2101      	movs	r1, #1
    5ca6:	9b26      	ldr	r3, [sp, #152]	; 0x98
    5ca8:	440c      	add	r4, r1
    5caa:	440b      	add	r3, r1
    5cac:	f10d 0277 	add.w	r2, sp, #119	; 0x77
    5cb0:	2b07      	cmp	r3, #7
    5cb2:	9427      	str	r4, [sp, #156]	; 0x9c
    5cb4:	9326      	str	r3, [sp, #152]	; 0x98
    5cb6:	f8c8 1004 	str.w	r1, [r8, #4]
    5cba:	f8c8 2000 	str.w	r2, [r8]
    5cbe:	f300 83c9 	bgt.w	6454 <_svfprintf_r+0xaa8>
    5cc2:	f108 0808 	add.w	r8, r8, #8
    5cc6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5cc8:	b17b      	cbz	r3, 5cea <_svfprintf_r+0x33e>
    5cca:	2102      	movs	r1, #2
    5ccc:	9b26      	ldr	r3, [sp, #152]	; 0x98
    5cce:	440c      	add	r4, r1
    5cd0:	3301      	adds	r3, #1
    5cd2:	aa1e      	add	r2, sp, #120	; 0x78
    5cd4:	2b07      	cmp	r3, #7
    5cd6:	9427      	str	r4, [sp, #156]	; 0x9c
    5cd8:	9326      	str	r3, [sp, #152]	; 0x98
    5cda:	f8c8 1004 	str.w	r1, [r8, #4]
    5cde:	f8c8 2000 	str.w	r2, [r8]
    5ce2:	f300 840d 	bgt.w	6500 <_svfprintf_r+0xb54>
    5ce6:	f108 0808 	add.w	r8, r8, #8
    5cea:	2d80      	cmp	r5, #128	; 0x80
    5cec:	f000 8301 	beq.w	62f2 <_svfprintf_r+0x946>
    5cf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5cf2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    5cf4:	1a9f      	subs	r7, r3, r2
    5cf6:	2f00      	cmp	r7, #0
    5cf8:	dd37      	ble.n	5d6a <_svfprintf_r+0x3be>
    5cfa:	2f10      	cmp	r7, #16
    5cfc:	f340 8675 	ble.w	69ea <_svfprintf_r+0x103e>
    5d00:	4d80      	ldr	r5, [pc, #512]	; (5f04 <_svfprintf_r+0x558>)
    5d02:	4642      	mov	r2, r8
    5d04:	4621      	mov	r1, r4
    5d06:	46b0      	mov	r8, r6
    5d08:	f04f 0b10 	mov.w	fp, #16
    5d0c:	462e      	mov	r6, r5
    5d0e:	9b26      	ldr	r3, [sp, #152]	; 0x98
    5d10:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    5d12:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    5d14:	e004      	b.n	5d20 <_svfprintf_r+0x374>
    5d16:	3f10      	subs	r7, #16
    5d18:	2f10      	cmp	r7, #16
    5d1a:	f102 0208 	add.w	r2, r2, #8
    5d1e:	dd15      	ble.n	5d4c <_svfprintf_r+0x3a0>
    5d20:	3301      	adds	r3, #1
    5d22:	3110      	adds	r1, #16
    5d24:	2b07      	cmp	r3, #7
    5d26:	9127      	str	r1, [sp, #156]	; 0x9c
    5d28:	9326      	str	r3, [sp, #152]	; 0x98
    5d2a:	e882 0840 	stmia.w	r2, {r6, fp}
    5d2e:	ddf2      	ble.n	5d16 <_svfprintf_r+0x36a>
    5d30:	aa25      	add	r2, sp, #148	; 0x94
    5d32:	4629      	mov	r1, r5
    5d34:	4620      	mov	r0, r4
    5d36:	f003 f8b3 	bl	8ea0 <__ssprint_r>
    5d3a:	2800      	cmp	r0, #0
    5d3c:	f47f af13 	bne.w	5b66 <_svfprintf_r+0x1ba>
    5d40:	3f10      	subs	r7, #16
    5d42:	2f10      	cmp	r7, #16
    5d44:	464a      	mov	r2, r9
    5d46:	9927      	ldr	r1, [sp, #156]	; 0x9c
    5d48:	9b26      	ldr	r3, [sp, #152]	; 0x98
    5d4a:	dce9      	bgt.n	5d20 <_svfprintf_r+0x374>
    5d4c:	4635      	mov	r5, r6
    5d4e:	460c      	mov	r4, r1
    5d50:	4646      	mov	r6, r8
    5d52:	4690      	mov	r8, r2
    5d54:	3301      	adds	r3, #1
    5d56:	443c      	add	r4, r7
    5d58:	2b07      	cmp	r3, #7
    5d5a:	9427      	str	r4, [sp, #156]	; 0x9c
    5d5c:	9326      	str	r3, [sp, #152]	; 0x98
    5d5e:	e888 00a0 	stmia.w	r8, {r5, r7}
    5d62:	f300 836c 	bgt.w	643e <_svfprintf_r+0xa92>
    5d66:	f108 0808 	add.w	r8, r8, #8
    5d6a:	9b07      	ldr	r3, [sp, #28]
    5d6c:	05df      	lsls	r7, r3, #23
    5d6e:	f100 8262 	bmi.w	6236 <_svfprintf_r+0x88a>
    5d72:	9b26      	ldr	r3, [sp, #152]	; 0x98
    5d74:	990e      	ldr	r1, [sp, #56]	; 0x38
    5d76:	3301      	adds	r3, #1
    5d78:	440c      	add	r4, r1
    5d7a:	2b07      	cmp	r3, #7
    5d7c:	9427      	str	r4, [sp, #156]	; 0x9c
    5d7e:	f8c8 6000 	str.w	r6, [r8]
    5d82:	f8c8 1004 	str.w	r1, [r8, #4]
    5d86:	9326      	str	r3, [sp, #152]	; 0x98
    5d88:	f300 83af 	bgt.w	64ea <_svfprintf_r+0xb3e>
    5d8c:	f108 0808 	add.w	r8, r8, #8
    5d90:	9b07      	ldr	r3, [sp, #28]
    5d92:	075b      	lsls	r3, r3, #29
    5d94:	d53b      	bpl.n	5e0e <_svfprintf_r+0x462>
    5d96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5d98:	9a08      	ldr	r2, [sp, #32]
    5d9a:	1a9d      	subs	r5, r3, r2
    5d9c:	2d00      	cmp	r5, #0
    5d9e:	dd36      	ble.n	5e0e <_svfprintf_r+0x462>
    5da0:	2d10      	cmp	r5, #16
    5da2:	f340 871d 	ble.w	6be0 <_svfprintf_r+0x1234>
    5da6:	2610      	movs	r6, #16
    5da8:	9b26      	ldr	r3, [sp, #152]	; 0x98
    5daa:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    5dac:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
    5db0:	e004      	b.n	5dbc <_svfprintf_r+0x410>
    5db2:	3d10      	subs	r5, #16
    5db4:	2d10      	cmp	r5, #16
    5db6:	f108 0808 	add.w	r8, r8, #8
    5dba:	dd16      	ble.n	5dea <_svfprintf_r+0x43e>
    5dbc:	3301      	adds	r3, #1
    5dbe:	4a50      	ldr	r2, [pc, #320]	; (5f00 <_svfprintf_r+0x554>)
    5dc0:	3410      	adds	r4, #16
    5dc2:	2b07      	cmp	r3, #7
    5dc4:	9427      	str	r4, [sp, #156]	; 0x9c
    5dc6:	9326      	str	r3, [sp, #152]	; 0x98
    5dc8:	e888 0044 	stmia.w	r8, {r2, r6}
    5dcc:	ddf1      	ble.n	5db2 <_svfprintf_r+0x406>
    5dce:	aa25      	add	r2, sp, #148	; 0x94
    5dd0:	4659      	mov	r1, fp
    5dd2:	4638      	mov	r0, r7
    5dd4:	f003 f864 	bl	8ea0 <__ssprint_r>
    5dd8:	2800      	cmp	r0, #0
    5dda:	f47f aec4 	bne.w	5b66 <_svfprintf_r+0x1ba>
    5dde:	3d10      	subs	r5, #16
    5de0:	2d10      	cmp	r5, #16
    5de2:	46c8      	mov	r8, r9
    5de4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
    5de6:	9b26      	ldr	r3, [sp, #152]	; 0x98
    5de8:	dce8      	bgt.n	5dbc <_svfprintf_r+0x410>
    5dea:	3301      	adds	r3, #1
    5dec:	4a44      	ldr	r2, [pc, #272]	; (5f00 <_svfprintf_r+0x554>)
    5dee:	442c      	add	r4, r5
    5df0:	2b07      	cmp	r3, #7
    5df2:	9427      	str	r4, [sp, #156]	; 0x9c
    5df4:	9326      	str	r3, [sp, #152]	; 0x98
    5df6:	e888 0024 	stmia.w	r8, {r2, r5}
    5dfa:	dd08      	ble.n	5e0e <_svfprintf_r+0x462>
    5dfc:	aa25      	add	r2, sp, #148	; 0x94
    5dfe:	990b      	ldr	r1, [sp, #44]	; 0x2c
    5e00:	980c      	ldr	r0, [sp, #48]	; 0x30
    5e02:	f003 f84d 	bl	8ea0 <__ssprint_r>
    5e06:	2800      	cmp	r0, #0
    5e08:	f47f aead 	bne.w	5b66 <_svfprintf_r+0x1ba>
    5e0c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
    5e0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5e10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    5e12:	9908      	ldr	r1, [sp, #32]
    5e14:	428a      	cmp	r2, r1
    5e16:	bfac      	ite	ge
    5e18:	189b      	addge	r3, r3, r2
    5e1a:	185b      	addlt	r3, r3, r1
    5e1c:	9309      	str	r3, [sp, #36]	; 0x24
    5e1e:	2c00      	cmp	r4, #0
    5e20:	f040 82f7 	bne.w	6412 <_svfprintf_r+0xa66>
    5e24:	2300      	movs	r3, #0
    5e26:	46c8      	mov	r8, r9
    5e28:	9326      	str	r3, [sp, #152]	; 0x98
    5e2a:	e5e6      	b.n	59fa <_svfprintf_r+0x4e>
    5e2c:	9311      	str	r3, [sp, #68]	; 0x44
    5e2e:	f01b 0320 	ands.w	r3, fp, #32
    5e32:	f040 8144 	bne.w	60be <_svfprintf_r+0x712>
    5e36:	f01b 0210 	ands.w	r2, fp, #16
    5e3a:	f040 8462 	bne.w	6702 <_svfprintf_r+0xd56>
    5e3e:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
    5e42:	f000 845e 	beq.w	6702 <_svfprintf_r+0xd56>
    5e46:	990f      	ldr	r1, [sp, #60]	; 0x3c
    5e48:	4613      	mov	r3, r2
    5e4a:	460a      	mov	r2, r1
    5e4c:	3204      	adds	r2, #4
    5e4e:	880c      	ldrh	r4, [r1, #0]
    5e50:	2500      	movs	r5, #0
    5e52:	920f      	str	r2, [sp, #60]	; 0x3c
    5e54:	e6a8      	b.n	5ba8 <_svfprintf_r+0x1fc>
    5e56:	2500      	movs	r5, #0
    5e58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    5e5a:	9311      	str	r3, [sp, #68]	; 0x44
    5e5c:	6816      	ldr	r6, [r2, #0]
    5e5e:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
    5e62:	1d14      	adds	r4, r2, #4
    5e64:	2e00      	cmp	r6, #0
    5e66:	f000 86c9 	beq.w	6bfc <_svfprintf_r+0x1250>
    5e6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5e6c:	1c53      	adds	r3, r2, #1
    5e6e:	f000 8617 	beq.w	6aa0 <_svfprintf_r+0x10f4>
    5e72:	4629      	mov	r1, r5
    5e74:	4630      	mov	r0, r6
    5e76:	f002 fb3f 	bl	84f8 <memchr>
    5e7a:	2800      	cmp	r0, #0
    5e7c:	f000 8709 	beq.w	6c92 <_svfprintf_r+0x12e6>
    5e80:	1b83      	subs	r3, r0, r6
    5e82:	950a      	str	r5, [sp, #40]	; 0x28
    5e84:	930e      	str	r3, [sp, #56]	; 0x38
    5e86:	940f      	str	r4, [sp, #60]	; 0x3c
    5e88:	f8cd b01c 	str.w	fp, [sp, #28]
    5e8c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    5e90:	9308      	str	r3, [sp, #32]
    5e92:	9512      	str	r5, [sp, #72]	; 0x48
    5e94:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
    5e98:	e6ac      	b.n	5bf4 <_svfprintf_r+0x248>
    5e9a:	f89a 3000 	ldrb.w	r3, [sl]
    5e9e:	f10a 0401 	add.w	r4, sl, #1
    5ea2:	2b2a      	cmp	r3, #42	; 0x2a
    5ea4:	f000 87bd 	beq.w	6e22 <_svfprintf_r+0x1476>
    5ea8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    5eac:	2809      	cmp	r0, #9
    5eae:	46a2      	mov	sl, r4
    5eb0:	f200 8714 	bhi.w	6cdc <_svfprintf_r+0x1330>
    5eb4:	2300      	movs	r3, #0
    5eb6:	461c      	mov	r4, r3
    5eb8:	f81a 3b01 	ldrb.w	r3, [sl], #1
    5ebc:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    5ec0:	eb00 0444 	add.w	r4, r0, r4, lsl #1
    5ec4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    5ec8:	2809      	cmp	r0, #9
    5eca:	d9f5      	bls.n	5eb8 <_svfprintf_r+0x50c>
    5ecc:	940a      	str	r4, [sp, #40]	; 0x28
    5ece:	e5c9      	b.n	5a64 <_svfprintf_r+0xb8>
    5ed0:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
    5ed4:	f89a 3000 	ldrb.w	r3, [sl]
    5ed8:	e5c2      	b.n	5a60 <_svfprintf_r+0xb4>
    5eda:	f04b 0b10 	orr.w	fp, fp, #16
    5ede:	f01b 0f20 	tst.w	fp, #32
    5ee2:	9311      	str	r3, [sp, #68]	; 0x44
    5ee4:	f43f ae51 	beq.w	5b8a <_svfprintf_r+0x1de>
    5ee8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    5eea:	3407      	adds	r4, #7
    5eec:	f024 0307 	bic.w	r3, r4, #7
    5ef0:	f103 0208 	add.w	r2, r3, #8
    5ef4:	e9d3 4500 	ldrd	r4, r5, [r3]
    5ef8:	920f      	str	r2, [sp, #60]	; 0x3c
    5efa:	2301      	movs	r3, #1
    5efc:	e654      	b.n	5ba8 <_svfprintf_r+0x1fc>
    5efe:	bf00      	nop
    5f00:	0000a720 	.word	0x0000a720
    5f04:	0000a730 	.word	0x0000a730
    5f08:	9311      	str	r3, [sp, #68]	; 0x44
    5f0a:	2a00      	cmp	r2, #0
    5f0c:	f040 87a8 	bne.w	6e60 <_svfprintf_r+0x14b4>
    5f10:	4bbd      	ldr	r3, [pc, #756]	; (6208 <_svfprintf_r+0x85c>)
    5f12:	f01b 0f20 	tst.w	fp, #32
    5f16:	9318      	str	r3, [sp, #96]	; 0x60
    5f18:	f040 80e6 	bne.w	60e8 <_svfprintf_r+0x73c>
    5f1c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    5f1e:	f01b 0f10 	tst.w	fp, #16
    5f22:	4613      	mov	r3, r2
    5f24:	f040 83d4 	bne.w	66d0 <_svfprintf_r+0xd24>
    5f28:	f01b 0f40 	tst.w	fp, #64	; 0x40
    5f2c:	f000 83d0 	beq.w	66d0 <_svfprintf_r+0xd24>
    5f30:	2500      	movs	r5, #0
    5f32:	3304      	adds	r3, #4
    5f34:	8814      	ldrh	r4, [r2, #0]
    5f36:	930f      	str	r3, [sp, #60]	; 0x3c
    5f38:	f01b 0f01 	tst.w	fp, #1
    5f3c:	f000 80e2 	beq.w	6104 <_svfprintf_r+0x758>
    5f40:	ea54 0305 	orrs.w	r3, r4, r5
    5f44:	f000 80de 	beq.w	6104 <_svfprintf_r+0x758>
    5f48:	2330      	movs	r3, #48	; 0x30
    5f4a:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
    5f4e:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
    5f52:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
    5f56:	f04b 0b02 	orr.w	fp, fp, #2
    5f5a:	2302      	movs	r3, #2
    5f5c:	e624      	b.n	5ba8 <_svfprintf_r+0x1fc>
    5f5e:	2201      	movs	r2, #1
    5f60:	9311      	str	r3, [sp, #68]	; 0x44
    5f62:	2300      	movs	r3, #0
    5f64:	4611      	mov	r1, r2
    5f66:	980f      	ldr	r0, [sp, #60]	; 0x3c
    5f68:	9208      	str	r2, [sp, #32]
    5f6a:	6802      	ldr	r2, [r0, #0]
    5f6c:	461f      	mov	r7, r3
    5f6e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
    5f72:	930a      	str	r3, [sp, #40]	; 0x28
    5f74:	9312      	str	r3, [sp, #72]	; 0x48
    5f76:	1d03      	adds	r3, r0, #4
    5f78:	f8cd b01c 	str.w	fp, [sp, #28]
    5f7c:	910e      	str	r1, [sp, #56]	; 0x38
    5f7e:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
    5f82:	930f      	str	r3, [sp, #60]	; 0x3c
    5f84:	ae28      	add	r6, sp, #160	; 0xa0
    5f86:	e639      	b.n	5bfc <_svfprintf_r+0x250>
    5f88:	9311      	str	r3, [sp, #68]	; 0x44
    5f8a:	2a00      	cmp	r2, #0
    5f8c:	f040 877f 	bne.w	6e8e <_svfprintf_r+0x14e2>
    5f90:	f04b 0b10 	orr.w	fp, fp, #16
    5f94:	f01b 0f20 	tst.w	fp, #32
    5f98:	f040 8471 	bne.w	687e <_svfprintf_r+0xed2>
    5f9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    5f9e:	f01b 0f10 	tst.w	fp, #16
    5fa2:	4613      	mov	r3, r2
    5fa4:	f040 8399 	bne.w	66da <_svfprintf_r+0xd2e>
    5fa8:	f01b 0f40 	tst.w	fp, #64	; 0x40
    5fac:	f000 8395 	beq.w	66da <_svfprintf_r+0xd2e>
    5fb0:	f9b2 4000 	ldrsh.w	r4, [r2]
    5fb4:	3304      	adds	r3, #4
    5fb6:	17e5      	asrs	r5, r4, #31
    5fb8:	930f      	str	r3, [sp, #60]	; 0x3c
    5fba:	4622      	mov	r2, r4
    5fbc:	462b      	mov	r3, r5
    5fbe:	2a00      	cmp	r2, #0
    5fc0:	f173 0300 	sbcs.w	r3, r3, #0
    5fc4:	f2c0 8394 	blt.w	66f0 <_svfprintf_r+0xd44>
    5fc8:	990a      	ldr	r1, [sp, #40]	; 0x28
    5fca:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
    5fce:	1c4a      	adds	r2, r1, #1
    5fd0:	f04f 0301 	mov.w	r3, #1
    5fd4:	f47f adf0 	bne.w	5bb8 <_svfprintf_r+0x20c>
    5fd8:	ea54 0205 	orrs.w	r2, r4, r5
    5fdc:	f000 8225 	beq.w	642a <_svfprintf_r+0xa7e>
    5fe0:	f8cd b01c 	str.w	fp, [sp, #28]
    5fe4:	2b01      	cmp	r3, #1
    5fe6:	f000 830a 	beq.w	65fe <_svfprintf_r+0xc52>
    5fea:	2b02      	cmp	r3, #2
    5fec:	f040 8298 	bne.w	6520 <_svfprintf_r+0xb74>
    5ff0:	464e      	mov	r6, r9
    5ff2:	9818      	ldr	r0, [sp, #96]	; 0x60
    5ff4:	0923      	lsrs	r3, r4, #4
    5ff6:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
    5ffa:	0929      	lsrs	r1, r5, #4
    5ffc:	f004 020f 	and.w	r2, r4, #15
    6000:	460d      	mov	r5, r1
    6002:	461c      	mov	r4, r3
    6004:	5c83      	ldrb	r3, [r0, r2]
    6006:	f806 3d01 	strb.w	r3, [r6, #-1]!
    600a:	ea54 0305 	orrs.w	r3, r4, r5
    600e:	d1f1      	bne.n	5ff4 <_svfprintf_r+0x648>
    6010:	eba9 0306 	sub.w	r3, r9, r6
    6014:	930e      	str	r3, [sp, #56]	; 0x38
    6016:	e5e5      	b.n	5be4 <_svfprintf_r+0x238>
    6018:	9311      	str	r3, [sp, #68]	; 0x44
    601a:	2a00      	cmp	r2, #0
    601c:	f040 8733 	bne.w	6e86 <_svfprintf_r+0x14da>
    6020:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    6022:	f01b 0f08 	tst.w	fp, #8
    6026:	f104 0407 	add.w	r4, r4, #7
    602a:	f000 84cb 	beq.w	69c4 <_svfprintf_r+0x1018>
    602e:	f024 0307 	bic.w	r3, r4, #7
    6032:	f103 0208 	add.w	r2, r3, #8
    6036:	920f      	str	r2, [sp, #60]	; 0x3c
    6038:	681a      	ldr	r2, [r3, #0]
    603a:	685b      	ldr	r3, [r3, #4]
    603c:	9214      	str	r2, [sp, #80]	; 0x50
    603e:	9315      	str	r3, [sp, #84]	; 0x54
    6040:	9b15      	ldr	r3, [sp, #84]	; 0x54
    6042:	9d14      	ldr	r5, [sp, #80]	; 0x50
    6044:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
    6048:	4628      	mov	r0, r5
    604a:	4621      	mov	r1, r4
    604c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6050:	4b6e      	ldr	r3, [pc, #440]	; (620c <_svfprintf_r+0x860>)
    6052:	f004 fa71 	bl	a538 <__aeabi_dcmpun>
    6056:	2800      	cmp	r0, #0
    6058:	f040 8430 	bne.w	68bc <_svfprintf_r+0xf10>
    605c:	4628      	mov	r0, r5
    605e:	4621      	mov	r1, r4
    6060:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6064:	4b69      	ldr	r3, [pc, #420]	; (620c <_svfprintf_r+0x860>)
    6066:	f7ff f92b 	bl	52c0 <__aeabi_dcmple>
    606a:	2800      	cmp	r0, #0
    606c:	f040 8426 	bne.w	68bc <_svfprintf_r+0xf10>
    6070:	a814      	add	r0, sp, #80	; 0x50
    6072:	c80f      	ldmia	r0, {r0, r1, r2, r3}
    6074:	f7ff f91a 	bl	52ac <__aeabi_dcmplt>
    6078:	2800      	cmp	r0, #0
    607a:	f040 85d1 	bne.w	6c20 <_svfprintf_r+0x1274>
    607e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
    6082:	2303      	movs	r3, #3
    6084:	461a      	mov	r2, r3
    6086:	9308      	str	r3, [sp, #32]
    6088:	2300      	movs	r3, #0
    608a:	4619      	mov	r1, r3
    608c:	930a      	str	r3, [sp, #40]	; 0x28
    608e:	4e60      	ldr	r6, [pc, #384]	; (6210 <_svfprintf_r+0x864>)
    6090:	4b60      	ldr	r3, [pc, #384]	; (6214 <_svfprintf_r+0x868>)
    6092:	920e      	str	r2, [sp, #56]	; 0x38
    6094:	9a11      	ldr	r2, [sp, #68]	; 0x44
    6096:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
    609a:	9007      	str	r0, [sp, #28]
    609c:	9112      	str	r1, [sp, #72]	; 0x48
    609e:	2a47      	cmp	r2, #71	; 0x47
    60a0:	bfd8      	it	le
    60a2:	461e      	movle	r6, r3
    60a4:	e5a6      	b.n	5bf4 <_svfprintf_r+0x248>
    60a6:	f04b 0b08 	orr.w	fp, fp, #8
    60aa:	f89a 3000 	ldrb.w	r3, [sl]
    60ae:	e4d7      	b.n	5a60 <_svfprintf_r+0xb4>
    60b0:	f04b 0b10 	orr.w	fp, fp, #16
    60b4:	9311      	str	r3, [sp, #68]	; 0x44
    60b6:	f01b 0320 	ands.w	r3, fp, #32
    60ba:	f43f aebc 	beq.w	5e36 <_svfprintf_r+0x48a>
    60be:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    60c0:	3407      	adds	r4, #7
    60c2:	f024 0307 	bic.w	r3, r4, #7
    60c6:	f103 0208 	add.w	r2, r3, #8
    60ca:	e9d3 4500 	ldrd	r4, r5, [r3]
    60ce:	920f      	str	r2, [sp, #60]	; 0x3c
    60d0:	2300      	movs	r3, #0
    60d2:	e569      	b.n	5ba8 <_svfprintf_r+0x1fc>
    60d4:	9311      	str	r3, [sp, #68]	; 0x44
    60d6:	2a00      	cmp	r2, #0
    60d8:	f040 86be 	bne.w	6e58 <_svfprintf_r+0x14ac>
    60dc:	4b4e      	ldr	r3, [pc, #312]	; (6218 <_svfprintf_r+0x86c>)
    60de:	f01b 0f20 	tst.w	fp, #32
    60e2:	9318      	str	r3, [sp, #96]	; 0x60
    60e4:	f43f af1a 	beq.w	5f1c <_svfprintf_r+0x570>
    60e8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    60ea:	f01b 0f01 	tst.w	fp, #1
    60ee:	f104 0407 	add.w	r4, r4, #7
    60f2:	f024 0307 	bic.w	r3, r4, #7
    60f6:	f103 0208 	add.w	r2, r3, #8
    60fa:	920f      	str	r2, [sp, #60]	; 0x3c
    60fc:	e9d3 4500 	ldrd	r4, r5, [r3]
    6100:	f47f af1e 	bne.w	5f40 <_svfprintf_r+0x594>
    6104:	2302      	movs	r3, #2
    6106:	e54f      	b.n	5ba8 <_svfprintf_r+0x1fc>
    6108:	f89a 3000 	ldrb.w	r3, [sl]
    610c:	2900      	cmp	r1, #0
    610e:	f47f aca7 	bne.w	5a60 <_svfprintf_r+0xb4>
    6112:	2201      	movs	r2, #1
    6114:	2120      	movs	r1, #32
    6116:	e4a3      	b.n	5a60 <_svfprintf_r+0xb4>
    6118:	f04b 0b01 	orr.w	fp, fp, #1
    611c:	f89a 3000 	ldrb.w	r3, [sl]
    6120:	e49e      	b.n	5a60 <_svfprintf_r+0xb4>
    6122:	f89a 3000 	ldrb.w	r3, [sl]
    6126:	2201      	movs	r2, #1
    6128:	212b      	movs	r1, #43	; 0x2b
    612a:	e499      	b.n	5a60 <_svfprintf_r+0xb4>
    612c:	f04b 0b20 	orr.w	fp, fp, #32
    6130:	f89a 3000 	ldrb.w	r3, [sl]
    6134:	e494      	b.n	5a60 <_svfprintf_r+0xb4>
    6136:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
    613a:	f89a 3000 	ldrb.w	r3, [sl]
    613e:	e48f      	b.n	5a60 <_svfprintf_r+0xb4>
    6140:	f89a 3000 	ldrb.w	r3, [sl]
    6144:	2b6c      	cmp	r3, #108	; 0x6c
    6146:	bf03      	ittte	eq
    6148:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
    614c:	f04b 0b20 	orreq.w	fp, fp, #32
    6150:	f10a 0a01 	addeq.w	sl, sl, #1
    6154:	f04b 0b10 	orrne.w	fp, fp, #16
    6158:	e482      	b.n	5a60 <_svfprintf_r+0xb4>
    615a:	2a00      	cmp	r2, #0
    615c:	f040 8678 	bne.w	6e50 <_svfprintf_r+0x14a4>
    6160:	f01b 0f20 	tst.w	fp, #32
    6164:	f040 844f 	bne.w	6a06 <_svfprintf_r+0x105a>
    6168:	f01b 0f10 	tst.w	fp, #16
    616c:	f040 8435 	bne.w	69da <_svfprintf_r+0x102e>
    6170:	f01b 0f40 	tst.w	fp, #64	; 0x40
    6174:	f000 8431 	beq.w	69da <_svfprintf_r+0x102e>
    6178:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    617a:	6813      	ldr	r3, [r2, #0]
    617c:	3204      	adds	r2, #4
    617e:	920f      	str	r2, [sp, #60]	; 0x3c
    6180:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    6184:	801a      	strh	r2, [r3, #0]
    6186:	e438      	b.n	59fa <_svfprintf_r+0x4e>
    6188:	2378      	movs	r3, #120	; 0x78
    618a:	2230      	movs	r2, #48	; 0x30
    618c:	980f      	ldr	r0, [sp, #60]	; 0x3c
    618e:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
    6192:	9311      	str	r3, [sp, #68]	; 0x44
    6194:	1d03      	adds	r3, r0, #4
    6196:	930f      	str	r3, [sp, #60]	; 0x3c
    6198:	4b1f      	ldr	r3, [pc, #124]	; (6218 <_svfprintf_r+0x86c>)
    619a:	6804      	ldr	r4, [r0, #0]
    619c:	9318      	str	r3, [sp, #96]	; 0x60
    619e:	f04b 0b02 	orr.w	fp, fp, #2
    61a2:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
    61a6:	2500      	movs	r5, #0
    61a8:	2302      	movs	r3, #2
    61aa:	e4fd      	b.n	5ba8 <_svfprintf_r+0x1fc>
    61ac:	9311      	str	r3, [sp, #68]	; 0x44
    61ae:	2a00      	cmp	r2, #0
    61b0:	f43f aef0 	beq.w	5f94 <_svfprintf_r+0x5e8>
    61b4:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
    61b8:	e6ec      	b.n	5f94 <_svfprintf_r+0x5e8>
    61ba:	2000      	movs	r0, #0
    61bc:	4604      	mov	r4, r0
    61be:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    61c2:	f81a 3b01 	ldrb.w	r3, [sl], #1
    61c6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    61ca:	eb00 0444 	add.w	r4, r0, r4, lsl #1
    61ce:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    61d2:	2809      	cmp	r0, #9
    61d4:	d9f5      	bls.n	61c2 <_svfprintf_r+0x816>
    61d6:	940d      	str	r4, [sp, #52]	; 0x34
    61d8:	e444      	b.n	5a64 <_svfprintf_r+0xb8>
    61da:	9311      	str	r3, [sp, #68]	; 0x44
    61dc:	2a00      	cmp	r2, #0
    61de:	f040 8646 	bne.w	6e6e <_svfprintf_r+0x14c2>
    61e2:	9a11      	ldr	r2, [sp, #68]	; 0x44
    61e4:	2a00      	cmp	r2, #0
    61e6:	f43f acb7 	beq.w	5b58 <_svfprintf_r+0x1ac>
    61ea:	2300      	movs	r3, #0
    61ec:	2101      	movs	r1, #1
    61ee:	461f      	mov	r7, r3
    61f0:	9108      	str	r1, [sp, #32]
    61f2:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
    61f6:	f8cd b01c 	str.w	fp, [sp, #28]
    61fa:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
    61fe:	930a      	str	r3, [sp, #40]	; 0x28
    6200:	9312      	str	r3, [sp, #72]	; 0x48
    6202:	910e      	str	r1, [sp, #56]	; 0x38
    6204:	ae28      	add	r6, sp, #160	; 0xa0
    6206:	e4f9      	b.n	5bfc <_svfprintf_r+0x250>
    6208:	0000a6ec 	.word	0x0000a6ec
    620c:	7fefffff 	.word	0x7fefffff
    6210:	0000a6e0 	.word	0x0000a6e0
    6214:	0000a6dc 	.word	0x0000a6dc
    6218:	0000a700 	.word	0x0000a700
    621c:	aa25      	add	r2, sp, #148	; 0x94
    621e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    6220:	980c      	ldr	r0, [sp, #48]	; 0x30
    6222:	f002 fe3d 	bl	8ea0 <__ssprint_r>
    6226:	2800      	cmp	r0, #0
    6228:	f47f ac9d 	bne.w	5b66 <_svfprintf_r+0x1ba>
    622c:	46c8      	mov	r8, r9
    622e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
    6232:	9c27      	ldr	r4, [sp, #156]	; 0x9c
    6234:	e535      	b.n	5ca2 <_svfprintf_r+0x2f6>
    6236:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6238:	2b65      	cmp	r3, #101	; 0x65
    623a:	f340 8099 	ble.w	6370 <_svfprintf_r+0x9c4>
    623e:	a814      	add	r0, sp, #80	; 0x50
    6240:	c80f      	ldmia	r0, {r0, r1, r2, r3}
    6242:	f7ff f829 	bl	5298 <__aeabi_dcmpeq>
    6246:	2800      	cmp	r0, #0
    6248:	f000 8192 	beq.w	6570 <_svfprintf_r+0xbc4>
    624c:	2101      	movs	r1, #1
    624e:	9b26      	ldr	r3, [sp, #152]	; 0x98
    6250:	4ab4      	ldr	r2, [pc, #720]	; (6524 <_svfprintf_r+0xb78>)
    6252:	440b      	add	r3, r1
    6254:	440c      	add	r4, r1
    6256:	2b07      	cmp	r3, #7
    6258:	9427      	str	r4, [sp, #156]	; 0x9c
    625a:	9326      	str	r3, [sp, #152]	; 0x98
    625c:	f8c8 1004 	str.w	r1, [r8, #4]
    6260:	f8c8 2000 	str.w	r2, [r8]
    6264:	f300 83c5 	bgt.w	69f2 <_svfprintf_r+0x1046>
    6268:	f108 0808 	add.w	r8, r8, #8
    626c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    626e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    6270:	9c27      	ldr	r4, [sp, #156]	; 0x9c
    6272:	4293      	cmp	r3, r2
    6274:	db03      	blt.n	627e <_svfprintf_r+0x8d2>
    6276:	9b07      	ldr	r3, [sp, #28]
    6278:	07dd      	lsls	r5, r3, #31
    627a:	f57f ad89 	bpl.w	5d90 <_svfprintf_r+0x3e4>
    627e:	9b26      	ldr	r3, [sp, #152]	; 0x98
    6280:	9919      	ldr	r1, [sp, #100]	; 0x64
    6282:	3301      	adds	r3, #1
    6284:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    6286:	440c      	add	r4, r1
    6288:	2b07      	cmp	r3, #7
    628a:	f8c8 2000 	str.w	r2, [r8]
    628e:	f8c8 1004 	str.w	r1, [r8, #4]
    6292:	9427      	str	r4, [sp, #156]	; 0x9c
    6294:	9326      	str	r3, [sp, #152]	; 0x98
    6296:	f300 83c3 	bgt.w	6a20 <_svfprintf_r+0x1074>
    629a:	f108 0808 	add.w	r8, r8, #8
    629e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    62a0:	1e5e      	subs	r6, r3, #1
    62a2:	2e00      	cmp	r6, #0
    62a4:	f77f ad74 	ble.w	5d90 <_svfprintf_r+0x3e4>
    62a8:	2e10      	cmp	r6, #16
    62aa:	f340 8574 	ble.w	6d96 <_svfprintf_r+0x13ea>
    62ae:	4622      	mov	r2, r4
    62b0:	2710      	movs	r7, #16
    62b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
    62b4:	4d9c      	ldr	r5, [pc, #624]	; (6528 <_svfprintf_r+0xb7c>)
    62b6:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
    62ba:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    62bc:	e005      	b.n	62ca <_svfprintf_r+0x91e>
    62be:	f108 0808 	add.w	r8, r8, #8
    62c2:	3e10      	subs	r6, #16
    62c4:	2e10      	cmp	r6, #16
    62c6:	f340 8224 	ble.w	6712 <_svfprintf_r+0xd66>
    62ca:	3301      	adds	r3, #1
    62cc:	3210      	adds	r2, #16
    62ce:	2b07      	cmp	r3, #7
    62d0:	9227      	str	r2, [sp, #156]	; 0x9c
    62d2:	9326      	str	r3, [sp, #152]	; 0x98
    62d4:	e888 00a0 	stmia.w	r8, {r5, r7}
    62d8:	ddf1      	ble.n	62be <_svfprintf_r+0x912>
    62da:	aa25      	add	r2, sp, #148	; 0x94
    62dc:	4621      	mov	r1, r4
    62de:	4658      	mov	r0, fp
    62e0:	f002 fdde 	bl	8ea0 <__ssprint_r>
    62e4:	2800      	cmp	r0, #0
    62e6:	f47f ac3e 	bne.w	5b66 <_svfprintf_r+0x1ba>
    62ea:	46c8      	mov	r8, r9
    62ec:	9a27      	ldr	r2, [sp, #156]	; 0x9c
    62ee:	9b26      	ldr	r3, [sp, #152]	; 0x98
    62f0:	e7e7      	b.n	62c2 <_svfprintf_r+0x916>
    62f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    62f4:	9a08      	ldr	r2, [sp, #32]
    62f6:	1a9f      	subs	r7, r3, r2
    62f8:	2f00      	cmp	r7, #0
    62fa:	f77f acf9 	ble.w	5cf0 <_svfprintf_r+0x344>
    62fe:	2f10      	cmp	r7, #16
    6300:	f340 84a7 	ble.w	6c52 <_svfprintf_r+0x12a6>
    6304:	4d88      	ldr	r5, [pc, #544]	; (6528 <_svfprintf_r+0xb7c>)
    6306:	4642      	mov	r2, r8
    6308:	4621      	mov	r1, r4
    630a:	46b0      	mov	r8, r6
    630c:	f04f 0b10 	mov.w	fp, #16
    6310:	462e      	mov	r6, r5
    6312:	9b26      	ldr	r3, [sp, #152]	; 0x98
    6314:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    6316:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    6318:	e004      	b.n	6324 <_svfprintf_r+0x978>
    631a:	3f10      	subs	r7, #16
    631c:	2f10      	cmp	r7, #16
    631e:	f102 0208 	add.w	r2, r2, #8
    6322:	dd15      	ble.n	6350 <_svfprintf_r+0x9a4>
    6324:	3301      	adds	r3, #1
    6326:	3110      	adds	r1, #16
    6328:	2b07      	cmp	r3, #7
    632a:	9127      	str	r1, [sp, #156]	; 0x9c
    632c:	9326      	str	r3, [sp, #152]	; 0x98
    632e:	e882 0840 	stmia.w	r2, {r6, fp}
    6332:	ddf2      	ble.n	631a <_svfprintf_r+0x96e>
    6334:	aa25      	add	r2, sp, #148	; 0x94
    6336:	4629      	mov	r1, r5
    6338:	4620      	mov	r0, r4
    633a:	f002 fdb1 	bl	8ea0 <__ssprint_r>
    633e:	2800      	cmp	r0, #0
    6340:	f47f ac11 	bne.w	5b66 <_svfprintf_r+0x1ba>
    6344:	3f10      	subs	r7, #16
    6346:	2f10      	cmp	r7, #16
    6348:	464a      	mov	r2, r9
    634a:	9927      	ldr	r1, [sp, #156]	; 0x9c
    634c:	9b26      	ldr	r3, [sp, #152]	; 0x98
    634e:	dce9      	bgt.n	6324 <_svfprintf_r+0x978>
    6350:	4635      	mov	r5, r6
    6352:	460c      	mov	r4, r1
    6354:	4646      	mov	r6, r8
    6356:	4690      	mov	r8, r2
    6358:	3301      	adds	r3, #1
    635a:	443c      	add	r4, r7
    635c:	2b07      	cmp	r3, #7
    635e:	9427      	str	r4, [sp, #156]	; 0x9c
    6360:	9326      	str	r3, [sp, #152]	; 0x98
    6362:	e888 00a0 	stmia.w	r8, {r5, r7}
    6366:	f300 829d 	bgt.w	68a4 <_svfprintf_r+0xef8>
    636a:	f108 0808 	add.w	r8, r8, #8
    636e:	e4bf      	b.n	5cf0 <_svfprintf_r+0x344>
    6370:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    6372:	2b01      	cmp	r3, #1
    6374:	f340 824e 	ble.w	6814 <_svfprintf_r+0xe68>
    6378:	2301      	movs	r3, #1
    637a:	9f26      	ldr	r7, [sp, #152]	; 0x98
    637c:	441c      	add	r4, r3
    637e:	441f      	add	r7, r3
    6380:	2f07      	cmp	r7, #7
    6382:	9427      	str	r4, [sp, #156]	; 0x9c
    6384:	f8c8 6000 	str.w	r6, [r8]
    6388:	9726      	str	r7, [sp, #152]	; 0x98
    638a:	f8c8 3004 	str.w	r3, [r8, #4]
    638e:	f300 825e 	bgt.w	684e <_svfprintf_r+0xea2>
    6392:	f108 0808 	add.w	r8, r8, #8
    6396:	9a19      	ldr	r2, [sp, #100]	; 0x64
    6398:	3701      	adds	r7, #1
    639a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    639c:	4414      	add	r4, r2
    639e:	2f07      	cmp	r7, #7
    63a0:	9427      	str	r4, [sp, #156]	; 0x9c
    63a2:	9726      	str	r7, [sp, #152]	; 0x98
    63a4:	f8c8 3000 	str.w	r3, [r8]
    63a8:	f8c8 2004 	str.w	r2, [r8, #4]
    63ac:	f300 825b 	bgt.w	6866 <_svfprintf_r+0xeba>
    63b0:	f108 0808 	add.w	r8, r8, #8
    63b4:	a814      	add	r0, sp, #80	; 0x50
    63b6:	c80f      	ldmia	r0, {r0, r1, r2, r3}
    63b8:	f7fe ff6e 	bl	5298 <__aeabi_dcmpeq>
    63bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    63be:	2800      	cmp	r0, #0
    63c0:	f040 8141 	bne.w	6646 <_svfprintf_r+0xc9a>
    63c4:	3b01      	subs	r3, #1
    63c6:	3701      	adds	r7, #1
    63c8:	3601      	adds	r6, #1
    63ca:	441c      	add	r4, r3
    63cc:	2f07      	cmp	r7, #7
    63ce:	f8c8 6000 	str.w	r6, [r8]
    63d2:	9726      	str	r7, [sp, #152]	; 0x98
    63d4:	9427      	str	r4, [sp, #156]	; 0x9c
    63d6:	f8c8 3004 	str.w	r3, [r8, #4]
    63da:	f300 8166 	bgt.w	66aa <_svfprintf_r+0xcfe>
    63de:	f108 0808 	add.w	r8, r8, #8
    63e2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    63e4:	3701      	adds	r7, #1
    63e6:	4414      	add	r4, r2
    63e8:	ab21      	add	r3, sp, #132	; 0x84
    63ea:	2f07      	cmp	r7, #7
    63ec:	9427      	str	r4, [sp, #156]	; 0x9c
    63ee:	9726      	str	r7, [sp, #152]	; 0x98
    63f0:	f8c8 2004 	str.w	r2, [r8, #4]
    63f4:	f8c8 3000 	str.w	r3, [r8]
    63f8:	f77f acc8 	ble.w	5d8c <_svfprintf_r+0x3e0>
    63fc:	aa25      	add	r2, sp, #148	; 0x94
    63fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
    6400:	980c      	ldr	r0, [sp, #48]	; 0x30
    6402:	f002 fd4d 	bl	8ea0 <__ssprint_r>
    6406:	2800      	cmp	r0, #0
    6408:	f47f abad 	bne.w	5b66 <_svfprintf_r+0x1ba>
    640c:	46c8      	mov	r8, r9
    640e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
    6410:	e4be      	b.n	5d90 <_svfprintf_r+0x3e4>
    6412:	aa25      	add	r2, sp, #148	; 0x94
    6414:	990b      	ldr	r1, [sp, #44]	; 0x2c
    6416:	980c      	ldr	r0, [sp, #48]	; 0x30
    6418:	f002 fd42 	bl	8ea0 <__ssprint_r>
    641c:	2800      	cmp	r0, #0
    641e:	f43f ad01 	beq.w	5e24 <_svfprintf_r+0x478>
    6422:	f7ff bba0 	b.w	5b66 <_svfprintf_r+0x1ba>
    6426:	f8dd b01c 	ldr.w	fp, [sp, #28]
    642a:	2b01      	cmp	r3, #1
    642c:	f000 817e 	beq.w	672c <_svfprintf_r+0xd80>
    6430:	2b02      	cmp	r3, #2
    6432:	d171      	bne.n	6518 <_svfprintf_r+0xb6c>
    6434:	f8cd b01c 	str.w	fp, [sp, #28]
    6438:	2400      	movs	r4, #0
    643a:	2500      	movs	r5, #0
    643c:	e5d8      	b.n	5ff0 <_svfprintf_r+0x644>
    643e:	aa25      	add	r2, sp, #148	; 0x94
    6440:	990b      	ldr	r1, [sp, #44]	; 0x2c
    6442:	980c      	ldr	r0, [sp, #48]	; 0x30
    6444:	f002 fd2c 	bl	8ea0 <__ssprint_r>
    6448:	2800      	cmp	r0, #0
    644a:	f47f ab8c 	bne.w	5b66 <_svfprintf_r+0x1ba>
    644e:	46c8      	mov	r8, r9
    6450:	9c27      	ldr	r4, [sp, #156]	; 0x9c
    6452:	e48a      	b.n	5d6a <_svfprintf_r+0x3be>
    6454:	aa25      	add	r2, sp, #148	; 0x94
    6456:	990b      	ldr	r1, [sp, #44]	; 0x2c
    6458:	980c      	ldr	r0, [sp, #48]	; 0x30
    645a:	f002 fd21 	bl	8ea0 <__ssprint_r>
    645e:	2800      	cmp	r0, #0
    6460:	f47f ab81 	bne.w	5b66 <_svfprintf_r+0x1ba>
    6464:	46c8      	mov	r8, r9
    6466:	9c27      	ldr	r4, [sp, #156]	; 0x9c
    6468:	e42d      	b.n	5cc6 <_svfprintf_r+0x31a>
    646a:	2001      	movs	r0, #1
    646c:	9b26      	ldr	r3, [sp, #152]	; 0x98
    646e:	4a2d      	ldr	r2, [pc, #180]	; (6524 <_svfprintf_r+0xb78>)
    6470:	4403      	add	r3, r0
    6472:	4404      	add	r4, r0
    6474:	2b07      	cmp	r3, #7
    6476:	9427      	str	r4, [sp, #156]	; 0x9c
    6478:	9326      	str	r3, [sp, #152]	; 0x98
    647a:	f8c8 0004 	str.w	r0, [r8, #4]
    647e:	f8c8 2000 	str.w	r2, [r8]
    6482:	f340 82d8 	ble.w	6a36 <_svfprintf_r+0x108a>
    6486:	aa25      	add	r2, sp, #148	; 0x94
    6488:	990b      	ldr	r1, [sp, #44]	; 0x2c
    648a:	980c      	ldr	r0, [sp, #48]	; 0x30
    648c:	f002 fd08 	bl	8ea0 <__ssprint_r>
    6490:	2800      	cmp	r0, #0
    6492:	f47f ab68 	bne.w	5b66 <_svfprintf_r+0x1ba>
    6496:	46c8      	mov	r8, r9
    6498:	991f      	ldr	r1, [sp, #124]	; 0x7c
    649a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
    649c:	b929      	cbnz	r1, 64aa <_svfprintf_r+0xafe>
    649e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    64a0:	b91b      	cbnz	r3, 64aa <_svfprintf_r+0xafe>
    64a2:	9b07      	ldr	r3, [sp, #28]
    64a4:	07d8      	lsls	r0, r3, #31
    64a6:	f57f ac73 	bpl.w	5d90 <_svfprintf_r+0x3e4>
    64aa:	9819      	ldr	r0, [sp, #100]	; 0x64
    64ac:	9b26      	ldr	r3, [sp, #152]	; 0x98
    64ae:	4602      	mov	r2, r0
    64b0:	3301      	adds	r3, #1
    64b2:	4422      	add	r2, r4
    64b4:	9c1a      	ldr	r4, [sp, #104]	; 0x68
    64b6:	2b07      	cmp	r3, #7
    64b8:	9227      	str	r2, [sp, #156]	; 0x9c
    64ba:	f8c8 4000 	str.w	r4, [r8]
    64be:	f8c8 0004 	str.w	r0, [r8, #4]
    64c2:	9326      	str	r3, [sp, #152]	; 0x98
    64c4:	f300 8431 	bgt.w	6d2a <_svfprintf_r+0x137e>
    64c8:	f108 0808 	add.w	r8, r8, #8
    64cc:	2900      	cmp	r1, #0
    64ce:	f2c0 8409 	blt.w	6ce4 <_svfprintf_r+0x1338>
    64d2:	9913      	ldr	r1, [sp, #76]	; 0x4c
    64d4:	3301      	adds	r3, #1
    64d6:	188c      	adds	r4, r1, r2
    64d8:	2b07      	cmp	r3, #7
    64da:	9427      	str	r4, [sp, #156]	; 0x9c
    64dc:	9326      	str	r3, [sp, #152]	; 0x98
    64de:	f8c8 6000 	str.w	r6, [r8]
    64e2:	f8c8 1004 	str.w	r1, [r8, #4]
    64e6:	f77f ac51 	ble.w	5d8c <_svfprintf_r+0x3e0>
    64ea:	aa25      	add	r2, sp, #148	; 0x94
    64ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
    64ee:	980c      	ldr	r0, [sp, #48]	; 0x30
    64f0:	f002 fcd6 	bl	8ea0 <__ssprint_r>
    64f4:	2800      	cmp	r0, #0
    64f6:	f47f ab36 	bne.w	5b66 <_svfprintf_r+0x1ba>
    64fa:	9c27      	ldr	r4, [sp, #156]	; 0x9c
    64fc:	46c8      	mov	r8, r9
    64fe:	e447      	b.n	5d90 <_svfprintf_r+0x3e4>
    6500:	aa25      	add	r2, sp, #148	; 0x94
    6502:	990b      	ldr	r1, [sp, #44]	; 0x2c
    6504:	980c      	ldr	r0, [sp, #48]	; 0x30
    6506:	f002 fccb 	bl	8ea0 <__ssprint_r>
    650a:	2800      	cmp	r0, #0
    650c:	f47f ab2b 	bne.w	5b66 <_svfprintf_r+0x1ba>
    6510:	46c8      	mov	r8, r9
    6512:	9c27      	ldr	r4, [sp, #156]	; 0x9c
    6514:	f7ff bbe9 	b.w	5cea <_svfprintf_r+0x33e>
    6518:	2400      	movs	r4, #0
    651a:	2500      	movs	r5, #0
    651c:	f8cd b01c 	str.w	fp, [sp, #28]
    6520:	4649      	mov	r1, r9
    6522:	e004      	b.n	652e <_svfprintf_r+0xb82>
    6524:	0000a71c 	.word	0x0000a71c
    6528:	0000a730 	.word	0x0000a730
    652c:	4631      	mov	r1, r6
    652e:	08e2      	lsrs	r2, r4, #3
    6530:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
    6534:	08e8      	lsrs	r0, r5, #3
    6536:	f004 0307 	and.w	r3, r4, #7
    653a:	4605      	mov	r5, r0
    653c:	4614      	mov	r4, r2
    653e:	3330      	adds	r3, #48	; 0x30
    6540:	ea54 0205 	orrs.w	r2, r4, r5
    6544:	f801 3c01 	strb.w	r3, [r1, #-1]
    6548:	f101 36ff 	add.w	r6, r1, #4294967295	; 0xffffffff
    654c:	d1ee      	bne.n	652c <_svfprintf_r+0xb80>
    654e:	9a07      	ldr	r2, [sp, #28]
    6550:	07d2      	lsls	r2, r2, #31
    6552:	f57f ad5d 	bpl.w	6010 <_svfprintf_r+0x664>
    6556:	2b30      	cmp	r3, #48	; 0x30
    6558:	f43f ad5a 	beq.w	6010 <_svfprintf_r+0x664>
    655c:	2330      	movs	r3, #48	; 0x30
    655e:	3902      	subs	r1, #2
    6560:	f806 3c01 	strb.w	r3, [r6, #-1]
    6564:	eba9 0301 	sub.w	r3, r9, r1
    6568:	930e      	str	r3, [sp, #56]	; 0x38
    656a:	460e      	mov	r6, r1
    656c:	f7ff bb3a 	b.w	5be4 <_svfprintf_r+0x238>
    6570:	991f      	ldr	r1, [sp, #124]	; 0x7c
    6572:	2900      	cmp	r1, #0
    6574:	f77f af79 	ble.w	646a <_svfprintf_r+0xabe>
    6578:	9b12      	ldr	r3, [sp, #72]	; 0x48
    657a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    657c:	4293      	cmp	r3, r2
    657e:	bfa8      	it	ge
    6580:	4613      	movge	r3, r2
    6582:	2b00      	cmp	r3, #0
    6584:	461f      	mov	r7, r3
    6586:	dd0b      	ble.n	65a0 <_svfprintf_r+0xbf4>
    6588:	9b26      	ldr	r3, [sp, #152]	; 0x98
    658a:	443c      	add	r4, r7
    658c:	3301      	adds	r3, #1
    658e:	2b07      	cmp	r3, #7
    6590:	9427      	str	r4, [sp, #156]	; 0x9c
    6592:	e888 00c0 	stmia.w	r8, {r6, r7}
    6596:	9326      	str	r3, [sp, #152]	; 0x98
    6598:	f300 82fb 	bgt.w	6b92 <_svfprintf_r+0x11e6>
    659c:	f108 0808 	add.w	r8, r8, #8
    65a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    65a2:	2f00      	cmp	r7, #0
    65a4:	bfa8      	it	ge
    65a6:	1bdb      	subge	r3, r3, r7
    65a8:	2b00      	cmp	r3, #0
    65aa:	461f      	mov	r7, r3
    65ac:	f340 80d7 	ble.w	675e <_svfprintf_r+0xdb2>
    65b0:	2b10      	cmp	r3, #16
    65b2:	f340 8433 	ble.w	6e1c <_svfprintf_r+0x1470>
    65b6:	4dba      	ldr	r5, [pc, #744]	; (68a0 <_svfprintf_r+0xef4>)
    65b8:	4642      	mov	r2, r8
    65ba:	4621      	mov	r1, r4
    65bc:	46b0      	mov	r8, r6
    65be:	f04f 0b10 	mov.w	fp, #16
    65c2:	462e      	mov	r6, r5
    65c4:	9b26      	ldr	r3, [sp, #152]	; 0x98
    65c6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    65c8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    65ca:	e004      	b.n	65d6 <_svfprintf_r+0xc2a>
    65cc:	3208      	adds	r2, #8
    65ce:	3f10      	subs	r7, #16
    65d0:	2f10      	cmp	r7, #16
    65d2:	f340 80b5 	ble.w	6740 <_svfprintf_r+0xd94>
    65d6:	3301      	adds	r3, #1
    65d8:	3110      	adds	r1, #16
    65da:	2b07      	cmp	r3, #7
    65dc:	9127      	str	r1, [sp, #156]	; 0x9c
    65de:	9326      	str	r3, [sp, #152]	; 0x98
    65e0:	e882 0840 	stmia.w	r2, {r6, fp}
    65e4:	ddf2      	ble.n	65cc <_svfprintf_r+0xc20>
    65e6:	aa25      	add	r2, sp, #148	; 0x94
    65e8:	4629      	mov	r1, r5
    65ea:	4620      	mov	r0, r4
    65ec:	f002 fc58 	bl	8ea0 <__ssprint_r>
    65f0:	2800      	cmp	r0, #0
    65f2:	f47f aab8 	bne.w	5b66 <_svfprintf_r+0x1ba>
    65f6:	464a      	mov	r2, r9
    65f8:	9927      	ldr	r1, [sp, #156]	; 0x9c
    65fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
    65fc:	e7e7      	b.n	65ce <_svfprintf_r+0xc22>
    65fe:	2d00      	cmp	r5, #0
    6600:	bf08      	it	eq
    6602:	2c0a      	cmpeq	r4, #10
    6604:	f0c0 8090 	bcc.w	6728 <_svfprintf_r+0xd7c>
    6608:	464e      	mov	r6, r9
    660a:	4620      	mov	r0, r4
    660c:	4629      	mov	r1, r5
    660e:	220a      	movs	r2, #10
    6610:	2300      	movs	r3, #0
    6612:	f7fe fe73 	bl	52fc <__aeabi_uldivmod>
    6616:	3230      	adds	r2, #48	; 0x30
    6618:	f806 2d01 	strb.w	r2, [r6, #-1]!
    661c:	4620      	mov	r0, r4
    661e:	4629      	mov	r1, r5
    6620:	2300      	movs	r3, #0
    6622:	220a      	movs	r2, #10
    6624:	f7fe fe6a 	bl	52fc <__aeabi_uldivmod>
    6628:	4604      	mov	r4, r0
    662a:	460d      	mov	r5, r1
    662c:	ea54 0305 	orrs.w	r3, r4, r5
    6630:	d1eb      	bne.n	660a <_svfprintf_r+0xc5e>
    6632:	eba9 0306 	sub.w	r3, r9, r6
    6636:	930e      	str	r3, [sp, #56]	; 0x38
    6638:	f7ff bad4 	b.w	5be4 <_svfprintf_r+0x238>
    663c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    663e:	464e      	mov	r6, r9
    6640:	930e      	str	r3, [sp, #56]	; 0x38
    6642:	f7ff bacf 	b.w	5be4 <_svfprintf_r+0x238>
    6646:	1e5e      	subs	r6, r3, #1
    6648:	2e00      	cmp	r6, #0
    664a:	f77f aeca 	ble.w	63e2 <_svfprintf_r+0xa36>
    664e:	2e10      	cmp	r6, #16
    6650:	f340 83e2 	ble.w	6e18 <_svfprintf_r+0x146c>
    6654:	4622      	mov	r2, r4
    6656:	f04f 0b10 	mov.w	fp, #16
    665a:	4d91      	ldr	r5, [pc, #580]	; (68a0 <_svfprintf_r+0xef4>)
    665c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    665e:	e004      	b.n	666a <_svfprintf_r+0xcbe>
    6660:	3e10      	subs	r6, #16
    6662:	2e10      	cmp	r6, #16
    6664:	f108 0808 	add.w	r8, r8, #8
    6668:	dd15      	ble.n	6696 <_svfprintf_r+0xcea>
    666a:	3701      	adds	r7, #1
    666c:	3210      	adds	r2, #16
    666e:	2f07      	cmp	r7, #7
    6670:	9227      	str	r2, [sp, #156]	; 0x9c
    6672:	9726      	str	r7, [sp, #152]	; 0x98
    6674:	e888 0820 	stmia.w	r8, {r5, fp}
    6678:	ddf2      	ble.n	6660 <_svfprintf_r+0xcb4>
    667a:	aa25      	add	r2, sp, #148	; 0x94
    667c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    667e:	4620      	mov	r0, r4
    6680:	f002 fc0e 	bl	8ea0 <__ssprint_r>
    6684:	2800      	cmp	r0, #0
    6686:	f47f aa6e 	bne.w	5b66 <_svfprintf_r+0x1ba>
    668a:	3e10      	subs	r6, #16
    668c:	2e10      	cmp	r6, #16
    668e:	46c8      	mov	r8, r9
    6690:	9a27      	ldr	r2, [sp, #156]	; 0x9c
    6692:	9f26      	ldr	r7, [sp, #152]	; 0x98
    6694:	dce9      	bgt.n	666a <_svfprintf_r+0xcbe>
    6696:	4614      	mov	r4, r2
    6698:	3701      	adds	r7, #1
    669a:	4434      	add	r4, r6
    669c:	2f07      	cmp	r7, #7
    669e:	9427      	str	r4, [sp, #156]	; 0x9c
    66a0:	9726      	str	r7, [sp, #152]	; 0x98
    66a2:	e888 0060 	stmia.w	r8, {r5, r6}
    66a6:	f77f ae9a 	ble.w	63de <_svfprintf_r+0xa32>
    66aa:	aa25      	add	r2, sp, #148	; 0x94
    66ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
    66ae:	980c      	ldr	r0, [sp, #48]	; 0x30
    66b0:	f002 fbf6 	bl	8ea0 <__ssprint_r>
    66b4:	2800      	cmp	r0, #0
    66b6:	f47f aa56 	bne.w	5b66 <_svfprintf_r+0x1ba>
    66ba:	9c27      	ldr	r4, [sp, #156]	; 0x9c
    66bc:	9f26      	ldr	r7, [sp, #152]	; 0x98
    66be:	46c8      	mov	r8, r9
    66c0:	e68f      	b.n	63e2 <_svfprintf_r+0xa36>
    66c2:	3204      	adds	r2, #4
    66c4:	681c      	ldr	r4, [r3, #0]
    66c6:	2500      	movs	r5, #0
    66c8:	2301      	movs	r3, #1
    66ca:	920f      	str	r2, [sp, #60]	; 0x3c
    66cc:	f7ff ba6c 	b.w	5ba8 <_svfprintf_r+0x1fc>
    66d0:	681c      	ldr	r4, [r3, #0]
    66d2:	3304      	adds	r3, #4
    66d4:	930f      	str	r3, [sp, #60]	; 0x3c
    66d6:	2500      	movs	r5, #0
    66d8:	e42e      	b.n	5f38 <_svfprintf_r+0x58c>
    66da:	681c      	ldr	r4, [r3, #0]
    66dc:	3304      	adds	r3, #4
    66de:	17e5      	asrs	r5, r4, #31
    66e0:	4622      	mov	r2, r4
    66e2:	930f      	str	r3, [sp, #60]	; 0x3c
    66e4:	462b      	mov	r3, r5
    66e6:	2a00      	cmp	r2, #0
    66e8:	f173 0300 	sbcs.w	r3, r3, #0
    66ec:	f6bf ac6c 	bge.w	5fc8 <_svfprintf_r+0x61c>
    66f0:	272d      	movs	r7, #45	; 0x2d
    66f2:	4264      	negs	r4, r4
    66f4:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
    66f8:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
    66fc:	2301      	movs	r3, #1
    66fe:	f7ff ba57 	b.w	5bb0 <_svfprintf_r+0x204>
    6702:	990f      	ldr	r1, [sp, #60]	; 0x3c
    6704:	2500      	movs	r5, #0
    6706:	460a      	mov	r2, r1
    6708:	3204      	adds	r2, #4
    670a:	680c      	ldr	r4, [r1, #0]
    670c:	920f      	str	r2, [sp, #60]	; 0x3c
    670e:	f7ff ba4b 	b.w	5ba8 <_svfprintf_r+0x1fc>
    6712:	4614      	mov	r4, r2
    6714:	3301      	adds	r3, #1
    6716:	4434      	add	r4, r6
    6718:	2b07      	cmp	r3, #7
    671a:	9427      	str	r4, [sp, #156]	; 0x9c
    671c:	9326      	str	r3, [sp, #152]	; 0x98
    671e:	e888 0060 	stmia.w	r8, {r5, r6}
    6722:	f77f ab33 	ble.w	5d8c <_svfprintf_r+0x3e0>
    6726:	e6e0      	b.n	64ea <_svfprintf_r+0xb3e>
    6728:	f8dd b01c 	ldr.w	fp, [sp, #28]
    672c:	2301      	movs	r3, #1
    672e:	ae42      	add	r6, sp, #264	; 0x108
    6730:	3430      	adds	r4, #48	; 0x30
    6732:	f8cd b01c 	str.w	fp, [sp, #28]
    6736:	f806 4d41 	strb.w	r4, [r6, #-65]!
    673a:	930e      	str	r3, [sp, #56]	; 0x38
    673c:	f7ff ba52 	b.w	5be4 <_svfprintf_r+0x238>
    6740:	4635      	mov	r5, r6
    6742:	460c      	mov	r4, r1
    6744:	4646      	mov	r6, r8
    6746:	4690      	mov	r8, r2
    6748:	3301      	adds	r3, #1
    674a:	443c      	add	r4, r7
    674c:	2b07      	cmp	r3, #7
    674e:	9427      	str	r4, [sp, #156]	; 0x9c
    6750:	9326      	str	r3, [sp, #152]	; 0x98
    6752:	e888 00a0 	stmia.w	r8, {r5, r7}
    6756:	f300 8246 	bgt.w	6be6 <_svfprintf_r+0x123a>
    675a:	f108 0808 	add.w	r8, r8, #8
    675e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    6760:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    6762:	429a      	cmp	r2, r3
    6764:	db45      	blt.n	67f2 <_svfprintf_r+0xe46>
    6766:	9b07      	ldr	r3, [sp, #28]
    6768:	07d9      	lsls	r1, r3, #31
    676a:	d442      	bmi.n	67f2 <_svfprintf_r+0xe46>
    676c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    676e:	9812      	ldr	r0, [sp, #72]	; 0x48
    6770:	1a9a      	subs	r2, r3, r2
    6772:	1a1d      	subs	r5, r3, r0
    6774:	4295      	cmp	r5, r2
    6776:	bfa8      	it	ge
    6778:	4615      	movge	r5, r2
    677a:	2d00      	cmp	r5, #0
    677c:	dd0e      	ble.n	679c <_svfprintf_r+0xdf0>
    677e:	9926      	ldr	r1, [sp, #152]	; 0x98
    6780:	4406      	add	r6, r0
    6782:	3101      	adds	r1, #1
    6784:	442c      	add	r4, r5
    6786:	2907      	cmp	r1, #7
    6788:	f8c8 6000 	str.w	r6, [r8]
    678c:	9427      	str	r4, [sp, #156]	; 0x9c
    678e:	f8c8 5004 	str.w	r5, [r8, #4]
    6792:	9126      	str	r1, [sp, #152]	; 0x98
    6794:	f300 8216 	bgt.w	6bc4 <_svfprintf_r+0x1218>
    6798:	f108 0808 	add.w	r8, r8, #8
    679c:	2d00      	cmp	r5, #0
    679e:	bfb4      	ite	lt
    67a0:	4616      	movlt	r6, r2
    67a2:	1b56      	subge	r6, r2, r5
    67a4:	2e00      	cmp	r6, #0
    67a6:	f77f aaf3 	ble.w	5d90 <_svfprintf_r+0x3e4>
    67aa:	2e10      	cmp	r6, #16
    67ac:	f340 82f3 	ble.w	6d96 <_svfprintf_r+0x13ea>
    67b0:	4622      	mov	r2, r4
    67b2:	2710      	movs	r7, #16
    67b4:	9b26      	ldr	r3, [sp, #152]	; 0x98
    67b6:	4d3a      	ldr	r5, [pc, #232]	; (68a0 <_svfprintf_r+0xef4>)
    67b8:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
    67bc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    67be:	e004      	b.n	67ca <_svfprintf_r+0xe1e>
    67c0:	f108 0808 	add.w	r8, r8, #8
    67c4:	3e10      	subs	r6, #16
    67c6:	2e10      	cmp	r6, #16
    67c8:	dda3      	ble.n	6712 <_svfprintf_r+0xd66>
    67ca:	3301      	adds	r3, #1
    67cc:	3210      	adds	r2, #16
    67ce:	2b07      	cmp	r3, #7
    67d0:	9227      	str	r2, [sp, #156]	; 0x9c
    67d2:	9326      	str	r3, [sp, #152]	; 0x98
    67d4:	e888 00a0 	stmia.w	r8, {r5, r7}
    67d8:	ddf2      	ble.n	67c0 <_svfprintf_r+0xe14>
    67da:	aa25      	add	r2, sp, #148	; 0x94
    67dc:	4621      	mov	r1, r4
    67de:	4658      	mov	r0, fp
    67e0:	f002 fb5e 	bl	8ea0 <__ssprint_r>
    67e4:	2800      	cmp	r0, #0
    67e6:	f47f a9be 	bne.w	5b66 <_svfprintf_r+0x1ba>
    67ea:	46c8      	mov	r8, r9
    67ec:	9a27      	ldr	r2, [sp, #156]	; 0x9c
    67ee:	9b26      	ldr	r3, [sp, #152]	; 0x98
    67f0:	e7e8      	b.n	67c4 <_svfprintf_r+0xe18>
    67f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
    67f4:	9819      	ldr	r0, [sp, #100]	; 0x64
    67f6:	3301      	adds	r3, #1
    67f8:	991a      	ldr	r1, [sp, #104]	; 0x68
    67fa:	4404      	add	r4, r0
    67fc:	2b07      	cmp	r3, #7
    67fe:	9427      	str	r4, [sp, #156]	; 0x9c
    6800:	f8c8 1000 	str.w	r1, [r8]
    6804:	f8c8 0004 	str.w	r0, [r8, #4]
    6808:	9326      	str	r3, [sp, #152]	; 0x98
    680a:	f300 81cf 	bgt.w	6bac <_svfprintf_r+0x1200>
    680e:	f108 0808 	add.w	r8, r8, #8
    6812:	e7ab      	b.n	676c <_svfprintf_r+0xdc0>
    6814:	9b07      	ldr	r3, [sp, #28]
    6816:	07da      	lsls	r2, r3, #31
    6818:	f53f adae 	bmi.w	6378 <_svfprintf_r+0x9cc>
    681c:	2301      	movs	r3, #1
    681e:	9f26      	ldr	r7, [sp, #152]	; 0x98
    6820:	441c      	add	r4, r3
    6822:	441f      	add	r7, r3
    6824:	2f07      	cmp	r7, #7
    6826:	9427      	str	r4, [sp, #156]	; 0x9c
    6828:	f8c8 6000 	str.w	r6, [r8]
    682c:	9726      	str	r7, [sp, #152]	; 0x98
    682e:	f8c8 3004 	str.w	r3, [r8, #4]
    6832:	f77f add4 	ble.w	63de <_svfprintf_r+0xa32>
    6836:	aa25      	add	r2, sp, #148	; 0x94
    6838:	990b      	ldr	r1, [sp, #44]	; 0x2c
    683a:	980c      	ldr	r0, [sp, #48]	; 0x30
    683c:	f002 fb30 	bl	8ea0 <__ssprint_r>
    6840:	2800      	cmp	r0, #0
    6842:	f47f a990 	bne.w	5b66 <_svfprintf_r+0x1ba>
    6846:	46c8      	mov	r8, r9
    6848:	9c27      	ldr	r4, [sp, #156]	; 0x9c
    684a:	9f26      	ldr	r7, [sp, #152]	; 0x98
    684c:	e5c9      	b.n	63e2 <_svfprintf_r+0xa36>
    684e:	aa25      	add	r2, sp, #148	; 0x94
    6850:	990b      	ldr	r1, [sp, #44]	; 0x2c
    6852:	980c      	ldr	r0, [sp, #48]	; 0x30
    6854:	f002 fb24 	bl	8ea0 <__ssprint_r>
    6858:	2800      	cmp	r0, #0
    685a:	f47f a984 	bne.w	5b66 <_svfprintf_r+0x1ba>
    685e:	46c8      	mov	r8, r9
    6860:	9c27      	ldr	r4, [sp, #156]	; 0x9c
    6862:	9f26      	ldr	r7, [sp, #152]	; 0x98
    6864:	e597      	b.n	6396 <_svfprintf_r+0x9ea>
    6866:	aa25      	add	r2, sp, #148	; 0x94
    6868:	990b      	ldr	r1, [sp, #44]	; 0x2c
    686a:	980c      	ldr	r0, [sp, #48]	; 0x30
    686c:	f002 fb18 	bl	8ea0 <__ssprint_r>
    6870:	2800      	cmp	r0, #0
    6872:	f47f a978 	bne.w	5b66 <_svfprintf_r+0x1ba>
    6876:	46c8      	mov	r8, r9
    6878:	9c27      	ldr	r4, [sp, #156]	; 0x9c
    687a:	9f26      	ldr	r7, [sp, #152]	; 0x98
    687c:	e59a      	b.n	63b4 <_svfprintf_r+0xa08>
    687e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    6880:	3407      	adds	r4, #7
    6882:	f024 0407 	bic.w	r4, r4, #7
    6886:	f104 0108 	add.w	r1, r4, #8
    688a:	e9d4 2300 	ldrd	r2, r3, [r4]
    688e:	910f      	str	r1, [sp, #60]	; 0x3c
    6890:	4614      	mov	r4, r2
    6892:	461d      	mov	r5, r3
    6894:	f7ff bb93 	b.w	5fbe <_svfprintf_r+0x612>
    6898:	464e      	mov	r6, r9
    689a:	f7ff b9a3 	b.w	5be4 <_svfprintf_r+0x238>
    689e:	bf00      	nop
    68a0:	0000a730 	.word	0x0000a730
    68a4:	aa25      	add	r2, sp, #148	; 0x94
    68a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
    68a8:	980c      	ldr	r0, [sp, #48]	; 0x30
    68aa:	f002 faf9 	bl	8ea0 <__ssprint_r>
    68ae:	2800      	cmp	r0, #0
    68b0:	f47f a959 	bne.w	5b66 <_svfprintf_r+0x1ba>
    68b4:	46c8      	mov	r8, r9
    68b6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
    68b8:	f7ff ba1a 	b.w	5cf0 <_svfprintf_r+0x344>
    68bc:	9c14      	ldr	r4, [sp, #80]	; 0x50
    68be:	4622      	mov	r2, r4
    68c0:	4620      	mov	r0, r4
    68c2:	9c15      	ldr	r4, [sp, #84]	; 0x54
    68c4:	4623      	mov	r3, r4
    68c6:	4621      	mov	r1, r4
    68c8:	f003 fe36 	bl	a538 <__aeabi_dcmpun>
    68cc:	2800      	cmp	r0, #0
    68ce:	f040 8273 	bne.w	6db8 <_svfprintf_r+0x140c>
    68d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    68d4:	3301      	adds	r3, #1
    68d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    68d8:	f023 0320 	bic.w	r3, r3, #32
    68dc:	930e      	str	r3, [sp, #56]	; 0x38
    68de:	f000 819c 	beq.w	6c1a <_svfprintf_r+0x126e>
    68e2:	2b47      	cmp	r3, #71	; 0x47
    68e4:	f000 80d6 	beq.w	6a94 <_svfprintf_r+0x10e8>
    68e8:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
    68ec:	9307      	str	r3, [sp, #28]
    68ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
    68f0:	1e1f      	subs	r7, r3, #0
    68f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
    68f4:	9308      	str	r3, [sp, #32]
    68f6:	bfb7      	itett	lt
    68f8:	463b      	movlt	r3, r7
    68fa:	2300      	movge	r3, #0
    68fc:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
    6900:	232d      	movlt	r3, #45	; 0x2d
    6902:	9310      	str	r3, [sp, #64]	; 0x40
    6904:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6906:	2b66      	cmp	r3, #102	; 0x66
    6908:	f000 8190 	beq.w	6c2c <_svfprintf_r+0x1280>
    690c:	2b46      	cmp	r3, #70	; 0x46
    690e:	f000 80a4 	beq.w	6a5a <_svfprintf_r+0x10ae>
    6912:	2002      	movs	r0, #2
    6914:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6916:	a923      	add	r1, sp, #140	; 0x8c
    6918:	2b45      	cmp	r3, #69	; 0x45
    691a:	bf0a      	itet	eq
    691c:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
    691e:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
    6920:	1c5d      	addeq	r5, r3, #1
    6922:	e88d 0021 	stmia.w	sp, {r0, r5}
    6926:	9104      	str	r1, [sp, #16]
    6928:	a820      	add	r0, sp, #128	; 0x80
    692a:	a91f      	add	r1, sp, #124	; 0x7c
    692c:	463b      	mov	r3, r7
    692e:	9003      	str	r0, [sp, #12]
    6930:	9a08      	ldr	r2, [sp, #32]
    6932:	9102      	str	r1, [sp, #8]
    6934:	980c      	ldr	r0, [sp, #48]	; 0x30
    6936:	f000 fbcf 	bl	70d8 <_dtoa_r>
    693a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    693c:	4606      	mov	r6, r0
    693e:	2b67      	cmp	r3, #103	; 0x67
    6940:	f040 81ba 	bne.w	6cb8 <_svfprintf_r+0x130c>
    6944:	f01b 0f01 	tst.w	fp, #1
    6948:	f000 8223 	beq.w	6d92 <_svfprintf_r+0x13e6>
    694c:	1974      	adds	r4, r6, r5
    694e:	9a16      	ldr	r2, [sp, #88]	; 0x58
    6950:	9808      	ldr	r0, [sp, #32]
    6952:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    6954:	4639      	mov	r1, r7
    6956:	f7fe fc9f 	bl	5298 <__aeabi_dcmpeq>
    695a:	2800      	cmp	r0, #0
    695c:	f040 8124 	bne.w	6ba8 <_svfprintf_r+0x11fc>
    6960:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    6962:	42a3      	cmp	r3, r4
    6964:	d206      	bcs.n	6974 <_svfprintf_r+0xfc8>
    6966:	2130      	movs	r1, #48	; 0x30
    6968:	1c5a      	adds	r2, r3, #1
    696a:	9223      	str	r2, [sp, #140]	; 0x8c
    696c:	7019      	strb	r1, [r3, #0]
    696e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    6970:	429c      	cmp	r4, r3
    6972:	d8f9      	bhi.n	6968 <_svfprintf_r+0xfbc>
    6974:	1b9b      	subs	r3, r3, r6
    6976:	9313      	str	r3, [sp, #76]	; 0x4c
    6978:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    697a:	2b47      	cmp	r3, #71	; 0x47
    697c:	f000 80a2 	beq.w	6ac4 <_svfprintf_r+0x1118>
    6980:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6982:	2b65      	cmp	r3, #101	; 0x65
    6984:	f340 81a7 	ble.w	6cd6 <_svfprintf_r+0x132a>
    6988:	9b11      	ldr	r3, [sp, #68]	; 0x44
    698a:	2b66      	cmp	r3, #102	; 0x66
    698c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    698e:	9312      	str	r3, [sp, #72]	; 0x48
    6990:	f000 8171 	beq.w	6c76 <_svfprintf_r+0x12ca>
    6994:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    6996:	9a12      	ldr	r2, [sp, #72]	; 0x48
    6998:	4619      	mov	r1, r3
    699a:	4291      	cmp	r1, r2
    699c:	f300 815d 	bgt.w	6c5a <_svfprintf_r+0x12ae>
    69a0:	f01b 0f01 	tst.w	fp, #1
    69a4:	f040 81f0 	bne.w	6d88 <_svfprintf_r+0x13dc>
    69a8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    69ac:	9308      	str	r3, [sp, #32]
    69ae:	2367      	movs	r3, #103	; 0x67
    69b0:	920e      	str	r2, [sp, #56]	; 0x38
    69b2:	9311      	str	r3, [sp, #68]	; 0x44
    69b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    69b6:	2b00      	cmp	r3, #0
    69b8:	d17d      	bne.n	6ab6 <_svfprintf_r+0x110a>
    69ba:	930a      	str	r3, [sp, #40]	; 0x28
    69bc:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
    69c0:	f7ff b918 	b.w	5bf4 <_svfprintf_r+0x248>
    69c4:	f024 0407 	bic.w	r4, r4, #7
    69c8:	6823      	ldr	r3, [r4, #0]
    69ca:	9314      	str	r3, [sp, #80]	; 0x50
    69cc:	6863      	ldr	r3, [r4, #4]
    69ce:	9315      	str	r3, [sp, #84]	; 0x54
    69d0:	f104 0308 	add.w	r3, r4, #8
    69d4:	930f      	str	r3, [sp, #60]	; 0x3c
    69d6:	f7ff bb33 	b.w	6040 <_svfprintf_r+0x694>
    69da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    69dc:	6813      	ldr	r3, [r2, #0]
    69de:	3204      	adds	r2, #4
    69e0:	920f      	str	r2, [sp, #60]	; 0x3c
    69e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    69e4:	601a      	str	r2, [r3, #0]
    69e6:	f7ff b808 	b.w	59fa <_svfprintf_r+0x4e>
    69ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
    69ec:	4daf      	ldr	r5, [pc, #700]	; (6cac <_svfprintf_r+0x1300>)
    69ee:	f7ff b9b1 	b.w	5d54 <_svfprintf_r+0x3a8>
    69f2:	aa25      	add	r2, sp, #148	; 0x94
    69f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
    69f6:	980c      	ldr	r0, [sp, #48]	; 0x30
    69f8:	f002 fa52 	bl	8ea0 <__ssprint_r>
    69fc:	2800      	cmp	r0, #0
    69fe:	f47f a8b2 	bne.w	5b66 <_svfprintf_r+0x1ba>
    6a02:	46c8      	mov	r8, r9
    6a04:	e432      	b.n	626c <_svfprintf_r+0x8c0>
    6a06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    6a08:	4613      	mov	r3, r2
    6a0a:	3304      	adds	r3, #4
    6a0c:	930f      	str	r3, [sp, #60]	; 0x3c
    6a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6a10:	6811      	ldr	r1, [r2, #0]
    6a12:	17dd      	asrs	r5, r3, #31
    6a14:	461a      	mov	r2, r3
    6a16:	462b      	mov	r3, r5
    6a18:	e9c1 2300 	strd	r2, r3, [r1]
    6a1c:	f7fe bfed 	b.w	59fa <_svfprintf_r+0x4e>
    6a20:	aa25      	add	r2, sp, #148	; 0x94
    6a22:	990b      	ldr	r1, [sp, #44]	; 0x2c
    6a24:	980c      	ldr	r0, [sp, #48]	; 0x30
    6a26:	f002 fa3b 	bl	8ea0 <__ssprint_r>
    6a2a:	2800      	cmp	r0, #0
    6a2c:	f47f a89b 	bne.w	5b66 <_svfprintf_r+0x1ba>
    6a30:	46c8      	mov	r8, r9
    6a32:	9c27      	ldr	r4, [sp, #156]	; 0x9c
    6a34:	e433      	b.n	629e <_svfprintf_r+0x8f2>
    6a36:	f108 0808 	add.w	r8, r8, #8
    6a3a:	e52f      	b.n	649c <_svfprintf_r+0xaf0>
    6a3c:	2140      	movs	r1, #64	; 0x40
    6a3e:	980c      	ldr	r0, [sp, #48]	; 0x30
    6a40:	f001 fab8 	bl	7fb4 <_malloc_r>
    6a44:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    6a46:	6010      	str	r0, [r2, #0]
    6a48:	6110      	str	r0, [r2, #16]
    6a4a:	2800      	cmp	r0, #0
    6a4c:	f000 8213 	beq.w	6e76 <_svfprintf_r+0x14ca>
    6a50:	2340      	movs	r3, #64	; 0x40
    6a52:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    6a54:	6153      	str	r3, [r2, #20]
    6a56:	f7fe bfc0 	b.w	59da <_svfprintf_r+0x2e>
    6a5a:	2003      	movs	r0, #3
    6a5c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    6a5e:	a923      	add	r1, sp, #140	; 0x8c
    6a60:	e88d 0011 	stmia.w	sp, {r0, r4}
    6a64:	9104      	str	r1, [sp, #16]
    6a66:	a820      	add	r0, sp, #128	; 0x80
    6a68:	a91f      	add	r1, sp, #124	; 0x7c
    6a6a:	9003      	str	r0, [sp, #12]
    6a6c:	9a08      	ldr	r2, [sp, #32]
    6a6e:	463b      	mov	r3, r7
    6a70:	9102      	str	r1, [sp, #8]
    6a72:	980c      	ldr	r0, [sp, #48]	; 0x30
    6a74:	f000 fb30 	bl	70d8 <_dtoa_r>
    6a78:	4625      	mov	r5, r4
    6a7a:	4606      	mov	r6, r0
    6a7c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6a7e:	1974      	adds	r4, r6, r5
    6a80:	2b46      	cmp	r3, #70	; 0x46
    6a82:	f47f af64 	bne.w	694e <_svfprintf_r+0xfa2>
    6a86:	7833      	ldrb	r3, [r6, #0]
    6a88:	2b30      	cmp	r3, #48	; 0x30
    6a8a:	f000 8187 	beq.w	6d9c <_svfprintf_r+0x13f0>
    6a8e:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
    6a90:	442c      	add	r4, r5
    6a92:	e75c      	b.n	694e <_svfprintf_r+0xfa2>
    6a94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6a96:	2b00      	cmp	r3, #0
    6a98:	bf08      	it	eq
    6a9a:	2301      	moveq	r3, #1
    6a9c:	930a      	str	r3, [sp, #40]	; 0x28
    6a9e:	e723      	b.n	68e8 <_svfprintf_r+0xf3c>
    6aa0:	4630      	mov	r0, r6
    6aa2:	950a      	str	r5, [sp, #40]	; 0x28
    6aa4:	f7fe ff54 	bl	5950 <strlen>
    6aa8:	940f      	str	r4, [sp, #60]	; 0x3c
    6aaa:	900e      	str	r0, [sp, #56]	; 0x38
    6aac:	f8cd b01c 	str.w	fp, [sp, #28]
    6ab0:	4603      	mov	r3, r0
    6ab2:	f7ff b9eb 	b.w	5e8c <_svfprintf_r+0x4e0>
    6ab6:	272d      	movs	r7, #45	; 0x2d
    6ab8:	2300      	movs	r3, #0
    6aba:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
    6abe:	930a      	str	r3, [sp, #40]	; 0x28
    6ac0:	f7ff b899 	b.w	5bf6 <_svfprintf_r+0x24a>
    6ac4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    6ac6:	461a      	mov	r2, r3
    6ac8:	9312      	str	r3, [sp, #72]	; 0x48
    6aca:	3303      	adds	r3, #3
    6acc:	db04      	blt.n	6ad8 <_svfprintf_r+0x112c>
    6ace:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6ad0:	4619      	mov	r1, r3
    6ad2:	4291      	cmp	r1, r2
    6ad4:	f6bf af5e 	bge.w	6994 <_svfprintf_r+0xfe8>
    6ad8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6ada:	3b02      	subs	r3, #2
    6adc:	9311      	str	r3, [sp, #68]	; 0x44
    6ade:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6ae0:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
    6ae4:	3b01      	subs	r3, #1
    6ae6:	2b00      	cmp	r3, #0
    6ae8:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
    6aec:	bfb4      	ite	lt
    6aee:	222d      	movlt	r2, #45	; 0x2d
    6af0:	222b      	movge	r2, #43	; 0x2b
    6af2:	931f      	str	r3, [sp, #124]	; 0x7c
    6af4:	bfb8      	it	lt
    6af6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
    6af8:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
    6afc:	bfb8      	it	lt
    6afe:	f1c3 0301 	rsblt	r3, r3, #1
    6b02:	2b09      	cmp	r3, #9
    6b04:	f340 811f 	ble.w	6d46 <_svfprintf_r+0x139a>
    6b08:	f10d 0093 	add.w	r0, sp, #147	; 0x93
    6b0c:	4601      	mov	r1, r0
    6b0e:	4c68      	ldr	r4, [pc, #416]	; (6cb0 <_svfprintf_r+0x1304>)
    6b10:	e000      	b.n	6b14 <_svfprintf_r+0x1168>
    6b12:	4611      	mov	r1, r2
    6b14:	fb84 5203 	smull	r5, r2, r4, r3
    6b18:	17dd      	asrs	r5, r3, #31
    6b1a:	ebc5 05a2 	rsb	r5, r5, r2, asr #2
    6b1e:	eb05 0285 	add.w	r2, r5, r5, lsl #2
    6b22:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
    6b26:	3230      	adds	r2, #48	; 0x30
    6b28:	2d09      	cmp	r5, #9
    6b2a:	f801 2c01 	strb.w	r2, [r1, #-1]
    6b2e:	462b      	mov	r3, r5
    6b30:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
    6b34:	dced      	bgt.n	6b12 <_svfprintf_r+0x1166>
    6b36:	3330      	adds	r3, #48	; 0x30
    6b38:	3902      	subs	r1, #2
    6b3a:	b2dc      	uxtb	r4, r3
    6b3c:	4288      	cmp	r0, r1
    6b3e:	f802 4c01 	strb.w	r4, [r2, #-1]
    6b42:	f240 8191 	bls.w	6e68 <_svfprintf_r+0x14bc>
    6b46:	f10d 0186 	add.w	r1, sp, #134	; 0x86
    6b4a:	4613      	mov	r3, r2
    6b4c:	e001      	b.n	6b52 <_svfprintf_r+0x11a6>
    6b4e:	f813 4b01 	ldrb.w	r4, [r3], #1
    6b52:	4283      	cmp	r3, r0
    6b54:	f801 4b01 	strb.w	r4, [r1], #1
    6b58:	d1f9      	bne.n	6b4e <_svfprintf_r+0x11a2>
    6b5a:	3301      	adds	r3, #1
    6b5c:	1a9b      	subs	r3, r3, r2
    6b5e:	f10d 0286 	add.w	r2, sp, #134	; 0x86
    6b62:	4413      	add	r3, r2
    6b64:	aa21      	add	r2, sp, #132	; 0x84
    6b66:	1a9b      	subs	r3, r3, r2
    6b68:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    6b6a:	931b      	str	r3, [sp, #108]	; 0x6c
    6b6c:	2a01      	cmp	r2, #1
    6b6e:	4413      	add	r3, r2
    6b70:	930e      	str	r3, [sp, #56]	; 0x38
    6b72:	f340 8147 	ble.w	6e04 <_svfprintf_r+0x1458>
    6b76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6b78:	9a19      	ldr	r2, [sp, #100]	; 0x64
    6b7a:	4413      	add	r3, r2
    6b7c:	930e      	str	r3, [sp, #56]	; 0x38
    6b7e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    6b82:	9308      	str	r3, [sp, #32]
    6b84:	2300      	movs	r3, #0
    6b86:	9312      	str	r3, [sp, #72]	; 0x48
    6b88:	e714      	b.n	69b4 <_svfprintf_r+0x1008>
    6b8a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
    6b8c:	9a26      	ldr	r2, [sp, #152]	; 0x98
    6b8e:	f7ff b87a 	b.w	5c86 <_svfprintf_r+0x2da>
    6b92:	aa25      	add	r2, sp, #148	; 0x94
    6b94:	990b      	ldr	r1, [sp, #44]	; 0x2c
    6b96:	980c      	ldr	r0, [sp, #48]	; 0x30
    6b98:	f002 f982 	bl	8ea0 <__ssprint_r>
    6b9c:	2800      	cmp	r0, #0
    6b9e:	f47e afe2 	bne.w	5b66 <_svfprintf_r+0x1ba>
    6ba2:	46c8      	mov	r8, r9
    6ba4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
    6ba6:	e4fb      	b.n	65a0 <_svfprintf_r+0xbf4>
    6ba8:	4623      	mov	r3, r4
    6baa:	e6e3      	b.n	6974 <_svfprintf_r+0xfc8>
    6bac:	aa25      	add	r2, sp, #148	; 0x94
    6bae:	990b      	ldr	r1, [sp, #44]	; 0x2c
    6bb0:	980c      	ldr	r0, [sp, #48]	; 0x30
    6bb2:	f002 f975 	bl	8ea0 <__ssprint_r>
    6bb6:	2800      	cmp	r0, #0
    6bb8:	f47e afd5 	bne.w	5b66 <_svfprintf_r+0x1ba>
    6bbc:	46c8      	mov	r8, r9
    6bbe:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    6bc0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
    6bc2:	e5d3      	b.n	676c <_svfprintf_r+0xdc0>
    6bc4:	aa25      	add	r2, sp, #148	; 0x94
    6bc6:	990b      	ldr	r1, [sp, #44]	; 0x2c
    6bc8:	980c      	ldr	r0, [sp, #48]	; 0x30
    6bca:	f002 f969 	bl	8ea0 <__ssprint_r>
    6bce:	2800      	cmp	r0, #0
    6bd0:	f47e afc9 	bne.w	5b66 <_svfprintf_r+0x1ba>
    6bd4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    6bd6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    6bd8:	46c8      	mov	r8, r9
    6bda:	9c27      	ldr	r4, [sp, #156]	; 0x9c
    6bdc:	1a9a      	subs	r2, r3, r2
    6bde:	e5dd      	b.n	679c <_svfprintf_r+0xdf0>
    6be0:	9b26      	ldr	r3, [sp, #152]	; 0x98
    6be2:	f7ff b902 	b.w	5dea <_svfprintf_r+0x43e>
    6be6:	aa25      	add	r2, sp, #148	; 0x94
    6be8:	990b      	ldr	r1, [sp, #44]	; 0x2c
    6bea:	980c      	ldr	r0, [sp, #48]	; 0x30
    6bec:	f002 f958 	bl	8ea0 <__ssprint_r>
    6bf0:	2800      	cmp	r0, #0
    6bf2:	f47e afb8 	bne.w	5b66 <_svfprintf_r+0x1ba>
    6bf6:	46c8      	mov	r8, r9
    6bf8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
    6bfa:	e5b0      	b.n	675e <_svfprintf_r+0xdb2>
    6bfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6bfe:	4637      	mov	r7, r6
    6c00:	2b06      	cmp	r3, #6
    6c02:	bf28      	it	cs
    6c04:	2306      	movcs	r3, #6
    6c06:	960a      	str	r6, [sp, #40]	; 0x28
    6c08:	9612      	str	r6, [sp, #72]	; 0x48
    6c0a:	9308      	str	r3, [sp, #32]
    6c0c:	940f      	str	r4, [sp, #60]	; 0x3c
    6c0e:	f8cd b01c 	str.w	fp, [sp, #28]
    6c12:	930e      	str	r3, [sp, #56]	; 0x38
    6c14:	4e27      	ldr	r6, [pc, #156]	; (6cb4 <_svfprintf_r+0x1308>)
    6c16:	f7fe bfed 	b.w	5bf4 <_svfprintf_r+0x248>
    6c1a:	2306      	movs	r3, #6
    6c1c:	930a      	str	r3, [sp, #40]	; 0x28
    6c1e:	e663      	b.n	68e8 <_svfprintf_r+0xf3c>
    6c20:	232d      	movs	r3, #45	; 0x2d
    6c22:	461f      	mov	r7, r3
    6c24:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
    6c28:	f7ff ba2b 	b.w	6082 <_svfprintf_r+0x6d6>
    6c2c:	2003      	movs	r0, #3
    6c2e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    6c30:	a923      	add	r1, sp, #140	; 0x8c
    6c32:	e88d 0011 	stmia.w	sp, {r0, r4}
    6c36:	9104      	str	r1, [sp, #16]
    6c38:	a820      	add	r0, sp, #128	; 0x80
    6c3a:	a91f      	add	r1, sp, #124	; 0x7c
    6c3c:	9003      	str	r0, [sp, #12]
    6c3e:	9a08      	ldr	r2, [sp, #32]
    6c40:	463b      	mov	r3, r7
    6c42:	9102      	str	r1, [sp, #8]
    6c44:	980c      	ldr	r0, [sp, #48]	; 0x30
    6c46:	f000 fa47 	bl	70d8 <_dtoa_r>
    6c4a:	4625      	mov	r5, r4
    6c4c:	4606      	mov	r6, r0
    6c4e:	1904      	adds	r4, r0, r4
    6c50:	e719      	b.n	6a86 <_svfprintf_r+0x10da>
    6c52:	9b26      	ldr	r3, [sp, #152]	; 0x98
    6c54:	4d15      	ldr	r5, [pc, #84]	; (6cac <_svfprintf_r+0x1300>)
    6c56:	f7ff bb7f 	b.w	6358 <_svfprintf_r+0x9ac>
    6c5a:	9a19      	ldr	r2, [sp, #100]	; 0x64
    6c5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    6c5e:	4413      	add	r3, r2
    6c60:	9a12      	ldr	r2, [sp, #72]	; 0x48
    6c62:	930e      	str	r3, [sp, #56]	; 0x38
    6c64:	2a00      	cmp	r2, #0
    6c66:	f340 80c6 	ble.w	6df6 <_svfprintf_r+0x144a>
    6c6a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    6c6e:	9308      	str	r3, [sp, #32]
    6c70:	2367      	movs	r3, #103	; 0x67
    6c72:	9311      	str	r3, [sp, #68]	; 0x44
    6c74:	e69e      	b.n	69b4 <_svfprintf_r+0x1008>
    6c76:	2b00      	cmp	r3, #0
    6c78:	f340 80e0 	ble.w	6e3c <_svfprintf_r+0x1490>
    6c7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    6c7e:	2a00      	cmp	r2, #0
    6c80:	f040 80af 	bne.w	6de2 <_svfprintf_r+0x1436>
    6c84:	f01b 0f01 	tst.w	fp, #1
    6c88:	f040 80ab 	bne.w	6de2 <_svfprintf_r+0x1436>
    6c8c:	9308      	str	r3, [sp, #32]
    6c8e:	930e      	str	r3, [sp, #56]	; 0x38
    6c90:	e690      	b.n	69b4 <_svfprintf_r+0x1008>
    6c92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6c94:	940f      	str	r4, [sp, #60]	; 0x3c
    6c96:	9308      	str	r3, [sp, #32]
    6c98:	930e      	str	r3, [sp, #56]	; 0x38
    6c9a:	900a      	str	r0, [sp, #40]	; 0x28
    6c9c:	f8cd b01c 	str.w	fp, [sp, #28]
    6ca0:	9012      	str	r0, [sp, #72]	; 0x48
    6ca2:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
    6ca6:	f7fe bfa5 	b.w	5bf4 <_svfprintf_r+0x248>
    6caa:	bf00      	nop
    6cac:	0000a730 	.word	0x0000a730
    6cb0:	66666667 	.word	0x66666667
    6cb4:	0000a714 	.word	0x0000a714
    6cb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6cba:	2b47      	cmp	r3, #71	; 0x47
    6cbc:	f47f ae46 	bne.w	694c <_svfprintf_r+0xfa0>
    6cc0:	f01b 0f01 	tst.w	fp, #1
    6cc4:	f47f aeda 	bne.w	6a7c <_svfprintf_r+0x10d0>
    6cc8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    6cca:	1b9b      	subs	r3, r3, r6
    6ccc:	9313      	str	r3, [sp, #76]	; 0x4c
    6cce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6cd0:	2b47      	cmp	r3, #71	; 0x47
    6cd2:	f43f aef7 	beq.w	6ac4 <_svfprintf_r+0x1118>
    6cd6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    6cd8:	9312      	str	r3, [sp, #72]	; 0x48
    6cda:	e700      	b.n	6ade <_svfprintf_r+0x1132>
    6cdc:	2000      	movs	r0, #0
    6cde:	900a      	str	r0, [sp, #40]	; 0x28
    6ce0:	f7fe bec0 	b.w	5a64 <_svfprintf_r+0xb8>
    6ce4:	424f      	negs	r7, r1
    6ce6:	3110      	adds	r1, #16
    6ce8:	da35      	bge.n	6d56 <_svfprintf_r+0x13aa>
    6cea:	2410      	movs	r4, #16
    6cec:	4d6a      	ldr	r5, [pc, #424]	; (6e98 <_svfprintf_r+0x14ec>)
    6cee:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
    6cf2:	e004      	b.n	6cfe <_svfprintf_r+0x1352>
    6cf4:	f108 0808 	add.w	r8, r8, #8
    6cf8:	3f10      	subs	r7, #16
    6cfa:	2f10      	cmp	r7, #16
    6cfc:	dd2c      	ble.n	6d58 <_svfprintf_r+0x13ac>
    6cfe:	3301      	adds	r3, #1
    6d00:	3210      	adds	r2, #16
    6d02:	2b07      	cmp	r3, #7
    6d04:	9227      	str	r2, [sp, #156]	; 0x9c
    6d06:	9326      	str	r3, [sp, #152]	; 0x98
    6d08:	f8c8 5000 	str.w	r5, [r8]
    6d0c:	f8c8 4004 	str.w	r4, [r8, #4]
    6d10:	ddf0      	ble.n	6cf4 <_svfprintf_r+0x1348>
    6d12:	aa25      	add	r2, sp, #148	; 0x94
    6d14:	990b      	ldr	r1, [sp, #44]	; 0x2c
    6d16:	4658      	mov	r0, fp
    6d18:	f002 f8c2 	bl	8ea0 <__ssprint_r>
    6d1c:	2800      	cmp	r0, #0
    6d1e:	f47e af22 	bne.w	5b66 <_svfprintf_r+0x1ba>
    6d22:	46c8      	mov	r8, r9
    6d24:	9a27      	ldr	r2, [sp, #156]	; 0x9c
    6d26:	9b26      	ldr	r3, [sp, #152]	; 0x98
    6d28:	e7e6      	b.n	6cf8 <_svfprintf_r+0x134c>
    6d2a:	aa25      	add	r2, sp, #148	; 0x94
    6d2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    6d2e:	980c      	ldr	r0, [sp, #48]	; 0x30
    6d30:	f002 f8b6 	bl	8ea0 <__ssprint_r>
    6d34:	2800      	cmp	r0, #0
    6d36:	f47e af16 	bne.w	5b66 <_svfprintf_r+0x1ba>
    6d3a:	46c8      	mov	r8, r9
    6d3c:	991f      	ldr	r1, [sp, #124]	; 0x7c
    6d3e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
    6d40:	9b26      	ldr	r3, [sp, #152]	; 0x98
    6d42:	f7ff bbc3 	b.w	64cc <_svfprintf_r+0xb20>
    6d46:	2230      	movs	r2, #48	; 0x30
    6d48:	4413      	add	r3, r2
    6d4a:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
    6d4e:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
    6d52:	ab22      	add	r3, sp, #136	; 0x88
    6d54:	e706      	b.n	6b64 <_svfprintf_r+0x11b8>
    6d56:	4d50      	ldr	r5, [pc, #320]	; (6e98 <_svfprintf_r+0x14ec>)
    6d58:	3301      	adds	r3, #1
    6d5a:	443a      	add	r2, r7
    6d5c:	2b07      	cmp	r3, #7
    6d5e:	e888 00a0 	stmia.w	r8, {r5, r7}
    6d62:	9227      	str	r2, [sp, #156]	; 0x9c
    6d64:	9326      	str	r3, [sp, #152]	; 0x98
    6d66:	f108 0808 	add.w	r8, r8, #8
    6d6a:	f77f abb2 	ble.w	64d2 <_svfprintf_r+0xb26>
    6d6e:	aa25      	add	r2, sp, #148	; 0x94
    6d70:	990b      	ldr	r1, [sp, #44]	; 0x2c
    6d72:	980c      	ldr	r0, [sp, #48]	; 0x30
    6d74:	f002 f894 	bl	8ea0 <__ssprint_r>
    6d78:	2800      	cmp	r0, #0
    6d7a:	f47e aef4 	bne.w	5b66 <_svfprintf_r+0x1ba>
    6d7e:	46c8      	mov	r8, r9
    6d80:	9a27      	ldr	r2, [sp, #156]	; 0x9c
    6d82:	9b26      	ldr	r3, [sp, #152]	; 0x98
    6d84:	f7ff bba5 	b.w	64d2 <_svfprintf_r+0xb26>
    6d88:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6d8a:	9a19      	ldr	r2, [sp, #100]	; 0x64
    6d8c:	4413      	add	r3, r2
    6d8e:	930e      	str	r3, [sp, #56]	; 0x38
    6d90:	e76b      	b.n	6c6a <_svfprintf_r+0x12be>
    6d92:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    6d94:	e5ee      	b.n	6974 <_svfprintf_r+0xfc8>
    6d96:	9b26      	ldr	r3, [sp, #152]	; 0x98
    6d98:	4d3f      	ldr	r5, [pc, #252]	; (6e98 <_svfprintf_r+0x14ec>)
    6d9a:	e4bb      	b.n	6714 <_svfprintf_r+0xd68>
    6d9c:	9a16      	ldr	r2, [sp, #88]	; 0x58
    6d9e:	9808      	ldr	r0, [sp, #32]
    6da0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    6da2:	4639      	mov	r1, r7
    6da4:	f7fe fa78 	bl	5298 <__aeabi_dcmpeq>
    6da8:	2800      	cmp	r0, #0
    6daa:	f47f ae70 	bne.w	6a8e <_svfprintf_r+0x10e2>
    6dae:	f1c5 0501 	rsb	r5, r5, #1
    6db2:	951f      	str	r5, [sp, #124]	; 0x7c
    6db4:	442c      	add	r4, r5
    6db6:	e5ca      	b.n	694e <_svfprintf_r+0xfa2>
    6db8:	2303      	movs	r3, #3
    6dba:	461a      	mov	r2, r3
    6dbc:	9308      	str	r3, [sp, #32]
    6dbe:	2300      	movs	r3, #0
    6dc0:	4619      	mov	r1, r3
    6dc2:	930a      	str	r3, [sp, #40]	; 0x28
    6dc4:	4e35      	ldr	r6, [pc, #212]	; (6e9c <_svfprintf_r+0x14f0>)
    6dc6:	4b36      	ldr	r3, [pc, #216]	; (6ea0 <_svfprintf_r+0x14f4>)
    6dc8:	920e      	str	r2, [sp, #56]	; 0x38
    6dca:	9a11      	ldr	r2, [sp, #68]	; 0x44
    6dcc:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
    6dd0:	9007      	str	r0, [sp, #28]
    6dd2:	9112      	str	r1, [sp, #72]	; 0x48
    6dd4:	2a47      	cmp	r2, #71	; 0x47
    6dd6:	bfd8      	it	le
    6dd8:	461e      	movle	r6, r3
    6dda:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
    6dde:	f7fe bf09 	b.w	5bf4 <_svfprintf_r+0x248>
    6de2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6de4:	9a19      	ldr	r2, [sp, #100]	; 0x64
    6de6:	4413      	add	r3, r2
    6de8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    6dea:	441a      	add	r2, r3
    6dec:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    6df0:	920e      	str	r2, [sp, #56]	; 0x38
    6df2:	9308      	str	r3, [sp, #32]
    6df4:	e5de      	b.n	69b4 <_svfprintf_r+0x1008>
    6df6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6df8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    6dfa:	f1c3 0301 	rsb	r3, r3, #1
    6dfe:	441a      	add	r2, r3
    6e00:	4613      	mov	r3, r2
    6e02:	e7c4      	b.n	6d8e <_svfprintf_r+0x13e2>
    6e04:	f01b 0301 	ands.w	r3, fp, #1
    6e08:	9312      	str	r3, [sp, #72]	; 0x48
    6e0a:	f47f aeb4 	bne.w	6b76 <_svfprintf_r+0x11ca>
    6e0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6e10:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    6e14:	9308      	str	r3, [sp, #32]
    6e16:	e5cd      	b.n	69b4 <_svfprintf_r+0x1008>
    6e18:	4d1f      	ldr	r5, [pc, #124]	; (6e98 <_svfprintf_r+0x14ec>)
    6e1a:	e43d      	b.n	6698 <_svfprintf_r+0xcec>
    6e1c:	9b26      	ldr	r3, [sp, #152]	; 0x98
    6e1e:	4d1e      	ldr	r5, [pc, #120]	; (6e98 <_svfprintf_r+0x14ec>)
    6e20:	e492      	b.n	6748 <_svfprintf_r+0xd9c>
    6e22:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    6e24:	f89a 3001 	ldrb.w	r3, [sl, #1]
    6e28:	6828      	ldr	r0, [r5, #0]
    6e2a:	46a2      	mov	sl, r4
    6e2c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    6e30:	900a      	str	r0, [sp, #40]	; 0x28
    6e32:	4628      	mov	r0, r5
    6e34:	3004      	adds	r0, #4
    6e36:	900f      	str	r0, [sp, #60]	; 0x3c
    6e38:	f7fe be12 	b.w	5a60 <_svfprintf_r+0xb4>
    6e3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6e3e:	b913      	cbnz	r3, 6e46 <_svfprintf_r+0x149a>
    6e40:	f01b 0f01 	tst.w	fp, #1
    6e44:	d002      	beq.n	6e4c <_svfprintf_r+0x14a0>
    6e46:	9b19      	ldr	r3, [sp, #100]	; 0x64
    6e48:	3301      	adds	r3, #1
    6e4a:	e7cd      	b.n	6de8 <_svfprintf_r+0x143c>
    6e4c:	2301      	movs	r3, #1
    6e4e:	e71d      	b.n	6c8c <_svfprintf_r+0x12e0>
    6e50:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
    6e54:	f7ff b984 	b.w	6160 <_svfprintf_r+0x7b4>
    6e58:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
    6e5c:	f7ff b93e 	b.w	60dc <_svfprintf_r+0x730>
    6e60:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
    6e64:	f7ff b854 	b.w	5f10 <_svfprintf_r+0x564>
    6e68:	f10d 0386 	add.w	r3, sp, #134	; 0x86
    6e6c:	e67a      	b.n	6b64 <_svfprintf_r+0x11b8>
    6e6e:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
    6e72:	f7ff b9b6 	b.w	61e2 <_svfprintf_r+0x836>
    6e76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6e7a:	230c      	movs	r3, #12
    6e7c:	9209      	str	r2, [sp, #36]	; 0x24
    6e7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    6e80:	6013      	str	r3, [r2, #0]
    6e82:	f7fe be79 	b.w	5b78 <_svfprintf_r+0x1cc>
    6e86:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
    6e8a:	f7ff b8c9 	b.w	6020 <_svfprintf_r+0x674>
    6e8e:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
    6e92:	f7ff b87d 	b.w	5f90 <_svfprintf_r+0x5e4>
    6e96:	bf00      	nop
    6e98:	0000a730 	.word	0x0000a730
    6e9c:	0000a6e8 	.word	0x0000a6e8
    6ea0:	0000a6e4 	.word	0x0000a6e4

00006ea4 <register_fini>:
    6ea4:	4b02      	ldr	r3, [pc, #8]	; (6eb0 <register_fini+0xc>)
    6ea6:	b113      	cbz	r3, 6eae <register_fini+0xa>
    6ea8:	4802      	ldr	r0, [pc, #8]	; (6eb4 <register_fini+0x10>)
    6eaa:	f000 b879 	b.w	6fa0 <atexit>
    6eae:	4770      	bx	lr
    6eb0:	00000000 	.word	0x00000000
    6eb4:	00007f1d 	.word	0x00007f1d

00006eb8 <__call_exitprocs>:
    6eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6ebc:	4b35      	ldr	r3, [pc, #212]	; (6f94 <__call_exitprocs+0xdc>)
    6ebe:	b085      	sub	sp, #20
    6ec0:	9001      	str	r0, [sp, #4]
    6ec2:	6818      	ldr	r0, [r3, #0]
    6ec4:	460e      	mov	r6, r1
    6ec6:	f001 f86b 	bl	7fa0 <__retarget_lock_acquire_recursive>
    6eca:	4b33      	ldr	r3, [pc, #204]	; (6f98 <__call_exitprocs+0xe0>)
    6ecc:	681b      	ldr	r3, [r3, #0]
    6ece:	9302      	str	r3, [sp, #8]
    6ed0:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    6ed4:	9303      	str	r3, [sp, #12]
    6ed6:	9b02      	ldr	r3, [sp, #8]
    6ed8:	f8d3 7148 	ldr.w	r7, [r3, #328]	; 0x148
    6edc:	b337      	cbz	r7, 6f2c <__call_exitprocs+0x74>
    6ede:	f8dd a00c 	ldr.w	sl, [sp, #12]
    6ee2:	f04f 0901 	mov.w	r9, #1
    6ee6:	46d3      	mov	fp, sl
    6ee8:	687c      	ldr	r4, [r7, #4]
    6eea:	1e65      	subs	r5, r4, #1
    6eec:	d40e      	bmi.n	6f0c <__call_exitprocs+0x54>
    6eee:	f04f 0800 	mov.w	r8, #0
    6ef2:	3401      	adds	r4, #1
    6ef4:	eb07 0484 	add.w	r4, r7, r4, lsl #2
    6ef8:	b1fe      	cbz	r6, 6f3a <__call_exitprocs+0x82>
    6efa:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    6efe:	429e      	cmp	r6, r3
    6f00:	d01b      	beq.n	6f3a <__call_exitprocs+0x82>
    6f02:	3d01      	subs	r5, #1
    6f04:	1c6b      	adds	r3, r5, #1
    6f06:	f1a4 0404 	sub.w	r4, r4, #4
    6f0a:	d1f5      	bne.n	6ef8 <__call_exitprocs+0x40>
    6f0c:	4b23      	ldr	r3, [pc, #140]	; (6f9c <__call_exitprocs+0xe4>)
    6f0e:	b16b      	cbz	r3, 6f2c <__call_exitprocs+0x74>
    6f10:	687b      	ldr	r3, [r7, #4]
    6f12:	2b00      	cmp	r3, #0
    6f14:	d139      	bne.n	6f8a <__call_exitprocs+0xd2>
    6f16:	683b      	ldr	r3, [r7, #0]
    6f18:	b143      	cbz	r3, 6f2c <__call_exitprocs+0x74>
    6f1a:	4638      	mov	r0, r7
    6f1c:	f8cb 3000 	str.w	r3, [fp]
    6f20:	f3af 8000 	nop.w
    6f24:	f8db 7000 	ldr.w	r7, [fp]
    6f28:	2f00      	cmp	r7, #0
    6f2a:	d1dd      	bne.n	6ee8 <__call_exitprocs+0x30>
    6f2c:	4b19      	ldr	r3, [pc, #100]	; (6f94 <__call_exitprocs+0xdc>)
    6f2e:	6818      	ldr	r0, [r3, #0]
    6f30:	b005      	add	sp, #20
    6f32:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6f36:	f001 b83b 	b.w	7fb0 <__retarget_lock_release_recursive>
    6f3a:	687b      	ldr	r3, [r7, #4]
    6f3c:	6822      	ldr	r2, [r4, #0]
    6f3e:	3b01      	subs	r3, #1
    6f40:	42ab      	cmp	r3, r5
    6f42:	bf0c      	ite	eq
    6f44:	607d      	streq	r5, [r7, #4]
    6f46:	f8c4 8000 	strne.w	r8, [r4]
    6f4a:	2a00      	cmp	r2, #0
    6f4c:	d0d9      	beq.n	6f02 <__call_exitprocs+0x4a>
    6f4e:	f8d7 1188 	ldr.w	r1, [r7, #392]	; 0x188
    6f52:	fa09 f305 	lsl.w	r3, r9, r5
    6f56:	420b      	tst	r3, r1
    6f58:	f8d7 a004 	ldr.w	sl, [r7, #4]
    6f5c:	d00f      	beq.n	6f7e <__call_exitprocs+0xc6>
    6f5e:	f8d7 118c 	ldr.w	r1, [r7, #396]	; 0x18c
    6f62:	420b      	tst	r3, r1
    6f64:	d10d      	bne.n	6f82 <__call_exitprocs+0xca>
    6f66:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
    6f6a:	9801      	ldr	r0, [sp, #4]
    6f6c:	4790      	blx	r2
    6f6e:	687b      	ldr	r3, [r7, #4]
    6f70:	4553      	cmp	r3, sl
    6f72:	d1b0      	bne.n	6ed6 <__call_exitprocs+0x1e>
    6f74:	f8db 3000 	ldr.w	r3, [fp]
    6f78:	42bb      	cmp	r3, r7
    6f7a:	d0c2      	beq.n	6f02 <__call_exitprocs+0x4a>
    6f7c:	e7ab      	b.n	6ed6 <__call_exitprocs+0x1e>
    6f7e:	4790      	blx	r2
    6f80:	e7f5      	b.n	6f6e <__call_exitprocs+0xb6>
    6f82:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    6f86:	4790      	blx	r2
    6f88:	e7f1      	b.n	6f6e <__call_exitprocs+0xb6>
    6f8a:	46bb      	mov	fp, r7
    6f8c:	683f      	ldr	r7, [r7, #0]
    6f8e:	2f00      	cmp	r7, #0
    6f90:	d1aa      	bne.n	6ee8 <__call_exitprocs+0x30>
    6f92:	e7cb      	b.n	6f2c <__call_exitprocs+0x74>
    6f94:	10000508 	.word	0x10000508
    6f98:	0000a6d8 	.word	0x0000a6d8
    6f9c:	00000000 	.word	0x00000000

00006fa0 <atexit>:
    6fa0:	2300      	movs	r3, #0
    6fa2:	4601      	mov	r1, r0
    6fa4:	461a      	mov	r2, r3
    6fa6:	4618      	mov	r0, r3
    6fa8:	f002 bd26 	b.w	99f8 <__register_exitproc>

00006fac <quorem>:
    6fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6fb0:	6903      	ldr	r3, [r0, #16]
    6fb2:	690f      	ldr	r7, [r1, #16]
    6fb4:	b083      	sub	sp, #12
    6fb6:	429f      	cmp	r7, r3
    6fb8:	f300 8088 	bgt.w	70cc <quorem+0x120>
    6fbc:	3f01      	subs	r7, #1
    6fbe:	f101 0614 	add.w	r6, r1, #20
    6fc2:	f100 0a14 	add.w	sl, r0, #20
    6fc6:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
    6fca:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
    6fce:	3301      	adds	r3, #1
    6fd0:	fbb2 f8f3 	udiv	r8, r2, r3
    6fd4:	00bb      	lsls	r3, r7, #2
    6fd6:	9300      	str	r3, [sp, #0]
    6fd8:	eb06 0903 	add.w	r9, r6, r3
    6fdc:	4453      	add	r3, sl
    6fde:	9301      	str	r3, [sp, #4]
    6fe0:	f1b8 0f00 	cmp.w	r8, #0
    6fe4:	d03b      	beq.n	705e <quorem+0xb2>
    6fe6:	2300      	movs	r3, #0
    6fe8:	46b4      	mov	ip, r6
    6fea:	461c      	mov	r4, r3
    6fec:	46d6      	mov	lr, sl
    6fee:	f85c 2b04 	ldr.w	r2, [ip], #4
    6ff2:	f8de 5000 	ldr.w	r5, [lr]
    6ff6:	fa1f fb82 	uxth.w	fp, r2
    6ffa:	fb08 330b 	mla	r3, r8, fp, r3
    6ffe:	0c12      	lsrs	r2, r2, #16
    7000:	ea4f 4b13 	mov.w	fp, r3, lsr #16
    7004:	fb08 bb02 	mla	fp, r8, r2, fp
    7008:	b29a      	uxth	r2, r3
    700a:	1aa2      	subs	r2, r4, r2
    700c:	b2ab      	uxth	r3, r5
    700e:	fa1f f48b 	uxth.w	r4, fp
    7012:	441a      	add	r2, r3
    7014:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
    7018:	eb04 4422 	add.w	r4, r4, r2, asr #16
    701c:	b292      	uxth	r2, r2
    701e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
    7022:	45e1      	cmp	r9, ip
    7024:	f84e 2b04 	str.w	r2, [lr], #4
    7028:	ea4f 4424 	mov.w	r4, r4, asr #16
    702c:	ea4f 431b 	mov.w	r3, fp, lsr #16
    7030:	d2dd      	bcs.n	6fee <quorem+0x42>
    7032:	9b00      	ldr	r3, [sp, #0]
    7034:	f85a 3003 	ldr.w	r3, [sl, r3]
    7038:	b98b      	cbnz	r3, 705e <quorem+0xb2>
    703a:	9c01      	ldr	r4, [sp, #4]
    703c:	1f23      	subs	r3, r4, #4
    703e:	459a      	cmp	sl, r3
    7040:	d20c      	bcs.n	705c <quorem+0xb0>
    7042:	f854 3c04 	ldr.w	r3, [r4, #-4]
    7046:	b94b      	cbnz	r3, 705c <quorem+0xb0>
    7048:	f1a4 0308 	sub.w	r3, r4, #8
    704c:	e002      	b.n	7054 <quorem+0xa8>
    704e:	681a      	ldr	r2, [r3, #0]
    7050:	3b04      	subs	r3, #4
    7052:	b91a      	cbnz	r2, 705c <quorem+0xb0>
    7054:	459a      	cmp	sl, r3
    7056:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
    705a:	d3f8      	bcc.n	704e <quorem+0xa2>
    705c:	6107      	str	r7, [r0, #16]
    705e:	4604      	mov	r4, r0
    7060:	f001 fce8 	bl	8a34 <__mcmp>
    7064:	2800      	cmp	r0, #0
    7066:	db2d      	blt.n	70c4 <quorem+0x118>
    7068:	4655      	mov	r5, sl
    706a:	2300      	movs	r3, #0
    706c:	f108 0801 	add.w	r8, r8, #1
    7070:	f856 1b04 	ldr.w	r1, [r6], #4
    7074:	6828      	ldr	r0, [r5, #0]
    7076:	b28a      	uxth	r2, r1
    7078:	1a9a      	subs	r2, r3, r2
    707a:	0c0b      	lsrs	r3, r1, #16
    707c:	b281      	uxth	r1, r0
    707e:	440a      	add	r2, r1
    7080:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
    7084:	eb03 4322 	add.w	r3, r3, r2, asr #16
    7088:	b292      	uxth	r2, r2
    708a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    708e:	45b1      	cmp	r9, r6
    7090:	f845 2b04 	str.w	r2, [r5], #4
    7094:	ea4f 4323 	mov.w	r3, r3, asr #16
    7098:	d2ea      	bcs.n	7070 <quorem+0xc4>
    709a:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
    709e:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
    70a2:	b97a      	cbnz	r2, 70c4 <quorem+0x118>
    70a4:	1f1a      	subs	r2, r3, #4
    70a6:	4592      	cmp	sl, r2
    70a8:	d20b      	bcs.n	70c2 <quorem+0x116>
    70aa:	f853 2c04 	ldr.w	r2, [r3, #-4]
    70ae:	b942      	cbnz	r2, 70c2 <quorem+0x116>
    70b0:	3b08      	subs	r3, #8
    70b2:	e002      	b.n	70ba <quorem+0x10e>
    70b4:	681a      	ldr	r2, [r3, #0]
    70b6:	3b04      	subs	r3, #4
    70b8:	b91a      	cbnz	r2, 70c2 <quorem+0x116>
    70ba:	459a      	cmp	sl, r3
    70bc:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
    70c0:	d3f8      	bcc.n	70b4 <quorem+0x108>
    70c2:	6127      	str	r7, [r4, #16]
    70c4:	4640      	mov	r0, r8
    70c6:	b003      	add	sp, #12
    70c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    70cc:	2000      	movs	r0, #0
    70ce:	b003      	add	sp, #12
    70d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    70d4:	0000      	movs	r0, r0
	...

000070d8 <_dtoa_r>:
    70d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    70dc:	6c05      	ldr	r5, [r0, #64]	; 0x40
    70de:	b09b      	sub	sp, #108	; 0x6c
    70e0:	4604      	mov	r4, r0
    70e2:	4692      	mov	sl, r2
    70e4:	469b      	mov	fp, r3
    70e6:	9e27      	ldr	r6, [sp, #156]	; 0x9c
    70e8:	b14d      	cbz	r5, 70fe <_dtoa_r+0x26>
    70ea:	2301      	movs	r3, #1
    70ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
    70ee:	4629      	mov	r1, r5
    70f0:	4093      	lsls	r3, r2
    70f2:	60ab      	str	r3, [r5, #8]
    70f4:	606a      	str	r2, [r5, #4]
    70f6:	f001 fa77 	bl	85e8 <_Bfree>
    70fa:	2300      	movs	r3, #0
    70fc:	6423      	str	r3, [r4, #64]	; 0x40
    70fe:	f1bb 0f00 	cmp.w	fp, #0
    7102:	465d      	mov	r5, fp
    7104:	db35      	blt.n	7172 <_dtoa_r+0x9a>
    7106:	2300      	movs	r3, #0
    7108:	6033      	str	r3, [r6, #0]
    710a:	4b9d      	ldr	r3, [pc, #628]	; (7380 <_dtoa_r+0x2a8>)
    710c:	43ab      	bics	r3, r5
    710e:	d015      	beq.n	713c <_dtoa_r+0x64>
    7110:	2200      	movs	r2, #0
    7112:	2300      	movs	r3, #0
    7114:	4650      	mov	r0, sl
    7116:	4659      	mov	r1, fp
    7118:	f7fe f8be 	bl	5298 <__aeabi_dcmpeq>
    711c:	4680      	mov	r8, r0
    711e:	2800      	cmp	r0, #0
    7120:	d02d      	beq.n	717e <_dtoa_r+0xa6>
    7122:	2301      	movs	r3, #1
    7124:	9a26      	ldr	r2, [sp, #152]	; 0x98
    7126:	6013      	str	r3, [r2, #0]
    7128:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    712a:	2b00      	cmp	r3, #0
    712c:	f000 80bd 	beq.w	72aa <_dtoa_r+0x1d2>
    7130:	4894      	ldr	r0, [pc, #592]	; (7384 <_dtoa_r+0x2ac>)
    7132:	6018      	str	r0, [r3, #0]
    7134:	3801      	subs	r0, #1
    7136:	b01b      	add	sp, #108	; 0x6c
    7138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    713c:	f242 730f 	movw	r3, #9999	; 0x270f
    7140:	9a26      	ldr	r2, [sp, #152]	; 0x98
    7142:	6013      	str	r3, [r2, #0]
    7144:	f1ba 0f00 	cmp.w	sl, #0
    7148:	d10d      	bne.n	7166 <_dtoa_r+0x8e>
    714a:	f3c5 0513 	ubfx	r5, r5, #0, #20
    714e:	b955      	cbnz	r5, 7166 <_dtoa_r+0x8e>
    7150:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    7152:	488d      	ldr	r0, [pc, #564]	; (7388 <_dtoa_r+0x2b0>)
    7154:	2b00      	cmp	r3, #0
    7156:	d0ee      	beq.n	7136 <_dtoa_r+0x5e>
    7158:	f100 0308 	add.w	r3, r0, #8
    715c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    715e:	6013      	str	r3, [r2, #0]
    7160:	b01b      	add	sp, #108	; 0x6c
    7162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7166:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    7168:	4888      	ldr	r0, [pc, #544]	; (738c <_dtoa_r+0x2b4>)
    716a:	2b00      	cmp	r3, #0
    716c:	d0e3      	beq.n	7136 <_dtoa_r+0x5e>
    716e:	1cc3      	adds	r3, r0, #3
    7170:	e7f4      	b.n	715c <_dtoa_r+0x84>
    7172:	2301      	movs	r3, #1
    7174:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
    7178:	6033      	str	r3, [r6, #0]
    717a:	46ab      	mov	fp, r5
    717c:	e7c5      	b.n	710a <_dtoa_r+0x32>
    717e:	aa18      	add	r2, sp, #96	; 0x60
    7180:	ab19      	add	r3, sp, #100	; 0x64
    7182:	9201      	str	r2, [sp, #4]
    7184:	9300      	str	r3, [sp, #0]
    7186:	4652      	mov	r2, sl
    7188:	465b      	mov	r3, fp
    718a:	4620      	mov	r0, r4
    718c:	f001 fd88 	bl	8ca0 <__d2b>
    7190:	0d2b      	lsrs	r3, r5, #20
    7192:	4681      	mov	r9, r0
    7194:	d071      	beq.n	727a <_dtoa_r+0x1a2>
    7196:	4650      	mov	r0, sl
    7198:	f3cb 0213 	ubfx	r2, fp, #0, #20
    719c:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
    71a0:	9f18      	ldr	r7, [sp, #96]	; 0x60
    71a2:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
    71a6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
    71aa:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
    71ae:	2200      	movs	r2, #0
    71b0:	4b77      	ldr	r3, [pc, #476]	; (7390 <_dtoa_r+0x2b8>)
    71b2:	f7fd fc55 	bl	4a60 <__aeabi_dsub>
    71b6:	a36c      	add	r3, pc, #432	; (adr r3, 7368 <_dtoa_r+0x290>)
    71b8:	e9d3 2300 	ldrd	r2, r3, [r3]
    71bc:	f7fd fe04 	bl	4dc8 <__aeabi_dmul>
    71c0:	a36b      	add	r3, pc, #428	; (adr r3, 7370 <_dtoa_r+0x298>)
    71c2:	e9d3 2300 	ldrd	r2, r3, [r3]
    71c6:	f7fd fc4d 	bl	4a64 <__adddf3>
    71ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
    71ce:	4630      	mov	r0, r6
    71d0:	f7fd fd94 	bl	4cfc <__aeabi_i2d>
    71d4:	a368      	add	r3, pc, #416	; (adr r3, 7378 <_dtoa_r+0x2a0>)
    71d6:	e9d3 2300 	ldrd	r2, r3, [r3]
    71da:	f7fd fdf5 	bl	4dc8 <__aeabi_dmul>
    71de:	4602      	mov	r2, r0
    71e0:	460b      	mov	r3, r1
    71e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    71e6:	f7fd fc3d 	bl	4a64 <__adddf3>
    71ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
    71ee:	f003 f9b9 	bl	a564 <__aeabi_d2iz>
    71f2:	2200      	movs	r2, #0
    71f4:	9002      	str	r0, [sp, #8]
    71f6:	2300      	movs	r3, #0
    71f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    71fc:	f7fe f856 	bl	52ac <__aeabi_dcmplt>
    7200:	2800      	cmp	r0, #0
    7202:	f040 816d 	bne.w	74e0 <_dtoa_r+0x408>
    7206:	9d02      	ldr	r5, [sp, #8]
    7208:	2d16      	cmp	r5, #22
    720a:	f200 8157 	bhi.w	74bc <_dtoa_r+0x3e4>
    720e:	4961      	ldr	r1, [pc, #388]	; (7394 <_dtoa_r+0x2bc>)
    7210:	4652      	mov	r2, sl
    7212:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
    7216:	465b      	mov	r3, fp
    7218:	e9d1 0100 	ldrd	r0, r1, [r1]
    721c:	f7fe f864 	bl	52e8 <__aeabi_dcmpgt>
    7220:	2800      	cmp	r0, #0
    7222:	f000 81be 	beq.w	75a2 <_dtoa_r+0x4ca>
    7226:	1e6b      	subs	r3, r5, #1
    7228:	9302      	str	r3, [sp, #8]
    722a:	2300      	movs	r3, #0
    722c:	930e      	str	r3, [sp, #56]	; 0x38
    722e:	1bbf      	subs	r7, r7, r6
    7230:	1e7b      	subs	r3, r7, #1
    7232:	9308      	str	r3, [sp, #32]
    7234:	f100 814e 	bmi.w	74d4 <_dtoa_r+0x3fc>
    7238:	2300      	movs	r3, #0
    723a:	930a      	str	r3, [sp, #40]	; 0x28
    723c:	9b02      	ldr	r3, [sp, #8]
    723e:	2b00      	cmp	r3, #0
    7240:	f2c0 813f 	blt.w	74c2 <_dtoa_r+0x3ea>
    7244:	9a08      	ldr	r2, [sp, #32]
    7246:	930d      	str	r3, [sp, #52]	; 0x34
    7248:	4611      	mov	r1, r2
    724a:	4419      	add	r1, r3
    724c:	2300      	movs	r3, #0
    724e:	9108      	str	r1, [sp, #32]
    7250:	930c      	str	r3, [sp, #48]	; 0x30
    7252:	9b24      	ldr	r3, [sp, #144]	; 0x90
    7254:	2b09      	cmp	r3, #9
    7256:	d82a      	bhi.n	72ae <_dtoa_r+0x1d6>
    7258:	2b05      	cmp	r3, #5
    725a:	f340 8658 	ble.w	7f0e <_dtoa_r+0xe36>
    725e:	2500      	movs	r5, #0
    7260:	3b04      	subs	r3, #4
    7262:	9324      	str	r3, [sp, #144]	; 0x90
    7264:	9b24      	ldr	r3, [sp, #144]	; 0x90
    7266:	3b02      	subs	r3, #2
    7268:	2b03      	cmp	r3, #3
    726a:	f200 863f 	bhi.w	7eec <_dtoa_r+0xe14>
    726e:	e8df f013 	tbh	[pc, r3, lsl #1]
    7272:	03ce      	.short	0x03ce
    7274:	03d902c3 	.word	0x03d902c3
    7278:	045b      	.short	0x045b
    727a:	9f18      	ldr	r7, [sp, #96]	; 0x60
    727c:	9e19      	ldr	r6, [sp, #100]	; 0x64
    727e:	443e      	add	r6, r7
    7280:	f206 4332 	addw	r3, r6, #1074	; 0x432
    7284:	2b20      	cmp	r3, #32
    7286:	f340 8187 	ble.w	7598 <_dtoa_r+0x4c0>
    728a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
    728e:	f206 4012 	addw	r0, r6, #1042	; 0x412
    7292:	409d      	lsls	r5, r3
    7294:	fa2a f000 	lsr.w	r0, sl, r0
    7298:	4328      	orrs	r0, r5
    729a:	f7fd fd1f 	bl	4cdc <__aeabi_ui2d>
    729e:	2301      	movs	r3, #1
    72a0:	3e01      	subs	r6, #1
    72a2:	9314      	str	r3, [sp, #80]	; 0x50
    72a4:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
    72a8:	e781      	b.n	71ae <_dtoa_r+0xd6>
    72aa:	483b      	ldr	r0, [pc, #236]	; (7398 <_dtoa_r+0x2c0>)
    72ac:	e743      	b.n	7136 <_dtoa_r+0x5e>
    72ae:	2100      	movs	r1, #0
    72b0:	4620      	mov	r0, r4
    72b2:	6461      	str	r1, [r4, #68]	; 0x44
    72b4:	9125      	str	r1, [sp, #148]	; 0x94
    72b6:	f001 f971 	bl	859c <_Balloc>
    72ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    72be:	9307      	str	r3, [sp, #28]
    72c0:	930f      	str	r3, [sp, #60]	; 0x3c
    72c2:	2301      	movs	r3, #1
    72c4:	9a25      	ldr	r2, [sp, #148]	; 0x94
    72c6:	9004      	str	r0, [sp, #16]
    72c8:	6420      	str	r0, [r4, #64]	; 0x40
    72ca:	9224      	str	r2, [sp, #144]	; 0x90
    72cc:	930b      	str	r3, [sp, #44]	; 0x2c
    72ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
    72d0:	2b00      	cmp	r3, #0
    72d2:	f2c0 80d3 	blt.w	747c <_dtoa_r+0x3a4>
    72d6:	9a02      	ldr	r2, [sp, #8]
    72d8:	2a0e      	cmp	r2, #14
    72da:	f300 80cf 	bgt.w	747c <_dtoa_r+0x3a4>
    72de:	4b2d      	ldr	r3, [pc, #180]	; (7394 <_dtoa_r+0x2bc>)
    72e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    72e4:	e9d3 2300 	ldrd	r2, r3, [r3]
    72e8:	e9cd 2308 	strd	r2, r3, [sp, #32]
    72ec:	9b25      	ldr	r3, [sp, #148]	; 0x94
    72ee:	2b00      	cmp	r3, #0
    72f0:	f2c0 83b4 	blt.w	7a5c <_dtoa_r+0x984>
    72f4:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
    72f8:	4650      	mov	r0, sl
    72fa:	462a      	mov	r2, r5
    72fc:	4633      	mov	r3, r6
    72fe:	4659      	mov	r1, fp
    7300:	f7fd fe8c 	bl	501c <__aeabi_ddiv>
    7304:	f003 f92e 	bl	a564 <__aeabi_d2iz>
    7308:	4680      	mov	r8, r0
    730a:	f7fd fcf7 	bl	4cfc <__aeabi_i2d>
    730e:	462a      	mov	r2, r5
    7310:	4633      	mov	r3, r6
    7312:	f7fd fd59 	bl	4dc8 <__aeabi_dmul>
    7316:	4602      	mov	r2, r0
    7318:	460b      	mov	r3, r1
    731a:	4650      	mov	r0, sl
    731c:	4659      	mov	r1, fp
    731e:	f7fd fb9f 	bl	4a60 <__aeabi_dsub>
    7322:	9e07      	ldr	r6, [sp, #28]
    7324:	9f04      	ldr	r7, [sp, #16]
    7326:	f108 0530 	add.w	r5, r8, #48	; 0x30
    732a:	2e01      	cmp	r6, #1
    732c:	703d      	strb	r5, [r7, #0]
    732e:	4602      	mov	r2, r0
    7330:	460b      	mov	r3, r1
    7332:	f107 0501 	add.w	r5, r7, #1
    7336:	d064      	beq.n	7402 <_dtoa_r+0x32a>
    7338:	2200      	movs	r2, #0
    733a:	4b18      	ldr	r3, [pc, #96]	; (739c <_dtoa_r+0x2c4>)
    733c:	f7fd fd44 	bl	4dc8 <__aeabi_dmul>
    7340:	2200      	movs	r2, #0
    7342:	2300      	movs	r3, #0
    7344:	4606      	mov	r6, r0
    7346:	460f      	mov	r7, r1
    7348:	f7fd ffa6 	bl	5298 <__aeabi_dcmpeq>
    734c:	2800      	cmp	r0, #0
    734e:	f040 8082 	bne.w	7456 <_dtoa_r+0x37e>
    7352:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    7356:	f04f 0a00 	mov.w	sl, #0
    735a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
    735e:	f04f 0b00 	mov.w	fp, #0
    7362:	940b      	str	r4, [sp, #44]	; 0x2c
    7364:	e029      	b.n	73ba <_dtoa_r+0x2e2>
    7366:	bf00      	nop
    7368:	636f4361 	.word	0x636f4361
    736c:	3fd287a7 	.word	0x3fd287a7
    7370:	8b60c8b3 	.word	0x8b60c8b3
    7374:	3fc68a28 	.word	0x3fc68a28
    7378:	509f79fb 	.word	0x509f79fb
    737c:	3fd34413 	.word	0x3fd34413
    7380:	7ff00000 	.word	0x7ff00000
    7384:	0000a71d 	.word	0x0000a71d
    7388:	0000a740 	.word	0x0000a740
    738c:	0000a74c 	.word	0x0000a74c
    7390:	3ff80000 	.word	0x3ff80000
    7394:	0000a778 	.word	0x0000a778
    7398:	0000a71c 	.word	0x0000a71c
    739c:	40240000 	.word	0x40240000
    73a0:	2200      	movs	r2, #0
    73a2:	4b81      	ldr	r3, [pc, #516]	; (75a8 <_dtoa_r+0x4d0>)
    73a4:	f7fd fd10 	bl	4dc8 <__aeabi_dmul>
    73a8:	4652      	mov	r2, sl
    73aa:	465b      	mov	r3, fp
    73ac:	4606      	mov	r6, r0
    73ae:	460f      	mov	r7, r1
    73b0:	f7fd ff72 	bl	5298 <__aeabi_dcmpeq>
    73b4:	2800      	cmp	r0, #0
    73b6:	f040 83ba 	bne.w	7b2e <_dtoa_r+0xa56>
    73ba:	4642      	mov	r2, r8
    73bc:	464b      	mov	r3, r9
    73be:	4630      	mov	r0, r6
    73c0:	4639      	mov	r1, r7
    73c2:	f7fd fe2b 	bl	501c <__aeabi_ddiv>
    73c6:	f003 f8cd 	bl	a564 <__aeabi_d2iz>
    73ca:	4604      	mov	r4, r0
    73cc:	f7fd fc96 	bl	4cfc <__aeabi_i2d>
    73d0:	4642      	mov	r2, r8
    73d2:	464b      	mov	r3, r9
    73d4:	f7fd fcf8 	bl	4dc8 <__aeabi_dmul>
    73d8:	4602      	mov	r2, r0
    73da:	460b      	mov	r3, r1
    73dc:	4630      	mov	r0, r6
    73de:	4639      	mov	r1, r7
    73e0:	f7fd fb3e 	bl	4a60 <__aeabi_dsub>
    73e4:	f104 0630 	add.w	r6, r4, #48	; 0x30
    73e8:	f805 6b01 	strb.w	r6, [r5], #1
    73ec:	9e04      	ldr	r6, [sp, #16]
    73ee:	9f07      	ldr	r7, [sp, #28]
    73f0:	1bae      	subs	r6, r5, r6
    73f2:	42be      	cmp	r6, r7
    73f4:	4602      	mov	r2, r0
    73f6:	460b      	mov	r3, r1
    73f8:	d1d2      	bne.n	73a0 <_dtoa_r+0x2c8>
    73fa:	46a0      	mov	r8, r4
    73fc:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    7400:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    7402:	4610      	mov	r0, r2
    7404:	4619      	mov	r1, r3
    7406:	f7fd fb2d 	bl	4a64 <__adddf3>
    740a:	4606      	mov	r6, r0
    740c:	460f      	mov	r7, r1
    740e:	4602      	mov	r2, r0
    7410:	460b      	mov	r3, r1
    7412:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    7416:	f7fd ff49 	bl	52ac <__aeabi_dcmplt>
    741a:	b948      	cbnz	r0, 7430 <_dtoa_r+0x358>
    741c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    7420:	4632      	mov	r2, r6
    7422:	463b      	mov	r3, r7
    7424:	f7fd ff38 	bl	5298 <__aeabi_dcmpeq>
    7428:	b1a8      	cbz	r0, 7456 <_dtoa_r+0x37e>
    742a:	f018 0f01 	tst.w	r8, #1
    742e:	d012      	beq.n	7456 <_dtoa_r+0x37e>
    7430:	f815 8c01 	ldrb.w	r8, [r5, #-1]
    7434:	1e6b      	subs	r3, r5, #1
    7436:	9a04      	ldr	r2, [sp, #16]
    7438:	e004      	b.n	7444 <_dtoa_r+0x36c>
    743a:	429a      	cmp	r2, r3
    743c:	f000 8402 	beq.w	7c44 <_dtoa_r+0xb6c>
    7440:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
    7444:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
    7448:	f103 0501 	add.w	r5, r3, #1
    744c:	d0f5      	beq.n	743a <_dtoa_r+0x362>
    744e:	f108 0801 	add.w	r8, r8, #1
    7452:	f883 8000 	strb.w	r8, [r3]
    7456:	4649      	mov	r1, r9
    7458:	4620      	mov	r0, r4
    745a:	f001 f8c5 	bl	85e8 <_Bfree>
    745e:	2200      	movs	r2, #0
    7460:	9b02      	ldr	r3, [sp, #8]
    7462:	702a      	strb	r2, [r5, #0]
    7464:	9a26      	ldr	r2, [sp, #152]	; 0x98
    7466:	3301      	adds	r3, #1
    7468:	6013      	str	r3, [r2, #0]
    746a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    746c:	2b00      	cmp	r3, #0
    746e:	f000 839f 	beq.w	7bb0 <_dtoa_r+0xad8>
    7472:	9804      	ldr	r0, [sp, #16]
    7474:	601d      	str	r5, [r3, #0]
    7476:	b01b      	add	sp, #108	; 0x6c
    7478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    747c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    747e:	2a00      	cmp	r2, #0
    7480:	d03e      	beq.n	7500 <_dtoa_r+0x428>
    7482:	9a24      	ldr	r2, [sp, #144]	; 0x90
    7484:	2a01      	cmp	r2, #1
    7486:	f340 8311 	ble.w	7aac <_dtoa_r+0x9d4>
    748a:	9b07      	ldr	r3, [sp, #28]
    748c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    748e:	1e5f      	subs	r7, r3, #1
    7490:	42ba      	cmp	r2, r7
    7492:	f2c0 8390 	blt.w	7bb6 <_dtoa_r+0xade>
    7496:	1bd7      	subs	r7, r2, r7
    7498:	9b07      	ldr	r3, [sp, #28]
    749a:	2b00      	cmp	r3, #0
    749c:	f2c0 848c 	blt.w	7db8 <_dtoa_r+0xce0>
    74a0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    74a2:	9b07      	ldr	r3, [sp, #28]
    74a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    74a6:	2101      	movs	r1, #1
    74a8:	441a      	add	r2, r3
    74aa:	920a      	str	r2, [sp, #40]	; 0x28
    74ac:	9a08      	ldr	r2, [sp, #32]
    74ae:	4620      	mov	r0, r4
    74b0:	441a      	add	r2, r3
    74b2:	9208      	str	r2, [sp, #32]
    74b4:	f001 f982 	bl	87bc <__i2b>
    74b8:	4606      	mov	r6, r0
    74ba:	e023      	b.n	7504 <_dtoa_r+0x42c>
    74bc:	2301      	movs	r3, #1
    74be:	930e      	str	r3, [sp, #56]	; 0x38
    74c0:	e6b5      	b.n	722e <_dtoa_r+0x156>
    74c2:	2300      	movs	r3, #0
    74c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    74c6:	930d      	str	r3, [sp, #52]	; 0x34
    74c8:	9b02      	ldr	r3, [sp, #8]
    74ca:	1ad2      	subs	r2, r2, r3
    74cc:	425b      	negs	r3, r3
    74ce:	920a      	str	r2, [sp, #40]	; 0x28
    74d0:	930c      	str	r3, [sp, #48]	; 0x30
    74d2:	e6be      	b.n	7252 <_dtoa_r+0x17a>
    74d4:	f1c7 0301 	rsb	r3, r7, #1
    74d8:	930a      	str	r3, [sp, #40]	; 0x28
    74da:	2300      	movs	r3, #0
    74dc:	9308      	str	r3, [sp, #32]
    74de:	e6ad      	b.n	723c <_dtoa_r+0x164>
    74e0:	9d02      	ldr	r5, [sp, #8]
    74e2:	4628      	mov	r0, r5
    74e4:	f7fd fc0a 	bl	4cfc <__aeabi_i2d>
    74e8:	4602      	mov	r2, r0
    74ea:	460b      	mov	r3, r1
    74ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    74f0:	f7fd fed2 	bl	5298 <__aeabi_dcmpeq>
    74f4:	2800      	cmp	r0, #0
    74f6:	f47f ae86 	bne.w	7206 <_dtoa_r+0x12e>
    74fa:	1e6b      	subs	r3, r5, #1
    74fc:	9302      	str	r3, [sp, #8]
    74fe:	e682      	b.n	7206 <_dtoa_r+0x12e>
    7500:	ad0a      	add	r5, sp, #40	; 0x28
    7502:	cde0      	ldmia	r5, {r5, r6, r7}
    7504:	2d00      	cmp	r5, #0
    7506:	dd0c      	ble.n	7522 <_dtoa_r+0x44a>
    7508:	9908      	ldr	r1, [sp, #32]
    750a:	2900      	cmp	r1, #0
    750c:	460b      	mov	r3, r1
    750e:	dd08      	ble.n	7522 <_dtoa_r+0x44a>
    7510:	42a9      	cmp	r1, r5
    7512:	bfa8      	it	ge
    7514:	462b      	movge	r3, r5
    7516:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    7518:	1aed      	subs	r5, r5, r3
    751a:	1ad2      	subs	r2, r2, r3
    751c:	1acb      	subs	r3, r1, r3
    751e:	920a      	str	r2, [sp, #40]	; 0x28
    7520:	9308      	str	r3, [sp, #32]
    7522:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7524:	b1d3      	cbz	r3, 755c <_dtoa_r+0x484>
    7526:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7528:	2b00      	cmp	r3, #0
    752a:	f000 82b8 	beq.w	7a9e <_dtoa_r+0x9c6>
    752e:	2f00      	cmp	r7, #0
    7530:	dd10      	ble.n	7554 <_dtoa_r+0x47c>
    7532:	4631      	mov	r1, r6
    7534:	463a      	mov	r2, r7
    7536:	4620      	mov	r0, r4
    7538:	f001 f9dc 	bl	88f4 <__pow5mult>
    753c:	464a      	mov	r2, r9
    753e:	4601      	mov	r1, r0
    7540:	4606      	mov	r6, r0
    7542:	4620      	mov	r0, r4
    7544:	f001 f944 	bl	87d0 <__multiply>
    7548:	4603      	mov	r3, r0
    754a:	4649      	mov	r1, r9
    754c:	4620      	mov	r0, r4
    754e:	4699      	mov	r9, r3
    7550:	f001 f84a 	bl	85e8 <_Bfree>
    7554:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7556:	1bda      	subs	r2, r3, r7
    7558:	f040 82a2 	bne.w	7aa0 <_dtoa_r+0x9c8>
    755c:	2101      	movs	r1, #1
    755e:	4620      	mov	r0, r4
    7560:	f001 f92c 	bl	87bc <__i2b>
    7564:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7566:	4680      	mov	r8, r0
    7568:	2b00      	cmp	r3, #0
    756a:	dd1f      	ble.n	75ac <_dtoa_r+0x4d4>
    756c:	4601      	mov	r1, r0
    756e:	461a      	mov	r2, r3
    7570:	4620      	mov	r0, r4
    7572:	f001 f9bf 	bl	88f4 <__pow5mult>
    7576:	9b24      	ldr	r3, [sp, #144]	; 0x90
    7578:	4680      	mov	r8, r0
    757a:	2b01      	cmp	r3, #1
    757c:	f340 8255 	ble.w	7a2a <_dtoa_r+0x952>
    7580:	2300      	movs	r3, #0
    7582:	930c      	str	r3, [sp, #48]	; 0x30
    7584:	f8d8 3010 	ldr.w	r3, [r8, #16]
    7588:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    758c:	6918      	ldr	r0, [r3, #16]
    758e:	f001 f8c5 	bl	871c <__hi0bits>
    7592:	f1c0 0020 	rsb	r0, r0, #32
    7596:	e013      	b.n	75c0 <_dtoa_r+0x4e8>
    7598:	f1c3 0520 	rsb	r5, r3, #32
    759c:	fa0a f005 	lsl.w	r0, sl, r5
    75a0:	e67b      	b.n	729a <_dtoa_r+0x1c2>
    75a2:	900e      	str	r0, [sp, #56]	; 0x38
    75a4:	e643      	b.n	722e <_dtoa_r+0x156>
    75a6:	bf00      	nop
    75a8:	40240000 	.word	0x40240000
    75ac:	9b24      	ldr	r3, [sp, #144]	; 0x90
    75ae:	2b01      	cmp	r3, #1
    75b0:	f340 8285 	ble.w	7abe <_dtoa_r+0x9e6>
    75b4:	2300      	movs	r3, #0
    75b6:	930c      	str	r3, [sp, #48]	; 0x30
    75b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    75ba:	2001      	movs	r0, #1
    75bc:	2b00      	cmp	r3, #0
    75be:	d1e1      	bne.n	7584 <_dtoa_r+0x4ac>
    75c0:	9a08      	ldr	r2, [sp, #32]
    75c2:	4410      	add	r0, r2
    75c4:	f010 001f 	ands.w	r0, r0, #31
    75c8:	f000 80a1 	beq.w	770e <_dtoa_r+0x636>
    75cc:	f1c0 0320 	rsb	r3, r0, #32
    75d0:	2b04      	cmp	r3, #4
    75d2:	f340 8486 	ble.w	7ee2 <_dtoa_r+0xe0a>
    75d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    75d8:	f1c0 001c 	rsb	r0, r0, #28
    75dc:	4403      	add	r3, r0
    75de:	930a      	str	r3, [sp, #40]	; 0x28
    75e0:	4613      	mov	r3, r2
    75e2:	4403      	add	r3, r0
    75e4:	4405      	add	r5, r0
    75e6:	9308      	str	r3, [sp, #32]
    75e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    75ea:	2b00      	cmp	r3, #0
    75ec:	dd05      	ble.n	75fa <_dtoa_r+0x522>
    75ee:	4649      	mov	r1, r9
    75f0:	461a      	mov	r2, r3
    75f2:	4620      	mov	r0, r4
    75f4:	f001 f9ce 	bl	8994 <__lshift>
    75f8:	4681      	mov	r9, r0
    75fa:	9b08      	ldr	r3, [sp, #32]
    75fc:	2b00      	cmp	r3, #0
    75fe:	dd05      	ble.n	760c <_dtoa_r+0x534>
    7600:	4641      	mov	r1, r8
    7602:	461a      	mov	r2, r3
    7604:	4620      	mov	r0, r4
    7606:	f001 f9c5 	bl	8994 <__lshift>
    760a:	4680      	mov	r8, r0
    760c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    760e:	2b00      	cmp	r3, #0
    7610:	f040 8086 	bne.w	7720 <_dtoa_r+0x648>
    7614:	9b07      	ldr	r3, [sp, #28]
    7616:	2b00      	cmp	r3, #0
    7618:	f340 8264 	ble.w	7ae4 <_dtoa_r+0xa0c>
    761c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    761e:	2b00      	cmp	r3, #0
    7620:	f000 8098 	beq.w	7754 <_dtoa_r+0x67c>
    7624:	2d00      	cmp	r5, #0
    7626:	dd05      	ble.n	7634 <_dtoa_r+0x55c>
    7628:	4631      	mov	r1, r6
    762a:	462a      	mov	r2, r5
    762c:	4620      	mov	r0, r4
    762e:	f001 f9b1 	bl	8994 <__lshift>
    7632:	4606      	mov	r6, r0
    7634:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7636:	2b00      	cmp	r3, #0
    7638:	f040 8336 	bne.w	7ca8 <_dtoa_r+0xbd0>
    763c:	9608      	str	r6, [sp, #32]
    763e:	9b07      	ldr	r3, [sp, #28]
    7640:	9a04      	ldr	r2, [sp, #16]
    7642:	3b01      	subs	r3, #1
    7644:	18d3      	adds	r3, r2, r3
    7646:	930b      	str	r3, [sp, #44]	; 0x2c
    7648:	4617      	mov	r7, r2
    764a:	f00a 0301 	and.w	r3, sl, #1
    764e:	46c2      	mov	sl, r8
    7650:	f8dd b020 	ldr.w	fp, [sp, #32]
    7654:	930c      	str	r3, [sp, #48]	; 0x30
    7656:	4651      	mov	r1, sl
    7658:	4648      	mov	r0, r9
    765a:	f7ff fca7 	bl	6fac <quorem>
    765e:	4631      	mov	r1, r6
    7660:	4605      	mov	r5, r0
    7662:	4648      	mov	r0, r9
    7664:	f001 f9e6 	bl	8a34 <__mcmp>
    7668:	465a      	mov	r2, fp
    766a:	9007      	str	r0, [sp, #28]
    766c:	4651      	mov	r1, sl
    766e:	4620      	mov	r0, r4
    7670:	f001 f9fc 	bl	8a6c <__mdiff>
    7674:	68c2      	ldr	r2, [r0, #12]
    7676:	4680      	mov	r8, r0
    7678:	f105 0330 	add.w	r3, r5, #48	; 0x30
    767c:	2a00      	cmp	r2, #0
    767e:	f040 8229 	bne.w	7ad4 <_dtoa_r+0x9fc>
    7682:	4601      	mov	r1, r0
    7684:	4648      	mov	r0, r9
    7686:	930a      	str	r3, [sp, #40]	; 0x28
    7688:	f001 f9d4 	bl	8a34 <__mcmp>
    768c:	4641      	mov	r1, r8
    768e:	9008      	str	r0, [sp, #32]
    7690:	4620      	mov	r0, r4
    7692:	f000 ffa9 	bl	85e8 <_Bfree>
    7696:	9a08      	ldr	r2, [sp, #32]
    7698:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    769a:	b932      	cbnz	r2, 76aa <_dtoa_r+0x5d2>
    769c:	9924      	ldr	r1, [sp, #144]	; 0x90
    769e:	b921      	cbnz	r1, 76aa <_dtoa_r+0x5d2>
    76a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    76a2:	2a00      	cmp	r2, #0
    76a4:	f000 83ee 	beq.w	7e84 <_dtoa_r+0xdac>
    76a8:	9a24      	ldr	r2, [sp, #144]	; 0x90
    76aa:	9907      	ldr	r1, [sp, #28]
    76ac:	2900      	cmp	r1, #0
    76ae:	f2c0 829f 	blt.w	7bf0 <_dtoa_r+0xb18>
    76b2:	d105      	bne.n	76c0 <_dtoa_r+0x5e8>
    76b4:	9924      	ldr	r1, [sp, #144]	; 0x90
    76b6:	b919      	cbnz	r1, 76c0 <_dtoa_r+0x5e8>
    76b8:	990c      	ldr	r1, [sp, #48]	; 0x30
    76ba:	2900      	cmp	r1, #0
    76bc:	f000 8298 	beq.w	7bf0 <_dtoa_r+0xb18>
    76c0:	2a00      	cmp	r2, #0
    76c2:	f300 8305 	bgt.w	7cd0 <_dtoa_r+0xbf8>
    76c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    76c8:	f107 0801 	add.w	r8, r7, #1
    76cc:	4297      	cmp	r7, r2
    76ce:	703b      	strb	r3, [r7, #0]
    76d0:	4645      	mov	r5, r8
    76d2:	f000 830b 	beq.w	7cec <_dtoa_r+0xc14>
    76d6:	4649      	mov	r1, r9
    76d8:	2300      	movs	r3, #0
    76da:	220a      	movs	r2, #10
    76dc:	4620      	mov	r0, r4
    76de:	f000 ff8d 	bl	85fc <__multadd>
    76e2:	455e      	cmp	r6, fp
    76e4:	4681      	mov	r9, r0
    76e6:	4631      	mov	r1, r6
    76e8:	f04f 0300 	mov.w	r3, #0
    76ec:	f04f 020a 	mov.w	r2, #10
    76f0:	4620      	mov	r0, r4
    76f2:	f000 81e9 	beq.w	7ac8 <_dtoa_r+0x9f0>
    76f6:	f000 ff81 	bl	85fc <__multadd>
    76fa:	4659      	mov	r1, fp
    76fc:	4606      	mov	r6, r0
    76fe:	2300      	movs	r3, #0
    7700:	220a      	movs	r2, #10
    7702:	4620      	mov	r0, r4
    7704:	f000 ff7a 	bl	85fc <__multadd>
    7708:	4647      	mov	r7, r8
    770a:	4683      	mov	fp, r0
    770c:	e7a3      	b.n	7656 <_dtoa_r+0x57e>
    770e:	201c      	movs	r0, #28
    7710:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7712:	4405      	add	r5, r0
    7714:	4403      	add	r3, r0
    7716:	930a      	str	r3, [sp, #40]	; 0x28
    7718:	9b08      	ldr	r3, [sp, #32]
    771a:	4403      	add	r3, r0
    771c:	9308      	str	r3, [sp, #32]
    771e:	e763      	b.n	75e8 <_dtoa_r+0x510>
    7720:	4641      	mov	r1, r8
    7722:	4648      	mov	r0, r9
    7724:	f001 f986 	bl	8a34 <__mcmp>
    7728:	2800      	cmp	r0, #0
    772a:	f6bf af73 	bge.w	7614 <_dtoa_r+0x53c>
    772e:	9f02      	ldr	r7, [sp, #8]
    7730:	4649      	mov	r1, r9
    7732:	2300      	movs	r3, #0
    7734:	220a      	movs	r2, #10
    7736:	4620      	mov	r0, r4
    7738:	3f01      	subs	r7, #1
    773a:	9702      	str	r7, [sp, #8]
    773c:	f000 ff5e 	bl	85fc <__multadd>
    7740:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7742:	4681      	mov	r9, r0
    7744:	2b00      	cmp	r3, #0
    7746:	f040 83b5 	bne.w	7eb4 <_dtoa_r+0xddc>
    774a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    774c:	2b00      	cmp	r3, #0
    774e:	f340 83be 	ble.w	7ece <_dtoa_r+0xdf6>
    7752:	9307      	str	r3, [sp, #28]
    7754:	f8dd a010 	ldr.w	sl, [sp, #16]
    7758:	9f07      	ldr	r7, [sp, #28]
    775a:	4655      	mov	r5, sl
    775c:	e006      	b.n	776c <_dtoa_r+0x694>
    775e:	4649      	mov	r1, r9
    7760:	2300      	movs	r3, #0
    7762:	220a      	movs	r2, #10
    7764:	4620      	mov	r0, r4
    7766:	f000 ff49 	bl	85fc <__multadd>
    776a:	4681      	mov	r9, r0
    776c:	4641      	mov	r1, r8
    776e:	4648      	mov	r0, r9
    7770:	f7ff fc1c 	bl	6fac <quorem>
    7774:	3030      	adds	r0, #48	; 0x30
    7776:	f805 0b01 	strb.w	r0, [r5], #1
    777a:	eba5 030a 	sub.w	r3, r5, sl
    777e:	42bb      	cmp	r3, r7
    7780:	dbed      	blt.n	775e <_dtoa_r+0x686>
    7782:	9b04      	ldr	r3, [sp, #16]
    7784:	9a07      	ldr	r2, [sp, #28]
    7786:	4682      	mov	sl, r0
    7788:	2a01      	cmp	r2, #1
    778a:	bfac      	ite	ge
    778c:	189b      	addge	r3, r3, r2
    778e:	3301      	addlt	r3, #1
    7790:	f04f 0b00 	mov.w	fp, #0
    7794:	461d      	mov	r5, r3
    7796:	4649      	mov	r1, r9
    7798:	2201      	movs	r2, #1
    779a:	4620      	mov	r0, r4
    779c:	f001 f8fa 	bl	8994 <__lshift>
    77a0:	4641      	mov	r1, r8
    77a2:	4681      	mov	r9, r0
    77a4:	f001 f946 	bl	8a34 <__mcmp>
    77a8:	2800      	cmp	r0, #0
    77aa:	f340 823f 	ble.w	7c2c <_dtoa_r+0xb54>
    77ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
    77b2:	1e6b      	subs	r3, r5, #1
    77b4:	9904      	ldr	r1, [sp, #16]
    77b6:	e004      	b.n	77c2 <_dtoa_r+0x6ea>
    77b8:	428b      	cmp	r3, r1
    77ba:	f000 81ae 	beq.w	7b1a <_dtoa_r+0xa42>
    77be:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    77c2:	2a39      	cmp	r2, #57	; 0x39
    77c4:	f103 0501 	add.w	r5, r3, #1
    77c8:	d0f6      	beq.n	77b8 <_dtoa_r+0x6e0>
    77ca:	3201      	adds	r2, #1
    77cc:	701a      	strb	r2, [r3, #0]
    77ce:	4641      	mov	r1, r8
    77d0:	4620      	mov	r0, r4
    77d2:	f000 ff09 	bl	85e8 <_Bfree>
    77d6:	2e00      	cmp	r6, #0
    77d8:	f43f ae3d 	beq.w	7456 <_dtoa_r+0x37e>
    77dc:	f1bb 0f00 	cmp.w	fp, #0
    77e0:	d005      	beq.n	77ee <_dtoa_r+0x716>
    77e2:	45b3      	cmp	fp, r6
    77e4:	d003      	beq.n	77ee <_dtoa_r+0x716>
    77e6:	4659      	mov	r1, fp
    77e8:	4620      	mov	r0, r4
    77ea:	f000 fefd 	bl	85e8 <_Bfree>
    77ee:	4631      	mov	r1, r6
    77f0:	4620      	mov	r0, r4
    77f2:	f000 fef9 	bl	85e8 <_Bfree>
    77f6:	e62e      	b.n	7456 <_dtoa_r+0x37e>
    77f8:	2300      	movs	r3, #0
    77fa:	930b      	str	r3, [sp, #44]	; 0x2c
    77fc:	9b02      	ldr	r3, [sp, #8]
    77fe:	9a25      	ldr	r2, [sp, #148]	; 0x94
    7800:	4413      	add	r3, r2
    7802:	930f      	str	r3, [sp, #60]	; 0x3c
    7804:	3301      	adds	r3, #1
    7806:	2b01      	cmp	r3, #1
    7808:	461f      	mov	r7, r3
    780a:	461e      	mov	r6, r3
    780c:	bfb8      	it	lt
    780e:	2701      	movlt	r7, #1
    7810:	9307      	str	r3, [sp, #28]
    7812:	2100      	movs	r1, #0
    7814:	2f17      	cmp	r7, #23
    7816:	6461      	str	r1, [r4, #68]	; 0x44
    7818:	d90a      	bls.n	7830 <_dtoa_r+0x758>
    781a:	2201      	movs	r2, #1
    781c:	2304      	movs	r3, #4
    781e:	005b      	lsls	r3, r3, #1
    7820:	f103 0014 	add.w	r0, r3, #20
    7824:	4287      	cmp	r7, r0
    7826:	4611      	mov	r1, r2
    7828:	f102 0201 	add.w	r2, r2, #1
    782c:	d2f7      	bcs.n	781e <_dtoa_r+0x746>
    782e:	6461      	str	r1, [r4, #68]	; 0x44
    7830:	4620      	mov	r0, r4
    7832:	f000 feb3 	bl	859c <_Balloc>
    7836:	2e0e      	cmp	r6, #14
    7838:	9004      	str	r0, [sp, #16]
    783a:	6420      	str	r0, [r4, #64]	; 0x40
    783c:	f63f ad47 	bhi.w	72ce <_dtoa_r+0x1f6>
    7840:	2d00      	cmp	r5, #0
    7842:	f43f ad44 	beq.w	72ce <_dtoa_r+0x1f6>
    7846:	9902      	ldr	r1, [sp, #8]
    7848:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
    784c:	2900      	cmp	r1, #0
    784e:	f340 8203 	ble.w	7c58 <_dtoa_r+0xb80>
    7852:	4bb9      	ldr	r3, [pc, #740]	; (7b38 <_dtoa_r+0xa60>)
    7854:	f001 020f 	and.w	r2, r1, #15
    7858:	110d      	asrs	r5, r1, #4
    785a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    785e:	06e9      	lsls	r1, r5, #27
    7860:	e9d3 6700 	ldrd	r6, r7, [r3]
    7864:	f140 81af 	bpl.w	7bc6 <_dtoa_r+0xaee>
    7868:	4bb4      	ldr	r3, [pc, #720]	; (7b3c <_dtoa_r+0xa64>)
    786a:	4650      	mov	r0, sl
    786c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    7870:	4659      	mov	r1, fp
    7872:	f7fd fbd3 	bl	501c <__aeabi_ddiv>
    7876:	f04f 0a03 	mov.w	sl, #3
    787a:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    787e:	f005 050f 	and.w	r5, r5, #15
    7882:	b18d      	cbz	r5, 78a8 <_dtoa_r+0x7d0>
    7884:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 7b3c <_dtoa_r+0xa64>
    7888:	07ea      	lsls	r2, r5, #31
    788a:	d509      	bpl.n	78a0 <_dtoa_r+0x7c8>
    788c:	e9d8 2300 	ldrd	r2, r3, [r8]
    7890:	4630      	mov	r0, r6
    7892:	4639      	mov	r1, r7
    7894:	f7fd fa98 	bl	4dc8 <__aeabi_dmul>
    7898:	4606      	mov	r6, r0
    789a:	460f      	mov	r7, r1
    789c:	f10a 0a01 	add.w	sl, sl, #1
    78a0:	106d      	asrs	r5, r5, #1
    78a2:	f108 0808 	add.w	r8, r8, #8
    78a6:	d1ef      	bne.n	7888 <_dtoa_r+0x7b0>
    78a8:	463b      	mov	r3, r7
    78aa:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    78ae:	4632      	mov	r2, r6
    78b0:	f7fd fbb4 	bl	501c <__aeabi_ddiv>
    78b4:	4607      	mov	r7, r0
    78b6:	4688      	mov	r8, r1
    78b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    78ba:	b143      	cbz	r3, 78ce <_dtoa_r+0x7f6>
    78bc:	2200      	movs	r2, #0
    78be:	4ba0      	ldr	r3, [pc, #640]	; (7b40 <_dtoa_r+0xa68>)
    78c0:	4638      	mov	r0, r7
    78c2:	4641      	mov	r1, r8
    78c4:	f7fd fcf2 	bl	52ac <__aeabi_dcmplt>
    78c8:	2800      	cmp	r0, #0
    78ca:	f040 8287 	bne.w	7ddc <_dtoa_r+0xd04>
    78ce:	4650      	mov	r0, sl
    78d0:	f7fd fa14 	bl	4cfc <__aeabi_i2d>
    78d4:	463a      	mov	r2, r7
    78d6:	4643      	mov	r3, r8
    78d8:	f7fd fa76 	bl	4dc8 <__aeabi_dmul>
    78dc:	4b99      	ldr	r3, [pc, #612]	; (7b44 <_dtoa_r+0xa6c>)
    78de:	2200      	movs	r2, #0
    78e0:	f7fd f8c0 	bl	4a64 <__adddf3>
    78e4:	9b07      	ldr	r3, [sp, #28]
    78e6:	4605      	mov	r5, r0
    78e8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
    78ec:	2b00      	cmp	r3, #0
    78ee:	f000 813f 	beq.w	7b70 <_dtoa_r+0xa98>
    78f2:	9b02      	ldr	r3, [sp, #8]
    78f4:	9315      	str	r3, [sp, #84]	; 0x54
    78f6:	9b07      	ldr	r3, [sp, #28]
    78f8:	9312      	str	r3, [sp, #72]	; 0x48
    78fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    78fc:	2b00      	cmp	r3, #0
    78fe:	f000 81fb 	beq.w	7cf8 <_dtoa_r+0xc20>
    7902:	9a12      	ldr	r2, [sp, #72]	; 0x48
    7904:	4b8c      	ldr	r3, [pc, #560]	; (7b38 <_dtoa_r+0xa60>)
    7906:	2000      	movs	r0, #0
    7908:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    790c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
    7910:	498d      	ldr	r1, [pc, #564]	; (7b48 <_dtoa_r+0xa70>)
    7912:	f7fd fb83 	bl	501c <__aeabi_ddiv>
    7916:	462a      	mov	r2, r5
    7918:	4633      	mov	r3, r6
    791a:	f7fd f8a1 	bl	4a60 <__aeabi_dsub>
    791e:	4682      	mov	sl, r0
    7920:	468b      	mov	fp, r1
    7922:	4638      	mov	r0, r7
    7924:	4641      	mov	r1, r8
    7926:	f002 fe1d 	bl	a564 <__aeabi_d2iz>
    792a:	4605      	mov	r5, r0
    792c:	f7fd f9e6 	bl	4cfc <__aeabi_i2d>
    7930:	4602      	mov	r2, r0
    7932:	460b      	mov	r3, r1
    7934:	4638      	mov	r0, r7
    7936:	4641      	mov	r1, r8
    7938:	f7fd f892 	bl	4a60 <__aeabi_dsub>
    793c:	3530      	adds	r5, #48	; 0x30
    793e:	fa5f f885 	uxtb.w	r8, r5
    7942:	9d04      	ldr	r5, [sp, #16]
    7944:	4606      	mov	r6, r0
    7946:	460f      	mov	r7, r1
    7948:	f885 8000 	strb.w	r8, [r5]
    794c:	4602      	mov	r2, r0
    794e:	460b      	mov	r3, r1
    7950:	4650      	mov	r0, sl
    7952:	4659      	mov	r1, fp
    7954:	3501      	adds	r5, #1
    7956:	f7fd fcc7 	bl	52e8 <__aeabi_dcmpgt>
    795a:	2800      	cmp	r0, #0
    795c:	d154      	bne.n	7a08 <_dtoa_r+0x930>
    795e:	4632      	mov	r2, r6
    7960:	463b      	mov	r3, r7
    7962:	2000      	movs	r0, #0
    7964:	4976      	ldr	r1, [pc, #472]	; (7b40 <_dtoa_r+0xa68>)
    7966:	f7fd f87b 	bl	4a60 <__aeabi_dsub>
    796a:	4602      	mov	r2, r0
    796c:	460b      	mov	r3, r1
    796e:	4650      	mov	r0, sl
    7970:	4659      	mov	r1, fp
    7972:	f7fd fcb9 	bl	52e8 <__aeabi_dcmpgt>
    7976:	2800      	cmp	r0, #0
    7978:	f040 8270 	bne.w	7e5c <_dtoa_r+0xd84>
    797c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    797e:	2a01      	cmp	r2, #1
    7980:	f000 8112 	beq.w	7ba8 <_dtoa_r+0xad0>
    7984:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7986:	9a04      	ldr	r2, [sp, #16]
    7988:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
    798c:	4413      	add	r3, r2
    798e:	4699      	mov	r9, r3
    7990:	e00f      	b.n	79b2 <_dtoa_r+0x8da>
    7992:	4632      	mov	r2, r6
    7994:	463b      	mov	r3, r7
    7996:	2000      	movs	r0, #0
    7998:	4969      	ldr	r1, [pc, #420]	; (7b40 <_dtoa_r+0xa68>)
    799a:	f7fd f861 	bl	4a60 <__aeabi_dsub>
    799e:	4652      	mov	r2, sl
    79a0:	465b      	mov	r3, fp
    79a2:	f7fd fc83 	bl	52ac <__aeabi_dcmplt>
    79a6:	2800      	cmp	r0, #0
    79a8:	f040 8256 	bne.w	7e58 <_dtoa_r+0xd80>
    79ac:	454d      	cmp	r5, r9
    79ae:	f000 80f9 	beq.w	7ba4 <_dtoa_r+0xacc>
    79b2:	4650      	mov	r0, sl
    79b4:	4659      	mov	r1, fp
    79b6:	2200      	movs	r2, #0
    79b8:	4b64      	ldr	r3, [pc, #400]	; (7b4c <_dtoa_r+0xa74>)
    79ba:	f7fd fa05 	bl	4dc8 <__aeabi_dmul>
    79be:	2200      	movs	r2, #0
    79c0:	4b62      	ldr	r3, [pc, #392]	; (7b4c <_dtoa_r+0xa74>)
    79c2:	4682      	mov	sl, r0
    79c4:	468b      	mov	fp, r1
    79c6:	4630      	mov	r0, r6
    79c8:	4639      	mov	r1, r7
    79ca:	f7fd f9fd 	bl	4dc8 <__aeabi_dmul>
    79ce:	460f      	mov	r7, r1
    79d0:	4606      	mov	r6, r0
    79d2:	f002 fdc7 	bl	a564 <__aeabi_d2iz>
    79d6:	4680      	mov	r8, r0
    79d8:	f7fd f990 	bl	4cfc <__aeabi_i2d>
    79dc:	4602      	mov	r2, r0
    79de:	460b      	mov	r3, r1
    79e0:	4630      	mov	r0, r6
    79e2:	4639      	mov	r1, r7
    79e4:	f7fd f83c 	bl	4a60 <__aeabi_dsub>
    79e8:	f108 0830 	add.w	r8, r8, #48	; 0x30
    79ec:	fa5f f888 	uxtb.w	r8, r8
    79f0:	f805 8b01 	strb.w	r8, [r5], #1
    79f4:	4652      	mov	r2, sl
    79f6:	465b      	mov	r3, fp
    79f8:	4606      	mov	r6, r0
    79fa:	460f      	mov	r7, r1
    79fc:	f7fd fc56 	bl	52ac <__aeabi_dcmplt>
    7a00:	2800      	cmp	r0, #0
    7a02:	d0c6      	beq.n	7992 <_dtoa_r+0x8ba>
    7a04:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
    7a08:	9b15      	ldr	r3, [sp, #84]	; 0x54
    7a0a:	9302      	str	r3, [sp, #8]
    7a0c:	e523      	b.n	7456 <_dtoa_r+0x37e>
    7a0e:	2300      	movs	r3, #0
    7a10:	930b      	str	r3, [sp, #44]	; 0x2c
    7a12:	9b25      	ldr	r3, [sp, #148]	; 0x94
    7a14:	2b00      	cmp	r3, #0
    7a16:	f340 80dd 	ble.w	7bd4 <_dtoa_r+0xafc>
    7a1a:	461f      	mov	r7, r3
    7a1c:	461e      	mov	r6, r3
    7a1e:	930f      	str	r3, [sp, #60]	; 0x3c
    7a20:	9307      	str	r3, [sp, #28]
    7a22:	e6f6      	b.n	7812 <_dtoa_r+0x73a>
    7a24:	2301      	movs	r3, #1
    7a26:	930b      	str	r3, [sp, #44]	; 0x2c
    7a28:	e7f3      	b.n	7a12 <_dtoa_r+0x93a>
    7a2a:	f1ba 0f00 	cmp.w	sl, #0
    7a2e:	f47f ada7 	bne.w	7580 <_dtoa_r+0x4a8>
    7a32:	f3cb 0313 	ubfx	r3, fp, #0, #20
    7a36:	2b00      	cmp	r3, #0
    7a38:	f47f adbc 	bne.w	75b4 <_dtoa_r+0x4dc>
    7a3c:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
    7a40:	0d3f      	lsrs	r7, r7, #20
    7a42:	053f      	lsls	r7, r7, #20
    7a44:	2f00      	cmp	r7, #0
    7a46:	f000 820d 	beq.w	7e64 <_dtoa_r+0xd8c>
    7a4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7a4c:	3301      	adds	r3, #1
    7a4e:	930a      	str	r3, [sp, #40]	; 0x28
    7a50:	9b08      	ldr	r3, [sp, #32]
    7a52:	3301      	adds	r3, #1
    7a54:	9308      	str	r3, [sp, #32]
    7a56:	2301      	movs	r3, #1
    7a58:	930c      	str	r3, [sp, #48]	; 0x30
    7a5a:	e5ad      	b.n	75b8 <_dtoa_r+0x4e0>
    7a5c:	9b07      	ldr	r3, [sp, #28]
    7a5e:	2b00      	cmp	r3, #0
    7a60:	f73f ac48 	bgt.w	72f4 <_dtoa_r+0x21c>
    7a64:	f040 8222 	bne.w	7eac <_dtoa_r+0xdd4>
    7a68:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    7a6c:	2200      	movs	r2, #0
    7a6e:	4b38      	ldr	r3, [pc, #224]	; (7b50 <_dtoa_r+0xa78>)
    7a70:	f7fd f9aa 	bl	4dc8 <__aeabi_dmul>
    7a74:	4652      	mov	r2, sl
    7a76:	465b      	mov	r3, fp
    7a78:	f7fd fc2c 	bl	52d4 <__aeabi_dcmpge>
    7a7c:	f8dd 801c 	ldr.w	r8, [sp, #28]
    7a80:	4646      	mov	r6, r8
    7a82:	2800      	cmp	r0, #0
    7a84:	d041      	beq.n	7b0a <_dtoa_r+0xa32>
    7a86:	9b25      	ldr	r3, [sp, #148]	; 0x94
    7a88:	9d04      	ldr	r5, [sp, #16]
    7a8a:	43db      	mvns	r3, r3
    7a8c:	9302      	str	r3, [sp, #8]
    7a8e:	4641      	mov	r1, r8
    7a90:	4620      	mov	r0, r4
    7a92:	f000 fda9 	bl	85e8 <_Bfree>
    7a96:	2e00      	cmp	r6, #0
    7a98:	f43f acdd 	beq.w	7456 <_dtoa_r+0x37e>
    7a9c:	e6a7      	b.n	77ee <_dtoa_r+0x716>
    7a9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    7aa0:	4649      	mov	r1, r9
    7aa2:	4620      	mov	r0, r4
    7aa4:	f000 ff26 	bl	88f4 <__pow5mult>
    7aa8:	4681      	mov	r9, r0
    7aaa:	e557      	b.n	755c <_dtoa_r+0x484>
    7aac:	9a14      	ldr	r2, [sp, #80]	; 0x50
    7aae:	2a00      	cmp	r2, #0
    7ab0:	f000 8188 	beq.w	7dc4 <_dtoa_r+0xcec>
    7ab4:	f203 4333 	addw	r3, r3, #1075	; 0x433
    7ab8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    7aba:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    7abc:	e4f2      	b.n	74a4 <_dtoa_r+0x3cc>
    7abe:	f1ba 0f00 	cmp.w	sl, #0
    7ac2:	f47f ad77 	bne.w	75b4 <_dtoa_r+0x4dc>
    7ac6:	e7b4      	b.n	7a32 <_dtoa_r+0x95a>
    7ac8:	f000 fd98 	bl	85fc <__multadd>
    7acc:	4647      	mov	r7, r8
    7ace:	4606      	mov	r6, r0
    7ad0:	4683      	mov	fp, r0
    7ad2:	e5c0      	b.n	7656 <_dtoa_r+0x57e>
    7ad4:	4601      	mov	r1, r0
    7ad6:	4620      	mov	r0, r4
    7ad8:	9308      	str	r3, [sp, #32]
    7ada:	f000 fd85 	bl	85e8 <_Bfree>
    7ade:	2201      	movs	r2, #1
    7ae0:	9b08      	ldr	r3, [sp, #32]
    7ae2:	e5e2      	b.n	76aa <_dtoa_r+0x5d2>
    7ae4:	9b24      	ldr	r3, [sp, #144]	; 0x90
    7ae6:	2b02      	cmp	r3, #2
    7ae8:	f77f ad98 	ble.w	761c <_dtoa_r+0x544>
    7aec:	9b07      	ldr	r3, [sp, #28]
    7aee:	2b00      	cmp	r3, #0
    7af0:	d1c9      	bne.n	7a86 <_dtoa_r+0x9ae>
    7af2:	4641      	mov	r1, r8
    7af4:	2205      	movs	r2, #5
    7af6:	4620      	mov	r0, r4
    7af8:	f000 fd80 	bl	85fc <__multadd>
    7afc:	4601      	mov	r1, r0
    7afe:	4680      	mov	r8, r0
    7b00:	4648      	mov	r0, r9
    7b02:	f000 ff97 	bl	8a34 <__mcmp>
    7b06:	2800      	cmp	r0, #0
    7b08:	ddbd      	ble.n	7a86 <_dtoa_r+0x9ae>
    7b0a:	2331      	movs	r3, #49	; 0x31
    7b0c:	9a02      	ldr	r2, [sp, #8]
    7b0e:	9904      	ldr	r1, [sp, #16]
    7b10:	3201      	adds	r2, #1
    7b12:	9202      	str	r2, [sp, #8]
    7b14:	700b      	strb	r3, [r1, #0]
    7b16:	1c4d      	adds	r5, r1, #1
    7b18:	e7b9      	b.n	7a8e <_dtoa_r+0x9b6>
    7b1a:	2331      	movs	r3, #49	; 0x31
    7b1c:	9a02      	ldr	r2, [sp, #8]
    7b1e:	3201      	adds	r2, #1
    7b20:	9202      	str	r2, [sp, #8]
    7b22:	9a04      	ldr	r2, [sp, #16]
    7b24:	7013      	strb	r3, [r2, #0]
    7b26:	e652      	b.n	77ce <_dtoa_r+0x6f6>
    7b28:	2301      	movs	r3, #1
    7b2a:	930b      	str	r3, [sp, #44]	; 0x2c
    7b2c:	e666      	b.n	77fc <_dtoa_r+0x724>
    7b2e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    7b32:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    7b34:	e48f      	b.n	7456 <_dtoa_r+0x37e>
    7b36:	bf00      	nop
    7b38:	0000a778 	.word	0x0000a778
    7b3c:	0000a750 	.word	0x0000a750
    7b40:	3ff00000 	.word	0x3ff00000
    7b44:	401c0000 	.word	0x401c0000
    7b48:	3fe00000 	.word	0x3fe00000
    7b4c:	40240000 	.word	0x40240000
    7b50:	40140000 	.word	0x40140000
    7b54:	4650      	mov	r0, sl
    7b56:	f7fd f8d1 	bl	4cfc <__aeabi_i2d>
    7b5a:	463a      	mov	r2, r7
    7b5c:	4643      	mov	r3, r8
    7b5e:	f7fd f933 	bl	4dc8 <__aeabi_dmul>
    7b62:	2200      	movs	r2, #0
    7b64:	4bc1      	ldr	r3, [pc, #772]	; (7e6c <_dtoa_r+0xd94>)
    7b66:	f7fc ff7d 	bl	4a64 <__adddf3>
    7b6a:	4605      	mov	r5, r0
    7b6c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
    7b70:	4641      	mov	r1, r8
    7b72:	2200      	movs	r2, #0
    7b74:	4bbe      	ldr	r3, [pc, #760]	; (7e70 <_dtoa_r+0xd98>)
    7b76:	4638      	mov	r0, r7
    7b78:	f7fc ff72 	bl	4a60 <__aeabi_dsub>
    7b7c:	462a      	mov	r2, r5
    7b7e:	4633      	mov	r3, r6
    7b80:	4682      	mov	sl, r0
    7b82:	468b      	mov	fp, r1
    7b84:	f7fd fbb0 	bl	52e8 <__aeabi_dcmpgt>
    7b88:	4680      	mov	r8, r0
    7b8a:	2800      	cmp	r0, #0
    7b8c:	f040 8110 	bne.w	7db0 <_dtoa_r+0xcd8>
    7b90:	462a      	mov	r2, r5
    7b92:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
    7b96:	4650      	mov	r0, sl
    7b98:	4659      	mov	r1, fp
    7b9a:	f7fd fb87 	bl	52ac <__aeabi_dcmplt>
    7b9e:	b118      	cbz	r0, 7ba8 <_dtoa_r+0xad0>
    7ba0:	4646      	mov	r6, r8
    7ba2:	e770      	b.n	7a86 <_dtoa_r+0x9ae>
    7ba4:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
    7ba8:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
    7bac:	f7ff bb8f 	b.w	72ce <_dtoa_r+0x1f6>
    7bb0:	9804      	ldr	r0, [sp, #16]
    7bb2:	f7ff bac0 	b.w	7136 <_dtoa_r+0x5e>
    7bb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7bb8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    7bba:	1afb      	subs	r3, r7, r3
    7bbc:	441a      	add	r2, r3
    7bbe:	970c      	str	r7, [sp, #48]	; 0x30
    7bc0:	920d      	str	r2, [sp, #52]	; 0x34
    7bc2:	2700      	movs	r7, #0
    7bc4:	e468      	b.n	7498 <_dtoa_r+0x3c0>
    7bc6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    7bca:	f04f 0a02 	mov.w	sl, #2
    7bce:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
    7bd2:	e656      	b.n	7882 <_dtoa_r+0x7aa>
    7bd4:	2100      	movs	r1, #0
    7bd6:	2301      	movs	r3, #1
    7bd8:	4620      	mov	r0, r4
    7bda:	6461      	str	r1, [r4, #68]	; 0x44
    7bdc:	9325      	str	r3, [sp, #148]	; 0x94
    7bde:	f000 fcdd 	bl	859c <_Balloc>
    7be2:	9b25      	ldr	r3, [sp, #148]	; 0x94
    7be4:	9004      	str	r0, [sp, #16]
    7be6:	9307      	str	r3, [sp, #28]
    7be8:	9b25      	ldr	r3, [sp, #148]	; 0x94
    7bea:	6420      	str	r0, [r4, #64]	; 0x40
    7bec:	930f      	str	r3, [sp, #60]	; 0x3c
    7bee:	e627      	b.n	7840 <_dtoa_r+0x768>
    7bf0:	2a00      	cmp	r2, #0
    7bf2:	46d0      	mov	r8, sl
    7bf4:	f8cd b020 	str.w	fp, [sp, #32]
    7bf8:	469a      	mov	sl, r3
    7bfa:	dd11      	ble.n	7c20 <_dtoa_r+0xb48>
    7bfc:	4649      	mov	r1, r9
    7bfe:	2201      	movs	r2, #1
    7c00:	4620      	mov	r0, r4
    7c02:	f000 fec7 	bl	8994 <__lshift>
    7c06:	4641      	mov	r1, r8
    7c08:	4681      	mov	r9, r0
    7c0a:	f000 ff13 	bl	8a34 <__mcmp>
    7c0e:	2800      	cmp	r0, #0
    7c10:	f340 8145 	ble.w	7e9e <_dtoa_r+0xdc6>
    7c14:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
    7c18:	f000 8105 	beq.w	7e26 <_dtoa_r+0xd4e>
    7c1c:	f105 0a31 	add.w	sl, r5, #49	; 0x31
    7c20:	46b3      	mov	fp, r6
    7c22:	f887 a000 	strb.w	sl, [r7]
    7c26:	1c7d      	adds	r5, r7, #1
    7c28:	9e08      	ldr	r6, [sp, #32]
    7c2a:	e5d0      	b.n	77ce <_dtoa_r+0x6f6>
    7c2c:	d104      	bne.n	7c38 <_dtoa_r+0xb60>
    7c2e:	f01a 0f01 	tst.w	sl, #1
    7c32:	d001      	beq.n	7c38 <_dtoa_r+0xb60>
    7c34:	e5bb      	b.n	77ae <_dtoa_r+0x6d6>
    7c36:	4615      	mov	r5, r2
    7c38:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    7c3c:	1e6a      	subs	r2, r5, #1
    7c3e:	2b30      	cmp	r3, #48	; 0x30
    7c40:	d0f9      	beq.n	7c36 <_dtoa_r+0xb5e>
    7c42:	e5c4      	b.n	77ce <_dtoa_r+0x6f6>
    7c44:	2230      	movs	r2, #48	; 0x30
    7c46:	9904      	ldr	r1, [sp, #16]
    7c48:	700a      	strb	r2, [r1, #0]
    7c4a:	9a02      	ldr	r2, [sp, #8]
    7c4c:	f815 8c01 	ldrb.w	r8, [r5, #-1]
    7c50:	3201      	adds	r2, #1
    7c52:	9202      	str	r2, [sp, #8]
    7c54:	f7ff bbfb 	b.w	744e <_dtoa_r+0x376>
    7c58:	f000 80bb 	beq.w	7dd2 <_dtoa_r+0xcfa>
    7c5c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    7c60:	9b02      	ldr	r3, [sp, #8]
    7c62:	f04f 0a02 	mov.w	sl, #2
    7c66:	425d      	negs	r5, r3
    7c68:	4b82      	ldr	r3, [pc, #520]	; (7e74 <_dtoa_r+0xd9c>)
    7c6a:	f005 020f 	and.w	r2, r5, #15
    7c6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    7c72:	e9d3 2300 	ldrd	r2, r3, [r3]
    7c76:	f7fd f8a7 	bl	4dc8 <__aeabi_dmul>
    7c7a:	112d      	asrs	r5, r5, #4
    7c7c:	4607      	mov	r7, r0
    7c7e:	4688      	mov	r8, r1
    7c80:	f43f ae1a 	beq.w	78b8 <_dtoa_r+0x7e0>
    7c84:	4e7c      	ldr	r6, [pc, #496]	; (7e78 <_dtoa_r+0xda0>)
    7c86:	07eb      	lsls	r3, r5, #31
    7c88:	d509      	bpl.n	7c9e <_dtoa_r+0xbc6>
    7c8a:	e9d6 2300 	ldrd	r2, r3, [r6]
    7c8e:	4638      	mov	r0, r7
    7c90:	4641      	mov	r1, r8
    7c92:	f7fd f899 	bl	4dc8 <__aeabi_dmul>
    7c96:	4607      	mov	r7, r0
    7c98:	4688      	mov	r8, r1
    7c9a:	f10a 0a01 	add.w	sl, sl, #1
    7c9e:	106d      	asrs	r5, r5, #1
    7ca0:	f106 0608 	add.w	r6, r6, #8
    7ca4:	d1ef      	bne.n	7c86 <_dtoa_r+0xbae>
    7ca6:	e607      	b.n	78b8 <_dtoa_r+0x7e0>
    7ca8:	6871      	ldr	r1, [r6, #4]
    7caa:	4620      	mov	r0, r4
    7cac:	f000 fc76 	bl	859c <_Balloc>
    7cb0:	4605      	mov	r5, r0
    7cb2:	6933      	ldr	r3, [r6, #16]
    7cb4:	f106 010c 	add.w	r1, r6, #12
    7cb8:	3302      	adds	r3, #2
    7cba:	009a      	lsls	r2, r3, #2
    7cbc:	300c      	adds	r0, #12
    7cbe:	f7fd fcdd 	bl	567c <memcpy>
    7cc2:	4629      	mov	r1, r5
    7cc4:	2201      	movs	r2, #1
    7cc6:	4620      	mov	r0, r4
    7cc8:	f000 fe64 	bl	8994 <__lshift>
    7ccc:	9008      	str	r0, [sp, #32]
    7cce:	e4b6      	b.n	763e <_dtoa_r+0x566>
    7cd0:	2b39      	cmp	r3, #57	; 0x39
    7cd2:	f8cd b020 	str.w	fp, [sp, #32]
    7cd6:	46d0      	mov	r8, sl
    7cd8:	f000 80a5 	beq.w	7e26 <_dtoa_r+0xd4e>
    7cdc:	f103 0a01 	add.w	sl, r3, #1
    7ce0:	46b3      	mov	fp, r6
    7ce2:	f887 a000 	strb.w	sl, [r7]
    7ce6:	1c7d      	adds	r5, r7, #1
    7ce8:	9e08      	ldr	r6, [sp, #32]
    7cea:	e570      	b.n	77ce <_dtoa_r+0x6f6>
    7cec:	465a      	mov	r2, fp
    7cee:	46d0      	mov	r8, sl
    7cf0:	46b3      	mov	fp, r6
    7cf2:	469a      	mov	sl, r3
    7cf4:	4616      	mov	r6, r2
    7cf6:	e54e      	b.n	7796 <_dtoa_r+0x6be>
    7cf8:	9812      	ldr	r0, [sp, #72]	; 0x48
    7cfa:	495e      	ldr	r1, [pc, #376]	; (7e74 <_dtoa_r+0xd9c>)
    7cfc:	462a      	mov	r2, r5
    7cfe:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    7d02:	4633      	mov	r3, r6
    7d04:	e951 0102 	ldrd	r0, r1, [r1, #-8]
    7d08:	f7fd f85e 	bl	4dc8 <__aeabi_dmul>
    7d0c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
    7d10:	4638      	mov	r0, r7
    7d12:	4641      	mov	r1, r8
    7d14:	f002 fc26 	bl	a564 <__aeabi_d2iz>
    7d18:	4605      	mov	r5, r0
    7d1a:	f7fc ffef 	bl	4cfc <__aeabi_i2d>
    7d1e:	4602      	mov	r2, r0
    7d20:	460b      	mov	r3, r1
    7d22:	4638      	mov	r0, r7
    7d24:	4641      	mov	r1, r8
    7d26:	f7fc fe9b 	bl	4a60 <__aeabi_dsub>
    7d2a:	4606      	mov	r6, r0
    7d2c:	9812      	ldr	r0, [sp, #72]	; 0x48
    7d2e:	9a04      	ldr	r2, [sp, #16]
    7d30:	3530      	adds	r5, #48	; 0x30
    7d32:	2801      	cmp	r0, #1
    7d34:	7015      	strb	r5, [r2, #0]
    7d36:	460f      	mov	r7, r1
    7d38:	f102 0501 	add.w	r5, r2, #1
    7d3c:	d026      	beq.n	7d8c <_dtoa_r+0xcb4>
    7d3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7d40:	9a04      	ldr	r2, [sp, #16]
    7d42:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
    7d46:	4413      	add	r3, r2
    7d48:	f04f 0a00 	mov.w	sl, #0
    7d4c:	4699      	mov	r9, r3
    7d4e:	f8df b130 	ldr.w	fp, [pc, #304]	; 7e80 <_dtoa_r+0xda8>
    7d52:	4652      	mov	r2, sl
    7d54:	465b      	mov	r3, fp
    7d56:	4630      	mov	r0, r6
    7d58:	4639      	mov	r1, r7
    7d5a:	f7fd f835 	bl	4dc8 <__aeabi_dmul>
    7d5e:	460f      	mov	r7, r1
    7d60:	4606      	mov	r6, r0
    7d62:	f002 fbff 	bl	a564 <__aeabi_d2iz>
    7d66:	4680      	mov	r8, r0
    7d68:	f7fc ffc8 	bl	4cfc <__aeabi_i2d>
    7d6c:	4602      	mov	r2, r0
    7d6e:	460b      	mov	r3, r1
    7d70:	4630      	mov	r0, r6
    7d72:	4639      	mov	r1, r7
    7d74:	f7fc fe74 	bl	4a60 <__aeabi_dsub>
    7d78:	f108 0830 	add.w	r8, r8, #48	; 0x30
    7d7c:	f805 8b01 	strb.w	r8, [r5], #1
    7d80:	454d      	cmp	r5, r9
    7d82:	4606      	mov	r6, r0
    7d84:	460f      	mov	r7, r1
    7d86:	d1e4      	bne.n	7d52 <_dtoa_r+0xc7a>
    7d88:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
    7d8c:	2200      	movs	r2, #0
    7d8e:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
    7d92:	4b3a      	ldr	r3, [pc, #232]	; (7e7c <_dtoa_r+0xda4>)
    7d94:	f7fc fe66 	bl	4a64 <__adddf3>
    7d98:	4632      	mov	r2, r6
    7d9a:	463b      	mov	r3, r7
    7d9c:	f7fd fa86 	bl	52ac <__aeabi_dcmplt>
    7da0:	2800      	cmp	r0, #0
    7da2:	d046      	beq.n	7e32 <_dtoa_r+0xd5a>
    7da4:	9b15      	ldr	r3, [sp, #84]	; 0x54
    7da6:	9302      	str	r3, [sp, #8]
    7da8:	f815 8c01 	ldrb.w	r8, [r5, #-1]
    7dac:	f7ff bb42 	b.w	7434 <_dtoa_r+0x35c>
    7db0:	f04f 0800 	mov.w	r8, #0
    7db4:	4646      	mov	r6, r8
    7db6:	e6a8      	b.n	7b0a <_dtoa_r+0xa32>
    7db8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7dba:	9a07      	ldr	r2, [sp, #28]
    7dbc:	1a9d      	subs	r5, r3, r2
    7dbe:	2300      	movs	r3, #0
    7dc0:	f7ff bb70 	b.w	74a4 <_dtoa_r+0x3cc>
    7dc4:	9b18      	ldr	r3, [sp, #96]	; 0x60
    7dc6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    7dc8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    7dcc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    7dce:	f7ff bb69 	b.w	74a4 <_dtoa_r+0x3cc>
    7dd2:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
    7dd6:	f04f 0a02 	mov.w	sl, #2
    7dda:	e56d      	b.n	78b8 <_dtoa_r+0x7e0>
    7ddc:	9b07      	ldr	r3, [sp, #28]
    7dde:	2b00      	cmp	r3, #0
    7de0:	f43f aeb8 	beq.w	7b54 <_dtoa_r+0xa7c>
    7de4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7de6:	2b00      	cmp	r3, #0
    7de8:	f77f aede 	ble.w	7ba8 <_dtoa_r+0xad0>
    7dec:	2200      	movs	r2, #0
    7dee:	4b24      	ldr	r3, [pc, #144]	; (7e80 <_dtoa_r+0xda8>)
    7df0:	4638      	mov	r0, r7
    7df2:	4641      	mov	r1, r8
    7df4:	f7fc ffe8 	bl	4dc8 <__aeabi_dmul>
    7df8:	4607      	mov	r7, r0
    7dfa:	4688      	mov	r8, r1
    7dfc:	f10a 0001 	add.w	r0, sl, #1
    7e00:	f7fc ff7c 	bl	4cfc <__aeabi_i2d>
    7e04:	463a      	mov	r2, r7
    7e06:	4643      	mov	r3, r8
    7e08:	f7fc ffde 	bl	4dc8 <__aeabi_dmul>
    7e0c:	2200      	movs	r2, #0
    7e0e:	4b17      	ldr	r3, [pc, #92]	; (7e6c <_dtoa_r+0xd94>)
    7e10:	f7fc fe28 	bl	4a64 <__adddf3>
    7e14:	9a02      	ldr	r2, [sp, #8]
    7e16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7e18:	3a01      	subs	r2, #1
    7e1a:	4605      	mov	r5, r0
    7e1c:	9215      	str	r2, [sp, #84]	; 0x54
    7e1e:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
    7e22:	9312      	str	r3, [sp, #72]	; 0x48
    7e24:	e569      	b.n	78fa <_dtoa_r+0x822>
    7e26:	2239      	movs	r2, #57	; 0x39
    7e28:	46b3      	mov	fp, r6
    7e2a:	703a      	strb	r2, [r7, #0]
    7e2c:	9e08      	ldr	r6, [sp, #32]
    7e2e:	1c7d      	adds	r5, r7, #1
    7e30:	e4bf      	b.n	77b2 <_dtoa_r+0x6da>
    7e32:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
    7e36:	2000      	movs	r0, #0
    7e38:	4910      	ldr	r1, [pc, #64]	; (7e7c <_dtoa_r+0xda4>)
    7e3a:	f7fc fe11 	bl	4a60 <__aeabi_dsub>
    7e3e:	4632      	mov	r2, r6
    7e40:	463b      	mov	r3, r7
    7e42:	f7fd fa51 	bl	52e8 <__aeabi_dcmpgt>
    7e46:	b908      	cbnz	r0, 7e4c <_dtoa_r+0xd74>
    7e48:	e6ae      	b.n	7ba8 <_dtoa_r+0xad0>
    7e4a:	4615      	mov	r5, r2
    7e4c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    7e50:	1e6a      	subs	r2, r5, #1
    7e52:	2b30      	cmp	r3, #48	; 0x30
    7e54:	d0f9      	beq.n	7e4a <_dtoa_r+0xd72>
    7e56:	e5d7      	b.n	7a08 <_dtoa_r+0x930>
    7e58:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
    7e5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    7e5e:	9302      	str	r3, [sp, #8]
    7e60:	f7ff bae8 	b.w	7434 <_dtoa_r+0x35c>
    7e64:	970c      	str	r7, [sp, #48]	; 0x30
    7e66:	f7ff bba7 	b.w	75b8 <_dtoa_r+0x4e0>
    7e6a:	bf00      	nop
    7e6c:	401c0000 	.word	0x401c0000
    7e70:	40140000 	.word	0x40140000
    7e74:	0000a778 	.word	0x0000a778
    7e78:	0000a750 	.word	0x0000a750
    7e7c:	3fe00000 	.word	0x3fe00000
    7e80:	40240000 	.word	0x40240000
    7e84:	2b39      	cmp	r3, #57	; 0x39
    7e86:	f8cd b020 	str.w	fp, [sp, #32]
    7e8a:	46d0      	mov	r8, sl
    7e8c:	f8dd b01c 	ldr.w	fp, [sp, #28]
    7e90:	469a      	mov	sl, r3
    7e92:	d0c8      	beq.n	7e26 <_dtoa_r+0xd4e>
    7e94:	f1bb 0f00 	cmp.w	fp, #0
    7e98:	f73f aec0 	bgt.w	7c1c <_dtoa_r+0xb44>
    7e9c:	e6c0      	b.n	7c20 <_dtoa_r+0xb48>
    7e9e:	f47f aebf 	bne.w	7c20 <_dtoa_r+0xb48>
    7ea2:	f01a 0f01 	tst.w	sl, #1
    7ea6:	f43f aebb 	beq.w	7c20 <_dtoa_r+0xb48>
    7eaa:	e6b3      	b.n	7c14 <_dtoa_r+0xb3c>
    7eac:	f04f 0800 	mov.w	r8, #0
    7eb0:	4646      	mov	r6, r8
    7eb2:	e5e8      	b.n	7a86 <_dtoa_r+0x9ae>
    7eb4:	4631      	mov	r1, r6
    7eb6:	2300      	movs	r3, #0
    7eb8:	220a      	movs	r2, #10
    7eba:	4620      	mov	r0, r4
    7ebc:	f000 fb9e 	bl	85fc <__multadd>
    7ec0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7ec2:	4606      	mov	r6, r0
    7ec4:	2b00      	cmp	r3, #0
    7ec6:	dd07      	ble.n	7ed8 <_dtoa_r+0xe00>
    7ec8:	9307      	str	r3, [sp, #28]
    7eca:	f7ff bbab 	b.w	7624 <_dtoa_r+0x54c>
    7ece:	9b24      	ldr	r3, [sp, #144]	; 0x90
    7ed0:	2b02      	cmp	r3, #2
    7ed2:	dc1f      	bgt.n	7f14 <_dtoa_r+0xe3c>
    7ed4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7ed6:	e43c      	b.n	7752 <_dtoa_r+0x67a>
    7ed8:	9b24      	ldr	r3, [sp, #144]	; 0x90
    7eda:	2b02      	cmp	r3, #2
    7edc:	dc1a      	bgt.n	7f14 <_dtoa_r+0xe3c>
    7ede:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7ee0:	e7f2      	b.n	7ec8 <_dtoa_r+0xdf0>
    7ee2:	f43f ab81 	beq.w	75e8 <_dtoa_r+0x510>
    7ee6:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
    7eea:	e411      	b.n	7710 <_dtoa_r+0x638>
    7eec:	2500      	movs	r5, #0
    7eee:	4620      	mov	r0, r4
    7ef0:	6465      	str	r5, [r4, #68]	; 0x44
    7ef2:	4629      	mov	r1, r5
    7ef4:	f000 fb52 	bl	859c <_Balloc>
    7ef8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7efc:	9307      	str	r3, [sp, #28]
    7efe:	930f      	str	r3, [sp, #60]	; 0x3c
    7f00:	2301      	movs	r3, #1
    7f02:	9004      	str	r0, [sp, #16]
    7f04:	9525      	str	r5, [sp, #148]	; 0x94
    7f06:	6420      	str	r0, [r4, #64]	; 0x40
    7f08:	930b      	str	r3, [sp, #44]	; 0x2c
    7f0a:	f7ff b9e0 	b.w	72ce <_dtoa_r+0x1f6>
    7f0e:	2501      	movs	r5, #1
    7f10:	f7ff b9a8 	b.w	7264 <_dtoa_r+0x18c>
    7f14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7f16:	9307      	str	r3, [sp, #28]
    7f18:	e5e8      	b.n	7aec <_dtoa_r+0xa14>
    7f1a:	bf00      	nop

00007f1c <__libc_fini_array>:
    7f1c:	b538      	push	{r3, r4, r5, lr}
    7f1e:	4c0a      	ldr	r4, [pc, #40]	; (7f48 <__libc_fini_array+0x2c>)
    7f20:	4d0a      	ldr	r5, [pc, #40]	; (7f4c <__libc_fini_array+0x30>)
    7f22:	1b64      	subs	r4, r4, r5
    7f24:	10a4      	asrs	r4, r4, #2
    7f26:	d00a      	beq.n	7f3e <__libc_fini_array+0x22>
    7f28:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    7f2c:	3b01      	subs	r3, #1
    7f2e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    7f32:	3c01      	subs	r4, #1
    7f34:	f855 3904 	ldr.w	r3, [r5], #-4
    7f38:	4798      	blx	r3
    7f3a:	2c00      	cmp	r4, #0
    7f3c:	d1f9      	bne.n	7f32 <__libc_fini_array+0x16>
    7f3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    7f42:	f002 bb4d 	b.w	a5e0 <_fini>
    7f46:	bf00      	nop
    7f48:	10000a94 	.word	0x10000a94
    7f4c:	10000a90 	.word	0x10000a90

00007f50 <__localeconv_l>:
    7f50:	30f0      	adds	r0, #240	; 0xf0
    7f52:	4770      	bx	lr

00007f54 <_localeconv_r>:
    7f54:	4a04      	ldr	r2, [pc, #16]	; (7f68 <_localeconv_r+0x14>)
    7f56:	4b05      	ldr	r3, [pc, #20]	; (7f6c <_localeconv_r+0x18>)
    7f58:	6812      	ldr	r2, [r2, #0]
    7f5a:	6b50      	ldr	r0, [r2, #52]	; 0x34
    7f5c:	2800      	cmp	r0, #0
    7f5e:	bf08      	it	eq
    7f60:	4618      	moveq	r0, r3
    7f62:	30f0      	adds	r0, #240	; 0xf0
    7f64:	4770      	bx	lr
    7f66:	bf00      	nop
    7f68:	100000dc 	.word	0x100000dc
    7f6c:	1000091c 	.word	0x1000091c

00007f70 <localeconv>:
    7f70:	4a04      	ldr	r2, [pc, #16]	; (7f84 <localeconv+0x14>)
    7f72:	4b05      	ldr	r3, [pc, #20]	; (7f88 <localeconv+0x18>)
    7f74:	6812      	ldr	r2, [r2, #0]
    7f76:	6b50      	ldr	r0, [r2, #52]	; 0x34
    7f78:	2800      	cmp	r0, #0
    7f7a:	bf08      	it	eq
    7f7c:	4618      	moveq	r0, r3
    7f7e:	30f0      	adds	r0, #240	; 0xf0
    7f80:	4770      	bx	lr
    7f82:	bf00      	nop
    7f84:	100000dc 	.word	0x100000dc
    7f88:	1000091c 	.word	0x1000091c

00007f8c <__retarget_lock_init>:
    7f8c:	4770      	bx	lr
    7f8e:	bf00      	nop

00007f90 <__retarget_lock_init_recursive>:
    7f90:	4770      	bx	lr
    7f92:	bf00      	nop

00007f94 <__retarget_lock_close>:
    7f94:	4770      	bx	lr
    7f96:	bf00      	nop

00007f98 <__retarget_lock_close_recursive>:
    7f98:	4770      	bx	lr
    7f9a:	bf00      	nop

00007f9c <__retarget_lock_acquire>:
    7f9c:	4770      	bx	lr
    7f9e:	bf00      	nop

00007fa0 <__retarget_lock_acquire_recursive>:
    7fa0:	4770      	bx	lr
    7fa2:	bf00      	nop

00007fa4 <__retarget_lock_try_acquire>:
    7fa4:	2001      	movs	r0, #1
    7fa6:	4770      	bx	lr

00007fa8 <__retarget_lock_try_acquire_recursive>:
    7fa8:	2001      	movs	r0, #1
    7faa:	4770      	bx	lr

00007fac <__retarget_lock_release>:
    7fac:	4770      	bx	lr
    7fae:	bf00      	nop

00007fb0 <__retarget_lock_release_recursive>:
    7fb0:	4770      	bx	lr
    7fb2:	bf00      	nop

00007fb4 <_malloc_r>:
    7fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7fb8:	f101 060b 	add.w	r6, r1, #11
    7fbc:	2e16      	cmp	r6, #22
    7fbe:	b083      	sub	sp, #12
    7fc0:	4605      	mov	r5, r0
    7fc2:	f240 809e 	bls.w	8102 <_malloc_r+0x14e>
    7fc6:	f036 0607 	bics.w	r6, r6, #7
    7fca:	f100 80bd 	bmi.w	8148 <_malloc_r+0x194>
    7fce:	42b1      	cmp	r1, r6
    7fd0:	f200 80ba 	bhi.w	8148 <_malloc_r+0x194>
    7fd4:	f000 fad6 	bl	8584 <__malloc_lock>
    7fd8:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    7fdc:	f0c0 8285 	bcc.w	84ea <_malloc_r+0x536>
    7fe0:	0a73      	lsrs	r3, r6, #9
    7fe2:	f000 80b8 	beq.w	8156 <_malloc_r+0x1a2>
    7fe6:	2b04      	cmp	r3, #4
    7fe8:	f200 816c 	bhi.w	82c4 <_malloc_r+0x310>
    7fec:	09b3      	lsrs	r3, r6, #6
    7fee:	f103 0039 	add.w	r0, r3, #57	; 0x39
    7ff2:	f103 0e38 	add.w	lr, r3, #56	; 0x38
    7ff6:	00c1      	lsls	r1, r0, #3
    7ff8:	4fb8      	ldr	r7, [pc, #736]	; (82dc <_malloc_r+0x328>)
    7ffa:	4439      	add	r1, r7
    7ffc:	684c      	ldr	r4, [r1, #4]
    7ffe:	3908      	subs	r1, #8
    8000:	42a1      	cmp	r1, r4
    8002:	d106      	bne.n	8012 <_malloc_r+0x5e>
    8004:	e00c      	b.n	8020 <_malloc_r+0x6c>
    8006:	2a00      	cmp	r2, #0
    8008:	f280 80ab 	bge.w	8162 <_malloc_r+0x1ae>
    800c:	68e4      	ldr	r4, [r4, #12]
    800e:	42a1      	cmp	r1, r4
    8010:	d006      	beq.n	8020 <_malloc_r+0x6c>
    8012:	6863      	ldr	r3, [r4, #4]
    8014:	f023 0303 	bic.w	r3, r3, #3
    8018:	1b9a      	subs	r2, r3, r6
    801a:	2a0f      	cmp	r2, #15
    801c:	ddf3      	ble.n	8006 <_malloc_r+0x52>
    801e:	4670      	mov	r0, lr
    8020:	693c      	ldr	r4, [r7, #16]
    8022:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 82f0 <_malloc_r+0x33c>
    8026:	4574      	cmp	r4, lr
    8028:	f000 819e 	beq.w	8368 <_malloc_r+0x3b4>
    802c:	6863      	ldr	r3, [r4, #4]
    802e:	f023 0303 	bic.w	r3, r3, #3
    8032:	1b9a      	subs	r2, r3, r6
    8034:	2a0f      	cmp	r2, #15
    8036:	f300 8183 	bgt.w	8340 <_malloc_r+0x38c>
    803a:	2a00      	cmp	r2, #0
    803c:	f8c7 e014 	str.w	lr, [r7, #20]
    8040:	f8c7 e010 	str.w	lr, [r7, #16]
    8044:	f280 8091 	bge.w	816a <_malloc_r+0x1b6>
    8048:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    804c:	f080 8154 	bcs.w	82f8 <_malloc_r+0x344>
    8050:	2201      	movs	r2, #1
    8052:	08db      	lsrs	r3, r3, #3
    8054:	6879      	ldr	r1, [r7, #4]
    8056:	ea4f 0ca3 	mov.w	ip, r3, asr #2
    805a:	4413      	add	r3, r2
    805c:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
    8060:	fa02 f20c 	lsl.w	r2, r2, ip
    8064:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
    8068:	430a      	orrs	r2, r1
    806a:	f1ac 0108 	sub.w	r1, ip, #8
    806e:	60e1      	str	r1, [r4, #12]
    8070:	f8c4 8008 	str.w	r8, [r4, #8]
    8074:	607a      	str	r2, [r7, #4]
    8076:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
    807a:	f8c8 400c 	str.w	r4, [r8, #12]
    807e:	2401      	movs	r4, #1
    8080:	1083      	asrs	r3, r0, #2
    8082:	409c      	lsls	r4, r3
    8084:	4294      	cmp	r4, r2
    8086:	d87d      	bhi.n	8184 <_malloc_r+0x1d0>
    8088:	4214      	tst	r4, r2
    808a:	d106      	bne.n	809a <_malloc_r+0xe6>
    808c:	f020 0003 	bic.w	r0, r0, #3
    8090:	0064      	lsls	r4, r4, #1
    8092:	4214      	tst	r4, r2
    8094:	f100 0004 	add.w	r0, r0, #4
    8098:	d0fa      	beq.n	8090 <_malloc_r+0xdc>
    809a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    809e:	46cc      	mov	ip, r9
    80a0:	4680      	mov	r8, r0
    80a2:	f8dc 300c 	ldr.w	r3, [ip, #12]
    80a6:	459c      	cmp	ip, r3
    80a8:	d107      	bne.n	80ba <_malloc_r+0x106>
    80aa:	e15f      	b.n	836c <_malloc_r+0x3b8>
    80ac:	2a00      	cmp	r2, #0
    80ae:	f280 816d 	bge.w	838c <_malloc_r+0x3d8>
    80b2:	68db      	ldr	r3, [r3, #12]
    80b4:	459c      	cmp	ip, r3
    80b6:	f000 8159 	beq.w	836c <_malloc_r+0x3b8>
    80ba:	6859      	ldr	r1, [r3, #4]
    80bc:	f021 0103 	bic.w	r1, r1, #3
    80c0:	1b8a      	subs	r2, r1, r6
    80c2:	2a0f      	cmp	r2, #15
    80c4:	ddf2      	ble.n	80ac <_malloc_r+0xf8>
    80c6:	68dc      	ldr	r4, [r3, #12]
    80c8:	f8d3 c008 	ldr.w	ip, [r3, #8]
    80cc:	f046 0801 	orr.w	r8, r6, #1
    80d0:	4628      	mov	r0, r5
    80d2:	441e      	add	r6, r3
    80d4:	f042 0501 	orr.w	r5, r2, #1
    80d8:	f8c3 8004 	str.w	r8, [r3, #4]
    80dc:	f8cc 400c 	str.w	r4, [ip, #12]
    80e0:	f8c4 c008 	str.w	ip, [r4, #8]
    80e4:	617e      	str	r6, [r7, #20]
    80e6:	613e      	str	r6, [r7, #16]
    80e8:	f8c6 e00c 	str.w	lr, [r6, #12]
    80ec:	f8c6 e008 	str.w	lr, [r6, #8]
    80f0:	6075      	str	r5, [r6, #4]
    80f2:	505a      	str	r2, [r3, r1]
    80f4:	9300      	str	r3, [sp, #0]
    80f6:	f000 fa4b 	bl	8590 <__malloc_unlock>
    80fa:	9b00      	ldr	r3, [sp, #0]
    80fc:	f103 0408 	add.w	r4, r3, #8
    8100:	e01e      	b.n	8140 <_malloc_r+0x18c>
    8102:	2910      	cmp	r1, #16
    8104:	d820      	bhi.n	8148 <_malloc_r+0x194>
    8106:	f000 fa3d 	bl	8584 <__malloc_lock>
    810a:	2610      	movs	r6, #16
    810c:	2318      	movs	r3, #24
    810e:	2002      	movs	r0, #2
    8110:	4f72      	ldr	r7, [pc, #456]	; (82dc <_malloc_r+0x328>)
    8112:	443b      	add	r3, r7
    8114:	685c      	ldr	r4, [r3, #4]
    8116:	f1a3 0208 	sub.w	r2, r3, #8
    811a:	4294      	cmp	r4, r2
    811c:	f000 812f 	beq.w	837e <_malloc_r+0x3ca>
    8120:	6863      	ldr	r3, [r4, #4]
    8122:	68e1      	ldr	r1, [r4, #12]
    8124:	f023 0303 	bic.w	r3, r3, #3
    8128:	4423      	add	r3, r4
    812a:	685a      	ldr	r2, [r3, #4]
    812c:	68a6      	ldr	r6, [r4, #8]
    812e:	f042 0201 	orr.w	r2, r2, #1
    8132:	60f1      	str	r1, [r6, #12]
    8134:	4628      	mov	r0, r5
    8136:	608e      	str	r6, [r1, #8]
    8138:	605a      	str	r2, [r3, #4]
    813a:	f000 fa29 	bl	8590 <__malloc_unlock>
    813e:	3408      	adds	r4, #8
    8140:	4620      	mov	r0, r4
    8142:	b003      	add	sp, #12
    8144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8148:	2400      	movs	r4, #0
    814a:	230c      	movs	r3, #12
    814c:	4620      	mov	r0, r4
    814e:	602b      	str	r3, [r5, #0]
    8150:	b003      	add	sp, #12
    8152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8156:	2040      	movs	r0, #64	; 0x40
    8158:	f44f 7100 	mov.w	r1, #512	; 0x200
    815c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
    8160:	e74a      	b.n	7ff8 <_malloc_r+0x44>
    8162:	4423      	add	r3, r4
    8164:	685a      	ldr	r2, [r3, #4]
    8166:	68e1      	ldr	r1, [r4, #12]
    8168:	e7e0      	b.n	812c <_malloc_r+0x178>
    816a:	4423      	add	r3, r4
    816c:	685a      	ldr	r2, [r3, #4]
    816e:	4628      	mov	r0, r5
    8170:	f042 0201 	orr.w	r2, r2, #1
    8174:	605a      	str	r2, [r3, #4]
    8176:	3408      	adds	r4, #8
    8178:	f000 fa0a 	bl	8590 <__malloc_unlock>
    817c:	4620      	mov	r0, r4
    817e:	b003      	add	sp, #12
    8180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8184:	68bc      	ldr	r4, [r7, #8]
    8186:	6863      	ldr	r3, [r4, #4]
    8188:	f023 0803 	bic.w	r8, r3, #3
    818c:	45b0      	cmp	r8, r6
    818e:	d304      	bcc.n	819a <_malloc_r+0x1e6>
    8190:	eba8 0306 	sub.w	r3, r8, r6
    8194:	2b0f      	cmp	r3, #15
    8196:	f300 8085 	bgt.w	82a4 <_malloc_r+0x2f0>
    819a:	f8df 9158 	ldr.w	r9, [pc, #344]	; 82f4 <_malloc_r+0x340>
    819e:	4b50      	ldr	r3, [pc, #320]	; (82e0 <_malloc_r+0x32c>)
    81a0:	f8d9 2000 	ldr.w	r2, [r9]
    81a4:	681b      	ldr	r3, [r3, #0]
    81a6:	3201      	adds	r2, #1
    81a8:	4433      	add	r3, r6
    81aa:	eb04 0a08 	add.w	sl, r4, r8
    81ae:	f000 8154 	beq.w	845a <_malloc_r+0x4a6>
    81b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    81b6:	330f      	adds	r3, #15
    81b8:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
    81bc:	f02b 0b0f 	bic.w	fp, fp, #15
    81c0:	4659      	mov	r1, fp
    81c2:	4628      	mov	r0, r5
    81c4:	f000 fe5a 	bl	8e7c <_sbrk_r>
    81c8:	1c41      	adds	r1, r0, #1
    81ca:	4602      	mov	r2, r0
    81cc:	f000 80fb 	beq.w	83c6 <_malloc_r+0x412>
    81d0:	4582      	cmp	sl, r0
    81d2:	f200 80f6 	bhi.w	83c2 <_malloc_r+0x40e>
    81d6:	4b43      	ldr	r3, [pc, #268]	; (82e4 <_malloc_r+0x330>)
    81d8:	6819      	ldr	r1, [r3, #0]
    81da:	4459      	add	r1, fp
    81dc:	6019      	str	r1, [r3, #0]
    81de:	f000 814c 	beq.w	847a <_malloc_r+0x4c6>
    81e2:	f8d9 0000 	ldr.w	r0, [r9]
    81e6:	3001      	adds	r0, #1
    81e8:	bf1b      	ittet	ne
    81ea:	eba2 0a0a 	subne.w	sl, r2, sl
    81ee:	4451      	addne	r1, sl
    81f0:	f8c9 2000 	streq.w	r2, [r9]
    81f4:	6019      	strne	r1, [r3, #0]
    81f6:	f012 0107 	ands.w	r1, r2, #7
    81fa:	f000 8114 	beq.w	8426 <_malloc_r+0x472>
    81fe:	f1c1 0008 	rsb	r0, r1, #8
    8202:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
    8206:	4402      	add	r2, r0
    8208:	3108      	adds	r1, #8
    820a:	eb02 090b 	add.w	r9, r2, fp
    820e:	f3c9 090b 	ubfx	r9, r9, #0, #12
    8212:	eba1 0909 	sub.w	r9, r1, r9
    8216:	4649      	mov	r1, r9
    8218:	4628      	mov	r0, r5
    821a:	9301      	str	r3, [sp, #4]
    821c:	9200      	str	r2, [sp, #0]
    821e:	f000 fe2d 	bl	8e7c <_sbrk_r>
    8222:	1c43      	adds	r3, r0, #1
    8224:	e89d 000c 	ldmia.w	sp, {r2, r3}
    8228:	f000 8142 	beq.w	84b0 <_malloc_r+0x4fc>
    822c:	1a80      	subs	r0, r0, r2
    822e:	4448      	add	r0, r9
    8230:	f040 0001 	orr.w	r0, r0, #1
    8234:	6819      	ldr	r1, [r3, #0]
    8236:	42bc      	cmp	r4, r7
    8238:	4449      	add	r1, r9
    823a:	60ba      	str	r2, [r7, #8]
    823c:	6019      	str	r1, [r3, #0]
    823e:	6050      	str	r0, [r2, #4]
    8240:	d017      	beq.n	8272 <_malloc_r+0x2be>
    8242:	f1b8 0f0f 	cmp.w	r8, #15
    8246:	f240 80fa 	bls.w	843e <_malloc_r+0x48a>
    824a:	f04f 0c05 	mov.w	ip, #5
    824e:	6862      	ldr	r2, [r4, #4]
    8250:	f1a8 000c 	sub.w	r0, r8, #12
    8254:	f020 0007 	bic.w	r0, r0, #7
    8258:	f002 0201 	and.w	r2, r2, #1
    825c:	eb04 0e00 	add.w	lr, r4, r0
    8260:	4302      	orrs	r2, r0
    8262:	280f      	cmp	r0, #15
    8264:	6062      	str	r2, [r4, #4]
    8266:	f8ce c004 	str.w	ip, [lr, #4]
    826a:	f8ce c008 	str.w	ip, [lr, #8]
    826e:	f200 8116 	bhi.w	849e <_malloc_r+0x4ea>
    8272:	4b1d      	ldr	r3, [pc, #116]	; (82e8 <_malloc_r+0x334>)
    8274:	68bc      	ldr	r4, [r7, #8]
    8276:	681a      	ldr	r2, [r3, #0]
    8278:	4291      	cmp	r1, r2
    827a:	bf88      	it	hi
    827c:	6019      	strhi	r1, [r3, #0]
    827e:	4b1b      	ldr	r3, [pc, #108]	; (82ec <_malloc_r+0x338>)
    8280:	681a      	ldr	r2, [r3, #0]
    8282:	4291      	cmp	r1, r2
    8284:	6862      	ldr	r2, [r4, #4]
    8286:	bf88      	it	hi
    8288:	6019      	strhi	r1, [r3, #0]
    828a:	f022 0203 	bic.w	r2, r2, #3
    828e:	4296      	cmp	r6, r2
    8290:	eba2 0306 	sub.w	r3, r2, r6
    8294:	d801      	bhi.n	829a <_malloc_r+0x2e6>
    8296:	2b0f      	cmp	r3, #15
    8298:	dc04      	bgt.n	82a4 <_malloc_r+0x2f0>
    829a:	4628      	mov	r0, r5
    829c:	f000 f978 	bl	8590 <__malloc_unlock>
    82a0:	2400      	movs	r4, #0
    82a2:	e74d      	b.n	8140 <_malloc_r+0x18c>
    82a4:	f046 0201 	orr.w	r2, r6, #1
    82a8:	f043 0301 	orr.w	r3, r3, #1
    82ac:	4426      	add	r6, r4
    82ae:	6062      	str	r2, [r4, #4]
    82b0:	4628      	mov	r0, r5
    82b2:	60be      	str	r6, [r7, #8]
    82b4:	3408      	adds	r4, #8
    82b6:	6073      	str	r3, [r6, #4]
    82b8:	f000 f96a 	bl	8590 <__malloc_unlock>
    82bc:	4620      	mov	r0, r4
    82be:	b003      	add	sp, #12
    82c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    82c4:	2b14      	cmp	r3, #20
    82c6:	d970      	bls.n	83aa <_malloc_r+0x3f6>
    82c8:	2b54      	cmp	r3, #84	; 0x54
    82ca:	f200 80a2 	bhi.w	8412 <_malloc_r+0x45e>
    82ce:	0b33      	lsrs	r3, r6, #12
    82d0:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    82d4:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
    82d8:	00c1      	lsls	r1, r0, #3
    82da:	e68d      	b.n	7ff8 <_malloc_r+0x44>
    82dc:	1000050c 	.word	0x1000050c
    82e0:	100034bc 	.word	0x100034bc
    82e4:	1000348c 	.word	0x1000348c
    82e8:	100034b4 	.word	0x100034b4
    82ec:	100034b8 	.word	0x100034b8
    82f0:	10000514 	.word	0x10000514
    82f4:	10000914 	.word	0x10000914
    82f8:	0a5a      	lsrs	r2, r3, #9
    82fa:	2a04      	cmp	r2, #4
    82fc:	d95b      	bls.n	83b6 <_malloc_r+0x402>
    82fe:	2a14      	cmp	r2, #20
    8300:	f200 80ae 	bhi.w	8460 <_malloc_r+0x4ac>
    8304:	f102 015c 	add.w	r1, r2, #92	; 0x5c
    8308:	00c9      	lsls	r1, r1, #3
    830a:	325b      	adds	r2, #91	; 0x5b
    830c:	eb07 0c01 	add.w	ip, r7, r1
    8310:	5879      	ldr	r1, [r7, r1]
    8312:	f1ac 0c08 	sub.w	ip, ip, #8
    8316:	458c      	cmp	ip, r1
    8318:	f000 8088 	beq.w	842c <_malloc_r+0x478>
    831c:	684a      	ldr	r2, [r1, #4]
    831e:	f022 0203 	bic.w	r2, r2, #3
    8322:	4293      	cmp	r3, r2
    8324:	d273      	bcs.n	840e <_malloc_r+0x45a>
    8326:	6889      	ldr	r1, [r1, #8]
    8328:	458c      	cmp	ip, r1
    832a:	d1f7      	bne.n	831c <_malloc_r+0x368>
    832c:	f8dc 300c 	ldr.w	r3, [ip, #12]
    8330:	687a      	ldr	r2, [r7, #4]
    8332:	60e3      	str	r3, [r4, #12]
    8334:	f8c4 c008 	str.w	ip, [r4, #8]
    8338:	609c      	str	r4, [r3, #8]
    833a:	f8cc 400c 	str.w	r4, [ip, #12]
    833e:	e69e      	b.n	807e <_malloc_r+0xca>
    8340:	f046 0c01 	orr.w	ip, r6, #1
    8344:	f042 0101 	orr.w	r1, r2, #1
    8348:	4426      	add	r6, r4
    834a:	f8c4 c004 	str.w	ip, [r4, #4]
    834e:	4628      	mov	r0, r5
    8350:	617e      	str	r6, [r7, #20]
    8352:	613e      	str	r6, [r7, #16]
    8354:	f8c6 e00c 	str.w	lr, [r6, #12]
    8358:	f8c6 e008 	str.w	lr, [r6, #8]
    835c:	6071      	str	r1, [r6, #4]
    835e:	50e2      	str	r2, [r4, r3]
    8360:	f000 f916 	bl	8590 <__malloc_unlock>
    8364:	3408      	adds	r4, #8
    8366:	e6eb      	b.n	8140 <_malloc_r+0x18c>
    8368:	687a      	ldr	r2, [r7, #4]
    836a:	e688      	b.n	807e <_malloc_r+0xca>
    836c:	f108 0801 	add.w	r8, r8, #1
    8370:	f018 0f03 	tst.w	r8, #3
    8374:	f10c 0c08 	add.w	ip, ip, #8
    8378:	f47f ae93 	bne.w	80a2 <_malloc_r+0xee>
    837c:	e02d      	b.n	83da <_malloc_r+0x426>
    837e:	68dc      	ldr	r4, [r3, #12]
    8380:	42a3      	cmp	r3, r4
    8382:	bf08      	it	eq
    8384:	3002      	addeq	r0, #2
    8386:	f43f ae4b 	beq.w	8020 <_malloc_r+0x6c>
    838a:	e6c9      	b.n	8120 <_malloc_r+0x16c>
    838c:	461c      	mov	r4, r3
    838e:	4419      	add	r1, r3
    8390:	684a      	ldr	r2, [r1, #4]
    8392:	68db      	ldr	r3, [r3, #12]
    8394:	f854 6f08 	ldr.w	r6, [r4, #8]!
    8398:	f042 0201 	orr.w	r2, r2, #1
    839c:	604a      	str	r2, [r1, #4]
    839e:	4628      	mov	r0, r5
    83a0:	60f3      	str	r3, [r6, #12]
    83a2:	609e      	str	r6, [r3, #8]
    83a4:	f000 f8f4 	bl	8590 <__malloc_unlock>
    83a8:	e6ca      	b.n	8140 <_malloc_r+0x18c>
    83aa:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    83ae:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
    83b2:	00c1      	lsls	r1, r0, #3
    83b4:	e620      	b.n	7ff8 <_malloc_r+0x44>
    83b6:	099a      	lsrs	r2, r3, #6
    83b8:	f102 0139 	add.w	r1, r2, #57	; 0x39
    83bc:	00c9      	lsls	r1, r1, #3
    83be:	3238      	adds	r2, #56	; 0x38
    83c0:	e7a4      	b.n	830c <_malloc_r+0x358>
    83c2:	42bc      	cmp	r4, r7
    83c4:	d054      	beq.n	8470 <_malloc_r+0x4bc>
    83c6:	68bc      	ldr	r4, [r7, #8]
    83c8:	6862      	ldr	r2, [r4, #4]
    83ca:	f022 0203 	bic.w	r2, r2, #3
    83ce:	e75e      	b.n	828e <_malloc_r+0x2da>
    83d0:	f859 3908 	ldr.w	r3, [r9], #-8
    83d4:	4599      	cmp	r9, r3
    83d6:	f040 8086 	bne.w	84e6 <_malloc_r+0x532>
    83da:	f010 0f03 	tst.w	r0, #3
    83de:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
    83e2:	d1f5      	bne.n	83d0 <_malloc_r+0x41c>
    83e4:	687b      	ldr	r3, [r7, #4]
    83e6:	ea23 0304 	bic.w	r3, r3, r4
    83ea:	607b      	str	r3, [r7, #4]
    83ec:	0064      	lsls	r4, r4, #1
    83ee:	429c      	cmp	r4, r3
    83f0:	f63f aec8 	bhi.w	8184 <_malloc_r+0x1d0>
    83f4:	2c00      	cmp	r4, #0
    83f6:	f43f aec5 	beq.w	8184 <_malloc_r+0x1d0>
    83fa:	421c      	tst	r4, r3
    83fc:	4640      	mov	r0, r8
    83fe:	f47f ae4c 	bne.w	809a <_malloc_r+0xe6>
    8402:	0064      	lsls	r4, r4, #1
    8404:	421c      	tst	r4, r3
    8406:	f100 0004 	add.w	r0, r0, #4
    840a:	d0fa      	beq.n	8402 <_malloc_r+0x44e>
    840c:	e645      	b.n	809a <_malloc_r+0xe6>
    840e:	468c      	mov	ip, r1
    8410:	e78c      	b.n	832c <_malloc_r+0x378>
    8412:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    8416:	d815      	bhi.n	8444 <_malloc_r+0x490>
    8418:	0bf3      	lsrs	r3, r6, #15
    841a:	f103 0078 	add.w	r0, r3, #120	; 0x78
    841e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
    8422:	00c1      	lsls	r1, r0, #3
    8424:	e5e8      	b.n	7ff8 <_malloc_r+0x44>
    8426:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    842a:	e6ee      	b.n	820a <_malloc_r+0x256>
    842c:	2101      	movs	r1, #1
    842e:	687b      	ldr	r3, [r7, #4]
    8430:	1092      	asrs	r2, r2, #2
    8432:	fa01 f202 	lsl.w	r2, r1, r2
    8436:	431a      	orrs	r2, r3
    8438:	607a      	str	r2, [r7, #4]
    843a:	4663      	mov	r3, ip
    843c:	e779      	b.n	8332 <_malloc_r+0x37e>
    843e:	2301      	movs	r3, #1
    8440:	6053      	str	r3, [r2, #4]
    8442:	e72a      	b.n	829a <_malloc_r+0x2e6>
    8444:	f240 5254 	movw	r2, #1364	; 0x554
    8448:	4293      	cmp	r3, r2
    844a:	d822      	bhi.n	8492 <_malloc_r+0x4de>
    844c:	0cb3      	lsrs	r3, r6, #18
    844e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    8452:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
    8456:	00c1      	lsls	r1, r0, #3
    8458:	e5ce      	b.n	7ff8 <_malloc_r+0x44>
    845a:	f103 0b10 	add.w	fp, r3, #16
    845e:	e6af      	b.n	81c0 <_malloc_r+0x20c>
    8460:	2a54      	cmp	r2, #84	; 0x54
    8462:	d829      	bhi.n	84b8 <_malloc_r+0x504>
    8464:	0b1a      	lsrs	r2, r3, #12
    8466:	f102 016f 	add.w	r1, r2, #111	; 0x6f
    846a:	00c9      	lsls	r1, r1, #3
    846c:	326e      	adds	r2, #110	; 0x6e
    846e:	e74d      	b.n	830c <_malloc_r+0x358>
    8470:	4b20      	ldr	r3, [pc, #128]	; (84f4 <_malloc_r+0x540>)
    8472:	6819      	ldr	r1, [r3, #0]
    8474:	4459      	add	r1, fp
    8476:	6019      	str	r1, [r3, #0]
    8478:	e6b3      	b.n	81e2 <_malloc_r+0x22e>
    847a:	f3ca 000b 	ubfx	r0, sl, #0, #12
    847e:	2800      	cmp	r0, #0
    8480:	f47f aeaf 	bne.w	81e2 <_malloc_r+0x22e>
    8484:	eb08 030b 	add.w	r3, r8, fp
    8488:	68ba      	ldr	r2, [r7, #8]
    848a:	f043 0301 	orr.w	r3, r3, #1
    848e:	6053      	str	r3, [r2, #4]
    8490:	e6ef      	b.n	8272 <_malloc_r+0x2be>
    8492:	207f      	movs	r0, #127	; 0x7f
    8494:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    8498:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
    849c:	e5ac      	b.n	7ff8 <_malloc_r+0x44>
    849e:	f104 0108 	add.w	r1, r4, #8
    84a2:	4628      	mov	r0, r5
    84a4:	9300      	str	r3, [sp, #0]
    84a6:	f001 fb89 	bl	9bbc <_free_r>
    84aa:	9b00      	ldr	r3, [sp, #0]
    84ac:	6819      	ldr	r1, [r3, #0]
    84ae:	e6e0      	b.n	8272 <_malloc_r+0x2be>
    84b0:	2001      	movs	r0, #1
    84b2:	f04f 0900 	mov.w	r9, #0
    84b6:	e6bd      	b.n	8234 <_malloc_r+0x280>
    84b8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    84bc:	d805      	bhi.n	84ca <_malloc_r+0x516>
    84be:	0bda      	lsrs	r2, r3, #15
    84c0:	f102 0178 	add.w	r1, r2, #120	; 0x78
    84c4:	00c9      	lsls	r1, r1, #3
    84c6:	3277      	adds	r2, #119	; 0x77
    84c8:	e720      	b.n	830c <_malloc_r+0x358>
    84ca:	f240 5154 	movw	r1, #1364	; 0x554
    84ce:	428a      	cmp	r2, r1
    84d0:	d805      	bhi.n	84de <_malloc_r+0x52a>
    84d2:	0c9a      	lsrs	r2, r3, #18
    84d4:	f102 017d 	add.w	r1, r2, #125	; 0x7d
    84d8:	00c9      	lsls	r1, r1, #3
    84da:	327c      	adds	r2, #124	; 0x7c
    84dc:	e716      	b.n	830c <_malloc_r+0x358>
    84de:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    84e2:	227e      	movs	r2, #126	; 0x7e
    84e4:	e712      	b.n	830c <_malloc_r+0x358>
    84e6:	687b      	ldr	r3, [r7, #4]
    84e8:	e780      	b.n	83ec <_malloc_r+0x438>
    84ea:	08f0      	lsrs	r0, r6, #3
    84ec:	f106 0308 	add.w	r3, r6, #8
    84f0:	e60e      	b.n	8110 <_malloc_r+0x15c>
    84f2:	bf00      	nop
    84f4:	1000348c 	.word	0x1000348c

000084f8 <memchr>:
    84f8:	0783      	lsls	r3, r0, #30
    84fa:	b470      	push	{r4, r5, r6}
    84fc:	b2cd      	uxtb	r5, r1
    84fe:	d03d      	beq.n	857c <memchr+0x84>
    8500:	1e54      	subs	r4, r2, #1
    8502:	b30a      	cbz	r2, 8548 <memchr+0x50>
    8504:	7803      	ldrb	r3, [r0, #0]
    8506:	42ab      	cmp	r3, r5
    8508:	d01f      	beq.n	854a <memchr+0x52>
    850a:	1c43      	adds	r3, r0, #1
    850c:	e005      	b.n	851a <memchr+0x22>
    850e:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
    8512:	d319      	bcc.n	8548 <memchr+0x50>
    8514:	7802      	ldrb	r2, [r0, #0]
    8516:	42aa      	cmp	r2, r5
    8518:	d017      	beq.n	854a <memchr+0x52>
    851a:	f013 0f03 	tst.w	r3, #3
    851e:	4618      	mov	r0, r3
    8520:	f103 0301 	add.w	r3, r3, #1
    8524:	d1f3      	bne.n	850e <memchr+0x16>
    8526:	2c03      	cmp	r4, #3
    8528:	d811      	bhi.n	854e <memchr+0x56>
    852a:	b34c      	cbz	r4, 8580 <memchr+0x88>
    852c:	7803      	ldrb	r3, [r0, #0]
    852e:	42ab      	cmp	r3, r5
    8530:	d00b      	beq.n	854a <memchr+0x52>
    8532:	4404      	add	r4, r0
    8534:	1c43      	adds	r3, r0, #1
    8536:	e002      	b.n	853e <memchr+0x46>
    8538:	7802      	ldrb	r2, [r0, #0]
    853a:	42aa      	cmp	r2, r5
    853c:	d005      	beq.n	854a <memchr+0x52>
    853e:	429c      	cmp	r4, r3
    8540:	4618      	mov	r0, r3
    8542:	f103 0301 	add.w	r3, r3, #1
    8546:	d1f7      	bne.n	8538 <memchr+0x40>
    8548:	2000      	movs	r0, #0
    854a:	bc70      	pop	{r4, r5, r6}
    854c:	4770      	bx	lr
    854e:	0209      	lsls	r1, r1, #8
    8550:	b289      	uxth	r1, r1
    8552:	4329      	orrs	r1, r5
    8554:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    8558:	6803      	ldr	r3, [r0, #0]
    855a:	4606      	mov	r6, r0
    855c:	404b      	eors	r3, r1
    855e:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    8562:	ea22 0303 	bic.w	r3, r2, r3
    8566:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    856a:	f100 0004 	add.w	r0, r0, #4
    856e:	d103      	bne.n	8578 <memchr+0x80>
    8570:	3c04      	subs	r4, #4
    8572:	2c03      	cmp	r4, #3
    8574:	d8f0      	bhi.n	8558 <memchr+0x60>
    8576:	e7d8      	b.n	852a <memchr+0x32>
    8578:	4630      	mov	r0, r6
    857a:	e7d7      	b.n	852c <memchr+0x34>
    857c:	4614      	mov	r4, r2
    857e:	e7d2      	b.n	8526 <memchr+0x2e>
    8580:	4620      	mov	r0, r4
    8582:	e7e2      	b.n	854a <memchr+0x52>

00008584 <__malloc_lock>:
    8584:	4801      	ldr	r0, [pc, #4]	; (858c <__malloc_lock+0x8>)
    8586:	f7ff bd0b 	b.w	7fa0 <__retarget_lock_acquire_recursive>
    858a:	bf00      	nop
    858c:	100034d8 	.word	0x100034d8

00008590 <__malloc_unlock>:
    8590:	4801      	ldr	r0, [pc, #4]	; (8598 <__malloc_unlock+0x8>)
    8592:	f7ff bd0d 	b.w	7fb0 <__retarget_lock_release_recursive>
    8596:	bf00      	nop
    8598:	100034d8 	.word	0x100034d8

0000859c <_Balloc>:
    859c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    859e:	b570      	push	{r4, r5, r6, lr}
    85a0:	4605      	mov	r5, r0
    85a2:	460c      	mov	r4, r1
    85a4:	b14b      	cbz	r3, 85ba <_Balloc+0x1e>
    85a6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    85aa:	b180      	cbz	r0, 85ce <_Balloc+0x32>
    85ac:	6802      	ldr	r2, [r0, #0]
    85ae:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    85b2:	2300      	movs	r3, #0
    85b4:	6103      	str	r3, [r0, #16]
    85b6:	60c3      	str	r3, [r0, #12]
    85b8:	bd70      	pop	{r4, r5, r6, pc}
    85ba:	2221      	movs	r2, #33	; 0x21
    85bc:	2104      	movs	r1, #4
    85be:	f001 fa7d 	bl	9abc <_calloc_r>
    85c2:	64e8      	str	r0, [r5, #76]	; 0x4c
    85c4:	4603      	mov	r3, r0
    85c6:	2800      	cmp	r0, #0
    85c8:	d1ed      	bne.n	85a6 <_Balloc+0xa>
    85ca:	2000      	movs	r0, #0
    85cc:	bd70      	pop	{r4, r5, r6, pc}
    85ce:	2101      	movs	r1, #1
    85d0:	fa01 f604 	lsl.w	r6, r1, r4
    85d4:	1d72      	adds	r2, r6, #5
    85d6:	4628      	mov	r0, r5
    85d8:	0092      	lsls	r2, r2, #2
    85da:	f001 fa6f 	bl	9abc <_calloc_r>
    85de:	2800      	cmp	r0, #0
    85e0:	d0f3      	beq.n	85ca <_Balloc+0x2e>
    85e2:	6044      	str	r4, [r0, #4]
    85e4:	6086      	str	r6, [r0, #8]
    85e6:	e7e4      	b.n	85b2 <_Balloc+0x16>

000085e8 <_Bfree>:
    85e8:	b131      	cbz	r1, 85f8 <_Bfree+0x10>
    85ea:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    85ec:	684a      	ldr	r2, [r1, #4]
    85ee:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    85f2:	6008      	str	r0, [r1, #0]
    85f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    85f8:	4770      	bx	lr
    85fa:	bf00      	nop

000085fc <__multadd>:
    85fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    85fe:	460c      	mov	r4, r1
    8600:	4605      	mov	r5, r0
    8602:	f04f 0e00 	mov.w	lr, #0
    8606:	690e      	ldr	r6, [r1, #16]
    8608:	b083      	sub	sp, #12
    860a:	f101 0714 	add.w	r7, r1, #20
    860e:	6838      	ldr	r0, [r7, #0]
    8610:	f10e 0e01 	add.w	lr, lr, #1
    8614:	b281      	uxth	r1, r0
    8616:	fb02 3301 	mla	r3, r2, r1, r3
    861a:	0c01      	lsrs	r1, r0, #16
    861c:	0c18      	lsrs	r0, r3, #16
    861e:	fb02 0101 	mla	r1, r2, r1, r0
    8622:	b29b      	uxth	r3, r3
    8624:	eb03 4301 	add.w	r3, r3, r1, lsl #16
    8628:	4576      	cmp	r6, lr
    862a:	f847 3b04 	str.w	r3, [r7], #4
    862e:	ea4f 4311 	mov.w	r3, r1, lsr #16
    8632:	dcec      	bgt.n	860e <__multadd+0x12>
    8634:	b13b      	cbz	r3, 8646 <__multadd+0x4a>
    8636:	68a2      	ldr	r2, [r4, #8]
    8638:	4296      	cmp	r6, r2
    863a:	da07      	bge.n	864c <__multadd+0x50>
    863c:	eb04 0286 	add.w	r2, r4, r6, lsl #2
    8640:	3601      	adds	r6, #1
    8642:	6153      	str	r3, [r2, #20]
    8644:	6126      	str	r6, [r4, #16]
    8646:	4620      	mov	r0, r4
    8648:	b003      	add	sp, #12
    864a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    864c:	6861      	ldr	r1, [r4, #4]
    864e:	4628      	mov	r0, r5
    8650:	3101      	adds	r1, #1
    8652:	9301      	str	r3, [sp, #4]
    8654:	f7ff ffa2 	bl	859c <_Balloc>
    8658:	4607      	mov	r7, r0
    865a:	6922      	ldr	r2, [r4, #16]
    865c:	f104 010c 	add.w	r1, r4, #12
    8660:	3202      	adds	r2, #2
    8662:	0092      	lsls	r2, r2, #2
    8664:	300c      	adds	r0, #12
    8666:	f7fd f809 	bl	567c <memcpy>
    866a:	6cea      	ldr	r2, [r5, #76]	; 0x4c
    866c:	6861      	ldr	r1, [r4, #4]
    866e:	9b01      	ldr	r3, [sp, #4]
    8670:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    8674:	6020      	str	r0, [r4, #0]
    8676:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
    867a:	463c      	mov	r4, r7
    867c:	e7de      	b.n	863c <__multadd+0x40>
    867e:	bf00      	nop

00008680 <__s2b>:
    8680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8684:	4c24      	ldr	r4, [pc, #144]	; (8718 <__s2b+0x98>)
    8686:	461f      	mov	r7, r3
    8688:	3308      	adds	r3, #8
    868a:	fb84 4e03 	smull	r4, lr, r4, r3
    868e:	17db      	asrs	r3, r3, #31
    8690:	ebc3 0e6e 	rsb	lr, r3, lr, asr #1
    8694:	f1be 0f01 	cmp.w	lr, #1
    8698:	4605      	mov	r5, r0
    869a:	460c      	mov	r4, r1
    869c:	4690      	mov	r8, r2
    869e:	9e08      	ldr	r6, [sp, #32]
    86a0:	dd35      	ble.n	870e <__s2b+0x8e>
    86a2:	2301      	movs	r3, #1
    86a4:	2100      	movs	r1, #0
    86a6:	005b      	lsls	r3, r3, #1
    86a8:	459e      	cmp	lr, r3
    86aa:	f101 0101 	add.w	r1, r1, #1
    86ae:	dcfa      	bgt.n	86a6 <__s2b+0x26>
    86b0:	4628      	mov	r0, r5
    86b2:	f7ff ff73 	bl	859c <_Balloc>
    86b6:	2301      	movs	r3, #1
    86b8:	f1b8 0f09 	cmp.w	r8, #9
    86bc:	6146      	str	r6, [r0, #20]
    86be:	6103      	str	r3, [r0, #16]
    86c0:	dd21      	ble.n	8706 <__s2b+0x86>
    86c2:	f104 0909 	add.w	r9, r4, #9
    86c6:	464e      	mov	r6, r9
    86c8:	4444      	add	r4, r8
    86ca:	f816 3b01 	ldrb.w	r3, [r6], #1
    86ce:	4601      	mov	r1, r0
    86d0:	3b30      	subs	r3, #48	; 0x30
    86d2:	220a      	movs	r2, #10
    86d4:	4628      	mov	r0, r5
    86d6:	f7ff ff91 	bl	85fc <__multadd>
    86da:	42a6      	cmp	r6, r4
    86dc:	d1f5      	bne.n	86ca <__s2b+0x4a>
    86de:	f1a8 0408 	sub.w	r4, r8, #8
    86e2:	444c      	add	r4, r9
    86e4:	4547      	cmp	r7, r8
    86e6:	dd14      	ble.n	8712 <__s2b+0x92>
    86e8:	eba7 0708 	sub.w	r7, r7, r8
    86ec:	4427      	add	r7, r4
    86ee:	f814 3b01 	ldrb.w	r3, [r4], #1
    86f2:	4601      	mov	r1, r0
    86f4:	3b30      	subs	r3, #48	; 0x30
    86f6:	220a      	movs	r2, #10
    86f8:	4628      	mov	r0, r5
    86fa:	f7ff ff7f 	bl	85fc <__multadd>
    86fe:	42a7      	cmp	r7, r4
    8700:	d1f5      	bne.n	86ee <__s2b+0x6e>
    8702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8706:	340a      	adds	r4, #10
    8708:	f04f 0809 	mov.w	r8, #9
    870c:	e7ea      	b.n	86e4 <__s2b+0x64>
    870e:	2100      	movs	r1, #0
    8710:	e7ce      	b.n	86b0 <__s2b+0x30>
    8712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8716:	bf00      	nop
    8718:	38e38e39 	.word	0x38e38e39

0000871c <__hi0bits>:
    871c:	0c02      	lsrs	r2, r0, #16
    871e:	0412      	lsls	r2, r2, #16
    8720:	4603      	mov	r3, r0
    8722:	b9b2      	cbnz	r2, 8752 <__hi0bits+0x36>
    8724:	0403      	lsls	r3, r0, #16
    8726:	2010      	movs	r0, #16
    8728:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
    872c:	bf04      	itt	eq
    872e:	021b      	lsleq	r3, r3, #8
    8730:	3008      	addeq	r0, #8
    8732:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
    8736:	bf04      	itt	eq
    8738:	011b      	lsleq	r3, r3, #4
    873a:	3004      	addeq	r0, #4
    873c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
    8740:	bf04      	itt	eq
    8742:	009b      	lsleq	r3, r3, #2
    8744:	3002      	addeq	r0, #2
    8746:	2b00      	cmp	r3, #0
    8748:	db02      	blt.n	8750 <__hi0bits+0x34>
    874a:	005b      	lsls	r3, r3, #1
    874c:	d403      	bmi.n	8756 <__hi0bits+0x3a>
    874e:	2020      	movs	r0, #32
    8750:	4770      	bx	lr
    8752:	2000      	movs	r0, #0
    8754:	e7e8      	b.n	8728 <__hi0bits+0xc>
    8756:	3001      	adds	r0, #1
    8758:	4770      	bx	lr
    875a:	bf00      	nop

0000875c <__lo0bits>:
    875c:	6803      	ldr	r3, [r0, #0]
    875e:	4601      	mov	r1, r0
    8760:	f013 0207 	ands.w	r2, r3, #7
    8764:	d007      	beq.n	8776 <__lo0bits+0x1a>
    8766:	07da      	lsls	r2, r3, #31
    8768:	d421      	bmi.n	87ae <__lo0bits+0x52>
    876a:	0798      	lsls	r0, r3, #30
    876c:	d421      	bmi.n	87b2 <__lo0bits+0x56>
    876e:	089b      	lsrs	r3, r3, #2
    8770:	600b      	str	r3, [r1, #0]
    8772:	2002      	movs	r0, #2
    8774:	4770      	bx	lr
    8776:	b298      	uxth	r0, r3
    8778:	b198      	cbz	r0, 87a2 <__lo0bits+0x46>
    877a:	4610      	mov	r0, r2
    877c:	f013 0fff 	tst.w	r3, #255	; 0xff
    8780:	bf04      	itt	eq
    8782:	0a1b      	lsreq	r3, r3, #8
    8784:	3008      	addeq	r0, #8
    8786:	071a      	lsls	r2, r3, #28
    8788:	bf04      	itt	eq
    878a:	091b      	lsreq	r3, r3, #4
    878c:	3004      	addeq	r0, #4
    878e:	079a      	lsls	r2, r3, #30
    8790:	bf04      	itt	eq
    8792:	089b      	lsreq	r3, r3, #2
    8794:	3002      	addeq	r0, #2
    8796:	07da      	lsls	r2, r3, #31
    8798:	d407      	bmi.n	87aa <__lo0bits+0x4e>
    879a:	085b      	lsrs	r3, r3, #1
    879c:	d104      	bne.n	87a8 <__lo0bits+0x4c>
    879e:	2020      	movs	r0, #32
    87a0:	4770      	bx	lr
    87a2:	0c1b      	lsrs	r3, r3, #16
    87a4:	2010      	movs	r0, #16
    87a6:	e7e9      	b.n	877c <__lo0bits+0x20>
    87a8:	3001      	adds	r0, #1
    87aa:	600b      	str	r3, [r1, #0]
    87ac:	4770      	bx	lr
    87ae:	2000      	movs	r0, #0
    87b0:	4770      	bx	lr
    87b2:	085b      	lsrs	r3, r3, #1
    87b4:	600b      	str	r3, [r1, #0]
    87b6:	2001      	movs	r0, #1
    87b8:	4770      	bx	lr
    87ba:	bf00      	nop

000087bc <__i2b>:
    87bc:	b510      	push	{r4, lr}
    87be:	460c      	mov	r4, r1
    87c0:	2101      	movs	r1, #1
    87c2:	f7ff feeb 	bl	859c <_Balloc>
    87c6:	2201      	movs	r2, #1
    87c8:	6144      	str	r4, [r0, #20]
    87ca:	6102      	str	r2, [r0, #16]
    87cc:	bd10      	pop	{r4, pc}
    87ce:	bf00      	nop

000087d0 <__multiply>:
    87d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    87d4:	690c      	ldr	r4, [r1, #16]
    87d6:	6915      	ldr	r5, [r2, #16]
    87d8:	b083      	sub	sp, #12
    87da:	42ac      	cmp	r4, r5
    87dc:	468b      	mov	fp, r1
    87de:	4616      	mov	r6, r2
    87e0:	da04      	bge.n	87ec <__multiply+0x1c>
    87e2:	4622      	mov	r2, r4
    87e4:	46b3      	mov	fp, r6
    87e6:	462c      	mov	r4, r5
    87e8:	460e      	mov	r6, r1
    87ea:	4615      	mov	r5, r2
    87ec:	f8db 3008 	ldr.w	r3, [fp, #8]
    87f0:	eb04 0805 	add.w	r8, r4, r5
    87f4:	f8db 1004 	ldr.w	r1, [fp, #4]
    87f8:	4598      	cmp	r8, r3
    87fa:	bfc8      	it	gt
    87fc:	3101      	addgt	r1, #1
    87fe:	f7ff fecd 	bl	859c <_Balloc>
    8802:	f100 0914 	add.w	r9, r0, #20
    8806:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
    880a:	45d1      	cmp	r9, sl
    880c:	9000      	str	r0, [sp, #0]
    880e:	d205      	bcs.n	881c <__multiply+0x4c>
    8810:	464b      	mov	r3, r9
    8812:	2100      	movs	r1, #0
    8814:	f843 1b04 	str.w	r1, [r3], #4
    8818:	459a      	cmp	sl, r3
    881a:	d8fb      	bhi.n	8814 <__multiply+0x44>
    881c:	f106 0c14 	add.w	ip, r6, #20
    8820:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
    8824:	f10b 0b14 	add.w	fp, fp, #20
    8828:	459c      	cmp	ip, r3
    882a:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
    882e:	d24b      	bcs.n	88c8 <__multiply+0xf8>
    8830:	f8cd a004 	str.w	sl, [sp, #4]
    8834:	469a      	mov	sl, r3
    8836:	f8dc 5000 	ldr.w	r5, [ip]
    883a:	b2af      	uxth	r7, r5
    883c:	b1e7      	cbz	r7, 8878 <__multiply+0xa8>
    883e:	464d      	mov	r5, r9
    8840:	465e      	mov	r6, fp
    8842:	2100      	movs	r1, #0
    8844:	f856 2b04 	ldr.w	r2, [r6], #4
    8848:	6828      	ldr	r0, [r5, #0]
    884a:	b293      	uxth	r3, r2
    884c:	b284      	uxth	r4, r0
    884e:	0c12      	lsrs	r2, r2, #16
    8850:	fb07 4303 	mla	r3, r7, r3, r4
    8854:	0c00      	lsrs	r0, r0, #16
    8856:	fb07 0202 	mla	r2, r7, r2, r0
    885a:	440b      	add	r3, r1
    885c:	eb02 4113 	add.w	r1, r2, r3, lsr #16
    8860:	b29b      	uxth	r3, r3
    8862:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    8866:	45b6      	cmp	lr, r6
    8868:	f845 3b04 	str.w	r3, [r5], #4
    886c:	ea4f 4111 	mov.w	r1, r1, lsr #16
    8870:	d8e8      	bhi.n	8844 <__multiply+0x74>
    8872:	6029      	str	r1, [r5, #0]
    8874:	f8dc 5000 	ldr.w	r5, [ip]
    8878:	0c2d      	lsrs	r5, r5, #16
    887a:	d01d      	beq.n	88b8 <__multiply+0xe8>
    887c:	f8d9 3000 	ldr.w	r3, [r9]
    8880:	4648      	mov	r0, r9
    8882:	461c      	mov	r4, r3
    8884:	4659      	mov	r1, fp
    8886:	2200      	movs	r2, #0
    8888:	880e      	ldrh	r6, [r1, #0]
    888a:	0c24      	lsrs	r4, r4, #16
    888c:	fb05 4406 	mla	r4, r5, r6, r4
    8890:	b29b      	uxth	r3, r3
    8892:	4422      	add	r2, r4
    8894:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    8898:	f840 3b04 	str.w	r3, [r0], #4
    889c:	f851 3b04 	ldr.w	r3, [r1], #4
    88a0:	6804      	ldr	r4, [r0, #0]
    88a2:	0c1b      	lsrs	r3, r3, #16
    88a4:	b2a6      	uxth	r6, r4
    88a6:	fb05 6303 	mla	r3, r5, r3, r6
    88aa:	458e      	cmp	lr, r1
    88ac:	eb03 4312 	add.w	r3, r3, r2, lsr #16
    88b0:	ea4f 4213 	mov.w	r2, r3, lsr #16
    88b4:	d8e8      	bhi.n	8888 <__multiply+0xb8>
    88b6:	6003      	str	r3, [r0, #0]
    88b8:	f10c 0c04 	add.w	ip, ip, #4
    88bc:	45e2      	cmp	sl, ip
    88be:	f109 0904 	add.w	r9, r9, #4
    88c2:	d8b8      	bhi.n	8836 <__multiply+0x66>
    88c4:	f8dd a004 	ldr.w	sl, [sp, #4]
    88c8:	f1b8 0f00 	cmp.w	r8, #0
    88cc:	dd0b      	ble.n	88e6 <__multiply+0x116>
    88ce:	f85a 3c04 	ldr.w	r3, [sl, #-4]
    88d2:	f1aa 0a04 	sub.w	sl, sl, #4
    88d6:	b11b      	cbz	r3, 88e0 <__multiply+0x110>
    88d8:	e005      	b.n	88e6 <__multiply+0x116>
    88da:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
    88de:	b913      	cbnz	r3, 88e6 <__multiply+0x116>
    88e0:	f1b8 0801 	subs.w	r8, r8, #1
    88e4:	d1f9      	bne.n	88da <__multiply+0x10a>
    88e6:	9800      	ldr	r0, [sp, #0]
    88e8:	f8c0 8010 	str.w	r8, [r0, #16]
    88ec:	b003      	add	sp, #12
    88ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    88f2:	bf00      	nop

000088f4 <__pow5mult>:
    88f4:	f012 0303 	ands.w	r3, r2, #3
    88f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    88fc:	4614      	mov	r4, r2
    88fe:	4607      	mov	r7, r0
    8900:	d12e      	bne.n	8960 <__pow5mult+0x6c>
    8902:	460d      	mov	r5, r1
    8904:	10a4      	asrs	r4, r4, #2
    8906:	d01c      	beq.n	8942 <__pow5mult+0x4e>
    8908:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    890a:	b396      	cbz	r6, 8972 <__pow5mult+0x7e>
    890c:	07e3      	lsls	r3, r4, #31
    890e:	f04f 0800 	mov.w	r8, #0
    8912:	d406      	bmi.n	8922 <__pow5mult+0x2e>
    8914:	1064      	asrs	r4, r4, #1
    8916:	d014      	beq.n	8942 <__pow5mult+0x4e>
    8918:	6830      	ldr	r0, [r6, #0]
    891a:	b1a8      	cbz	r0, 8948 <__pow5mult+0x54>
    891c:	4606      	mov	r6, r0
    891e:	07e3      	lsls	r3, r4, #31
    8920:	d5f8      	bpl.n	8914 <__pow5mult+0x20>
    8922:	4632      	mov	r2, r6
    8924:	4629      	mov	r1, r5
    8926:	4638      	mov	r0, r7
    8928:	f7ff ff52 	bl	87d0 <__multiply>
    892c:	b1b5      	cbz	r5, 895c <__pow5mult+0x68>
    892e:	686a      	ldr	r2, [r5, #4]
    8930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8932:	1064      	asrs	r4, r4, #1
    8934:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    8938:	6029      	str	r1, [r5, #0]
    893a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
    893e:	4605      	mov	r5, r0
    8940:	d1ea      	bne.n	8918 <__pow5mult+0x24>
    8942:	4628      	mov	r0, r5
    8944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8948:	4632      	mov	r2, r6
    894a:	4631      	mov	r1, r6
    894c:	4638      	mov	r0, r7
    894e:	f7ff ff3f 	bl	87d0 <__multiply>
    8952:	6030      	str	r0, [r6, #0]
    8954:	f8c0 8000 	str.w	r8, [r0]
    8958:	4606      	mov	r6, r0
    895a:	e7e0      	b.n	891e <__pow5mult+0x2a>
    895c:	4605      	mov	r5, r0
    895e:	e7d9      	b.n	8914 <__pow5mult+0x20>
    8960:	4a0b      	ldr	r2, [pc, #44]	; (8990 <__pow5mult+0x9c>)
    8962:	3b01      	subs	r3, #1
    8964:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    8968:	2300      	movs	r3, #0
    896a:	f7ff fe47 	bl	85fc <__multadd>
    896e:	4605      	mov	r5, r0
    8970:	e7c8      	b.n	8904 <__pow5mult+0x10>
    8972:	2101      	movs	r1, #1
    8974:	4638      	mov	r0, r7
    8976:	f7ff fe11 	bl	859c <_Balloc>
    897a:	f240 2171 	movw	r1, #625	; 0x271
    897e:	2201      	movs	r2, #1
    8980:	2300      	movs	r3, #0
    8982:	6141      	str	r1, [r0, #20]
    8984:	6102      	str	r2, [r0, #16]
    8986:	4606      	mov	r6, r0
    8988:	64b8      	str	r0, [r7, #72]	; 0x48
    898a:	6003      	str	r3, [r0, #0]
    898c:	e7be      	b.n	890c <__pow5mult+0x18>
    898e:	bf00      	nop
    8990:	0000a868 	.word	0x0000a868

00008994 <__lshift>:
    8994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8998:	690b      	ldr	r3, [r1, #16]
    899a:	1154      	asrs	r4, r2, #5
    899c:	eb04 0803 	add.w	r8, r4, r3
    89a0:	688b      	ldr	r3, [r1, #8]
    89a2:	f108 0501 	add.w	r5, r8, #1
    89a6:	429d      	cmp	r5, r3
    89a8:	460e      	mov	r6, r1
    89aa:	4691      	mov	r9, r2
    89ac:	4607      	mov	r7, r0
    89ae:	6849      	ldr	r1, [r1, #4]
    89b0:	dd04      	ble.n	89bc <__lshift+0x28>
    89b2:	005b      	lsls	r3, r3, #1
    89b4:	429d      	cmp	r5, r3
    89b6:	f101 0101 	add.w	r1, r1, #1
    89ba:	dcfa      	bgt.n	89b2 <__lshift+0x1e>
    89bc:	4638      	mov	r0, r7
    89be:	f7ff fded 	bl	859c <_Balloc>
    89c2:	2c00      	cmp	r4, #0
    89c4:	f100 0314 	add.w	r3, r0, #20
    89c8:	dd06      	ble.n	89d8 <__lshift+0x44>
    89ca:	2100      	movs	r1, #0
    89cc:	eb03 0284 	add.w	r2, r3, r4, lsl #2
    89d0:	f843 1b04 	str.w	r1, [r3], #4
    89d4:	429a      	cmp	r2, r3
    89d6:	d1fb      	bne.n	89d0 <__lshift+0x3c>
    89d8:	6934      	ldr	r4, [r6, #16]
    89da:	f106 0114 	add.w	r1, r6, #20
    89de:	f019 091f 	ands.w	r9, r9, #31
    89e2:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
    89e6:	d01d      	beq.n	8a24 <__lshift+0x90>
    89e8:	2200      	movs	r2, #0
    89ea:	f1c9 0c20 	rsb	ip, r9, #32
    89ee:	680c      	ldr	r4, [r1, #0]
    89f0:	fa04 f409 	lsl.w	r4, r4, r9
    89f4:	4314      	orrs	r4, r2
    89f6:	f843 4b04 	str.w	r4, [r3], #4
    89fa:	f851 2b04 	ldr.w	r2, [r1], #4
    89fe:	458e      	cmp	lr, r1
    8a00:	fa22 f20c 	lsr.w	r2, r2, ip
    8a04:	d8f3      	bhi.n	89ee <__lshift+0x5a>
    8a06:	601a      	str	r2, [r3, #0]
    8a08:	b10a      	cbz	r2, 8a0e <__lshift+0x7a>
    8a0a:	f108 0502 	add.w	r5, r8, #2
    8a0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8a10:	6872      	ldr	r2, [r6, #4]
    8a12:	3d01      	subs	r5, #1
    8a14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    8a18:	6105      	str	r5, [r0, #16]
    8a1a:	6031      	str	r1, [r6, #0]
    8a1c:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
    8a20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8a24:	3b04      	subs	r3, #4
    8a26:	f851 2b04 	ldr.w	r2, [r1], #4
    8a2a:	458e      	cmp	lr, r1
    8a2c:	f843 2f04 	str.w	r2, [r3, #4]!
    8a30:	d8f9      	bhi.n	8a26 <__lshift+0x92>
    8a32:	e7ec      	b.n	8a0e <__lshift+0x7a>

00008a34 <__mcmp>:
    8a34:	b430      	push	{r4, r5}
    8a36:	690b      	ldr	r3, [r1, #16]
    8a38:	4605      	mov	r5, r0
    8a3a:	6900      	ldr	r0, [r0, #16]
    8a3c:	1ac0      	subs	r0, r0, r3
    8a3e:	d10f      	bne.n	8a60 <__mcmp+0x2c>
    8a40:	009b      	lsls	r3, r3, #2
    8a42:	3514      	adds	r5, #20
    8a44:	3114      	adds	r1, #20
    8a46:	4419      	add	r1, r3
    8a48:	442b      	add	r3, r5
    8a4a:	e001      	b.n	8a50 <__mcmp+0x1c>
    8a4c:	429d      	cmp	r5, r3
    8a4e:	d207      	bcs.n	8a60 <__mcmp+0x2c>
    8a50:	f853 4d04 	ldr.w	r4, [r3, #-4]!
    8a54:	f851 2d04 	ldr.w	r2, [r1, #-4]!
    8a58:	4294      	cmp	r4, r2
    8a5a:	d0f7      	beq.n	8a4c <__mcmp+0x18>
    8a5c:	d302      	bcc.n	8a64 <__mcmp+0x30>
    8a5e:	2001      	movs	r0, #1
    8a60:	bc30      	pop	{r4, r5}
    8a62:	4770      	bx	lr
    8a64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8a68:	e7fa      	b.n	8a60 <__mcmp+0x2c>
    8a6a:	bf00      	nop

00008a6c <__mdiff>:
    8a6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8a70:	690c      	ldr	r4, [r1, #16]
    8a72:	4689      	mov	r9, r1
    8a74:	6911      	ldr	r1, [r2, #16]
    8a76:	4692      	mov	sl, r2
    8a78:	1a64      	subs	r4, r4, r1
    8a7a:	2c00      	cmp	r4, #0
    8a7c:	d117      	bne.n	8aae <__mdiff+0x42>
    8a7e:	0089      	lsls	r1, r1, #2
    8a80:	f109 0714 	add.w	r7, r9, #20
    8a84:	f102 0614 	add.w	r6, r2, #20
    8a88:	187b      	adds	r3, r7, r1
    8a8a:	4431      	add	r1, r6
    8a8c:	e001      	b.n	8a92 <__mdiff+0x26>
    8a8e:	429f      	cmp	r7, r3
    8a90:	d265      	bcs.n	8b5e <__mdiff+0xf2>
    8a92:	f853 5d04 	ldr.w	r5, [r3, #-4]!
    8a96:	f851 2d04 	ldr.w	r2, [r1, #-4]!
    8a9a:	4295      	cmp	r5, r2
    8a9c:	d0f7      	beq.n	8a8e <__mdiff+0x22>
    8a9e:	d267      	bcs.n	8b70 <__mdiff+0x104>
    8aa0:	464b      	mov	r3, r9
    8aa2:	46bb      	mov	fp, r7
    8aa4:	46d1      	mov	r9, sl
    8aa6:	4637      	mov	r7, r6
    8aa8:	469a      	mov	sl, r3
    8aaa:	2401      	movs	r4, #1
    8aac:	e005      	b.n	8aba <__mdiff+0x4e>
    8aae:	db61      	blt.n	8b74 <__mdiff+0x108>
    8ab0:	2400      	movs	r4, #0
    8ab2:	f109 0714 	add.w	r7, r9, #20
    8ab6:	f10a 0b14 	add.w	fp, sl, #20
    8aba:	f8d9 1004 	ldr.w	r1, [r9, #4]
    8abe:	f7ff fd6d 	bl	859c <_Balloc>
    8ac2:	465d      	mov	r5, fp
    8ac4:	f04f 0800 	mov.w	r8, #0
    8ac8:	f8d9 e010 	ldr.w	lr, [r9, #16]
    8acc:	f8da 3010 	ldr.w	r3, [sl, #16]
    8ad0:	463e      	mov	r6, r7
    8ad2:	60c4      	str	r4, [r0, #12]
    8ad4:	eb0b 0c83 	add.w	ip, fp, r3, lsl #2
    8ad8:	eb07 078e 	add.w	r7, r7, lr, lsl #2
    8adc:	f100 0414 	add.w	r4, r0, #20
    8ae0:	f856 9b04 	ldr.w	r9, [r6], #4
    8ae4:	f855 2b04 	ldr.w	r2, [r5], #4
    8ae8:	fa1f f389 	uxth.w	r3, r9
    8aec:	4443      	add	r3, r8
    8aee:	fa1f f882 	uxth.w	r8, r2
    8af2:	0c12      	lsrs	r2, r2, #16
    8af4:	eba3 0308 	sub.w	r3, r3, r8
    8af8:	ebc2 4219 	rsb	r2, r2, r9, lsr #16
    8afc:	eb02 4223 	add.w	r2, r2, r3, asr #16
    8b00:	b29b      	uxth	r3, r3
    8b02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    8b06:	45ac      	cmp	ip, r5
    8b08:	f844 3b04 	str.w	r3, [r4], #4
    8b0c:	ea4f 4822 	mov.w	r8, r2, asr #16
    8b10:	d8e6      	bhi.n	8ae0 <__mdiff+0x74>
    8b12:	42b7      	cmp	r7, r6
    8b14:	d917      	bls.n	8b46 <__mdiff+0xda>
    8b16:	46a4      	mov	ip, r4
    8b18:	4635      	mov	r5, r6
    8b1a:	f855 3b04 	ldr.w	r3, [r5], #4
    8b1e:	b299      	uxth	r1, r3
    8b20:	4441      	add	r1, r8
    8b22:	140a      	asrs	r2, r1, #16
    8b24:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    8b28:	b289      	uxth	r1, r1
    8b2a:	ea41 4302 	orr.w	r3, r1, r2, lsl #16
    8b2e:	42af      	cmp	r7, r5
    8b30:	f84c 3b04 	str.w	r3, [ip], #4
    8b34:	ea4f 4822 	mov.w	r8, r2, asr #16
    8b38:	d8ef      	bhi.n	8b1a <__mdiff+0xae>
    8b3a:	43f6      	mvns	r6, r6
    8b3c:	4437      	add	r7, r6
    8b3e:	f027 0703 	bic.w	r7, r7, #3
    8b42:	3704      	adds	r7, #4
    8b44:	443c      	add	r4, r7
    8b46:	3c04      	subs	r4, #4
    8b48:	b92b      	cbnz	r3, 8b56 <__mdiff+0xea>
    8b4a:	f854 3d04 	ldr.w	r3, [r4, #-4]!
    8b4e:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
    8b52:	2b00      	cmp	r3, #0
    8b54:	d0f9      	beq.n	8b4a <__mdiff+0xde>
    8b56:	f8c0 e010 	str.w	lr, [r0, #16]
    8b5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8b5e:	2100      	movs	r1, #0
    8b60:	f7ff fd1c 	bl	859c <_Balloc>
    8b64:	2201      	movs	r2, #1
    8b66:	2300      	movs	r3, #0
    8b68:	6102      	str	r2, [r0, #16]
    8b6a:	6143      	str	r3, [r0, #20]
    8b6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8b70:	46b3      	mov	fp, r6
    8b72:	e7a2      	b.n	8aba <__mdiff+0x4e>
    8b74:	464b      	mov	r3, r9
    8b76:	f109 0b14 	add.w	fp, r9, #20
    8b7a:	f102 0714 	add.w	r7, r2, #20
    8b7e:	4691      	mov	r9, r2
    8b80:	2401      	movs	r4, #1
    8b82:	469a      	mov	sl, r3
    8b84:	e799      	b.n	8aba <__mdiff+0x4e>
    8b86:	bf00      	nop

00008b88 <__ulp>:
    8b88:	4b0f      	ldr	r3, [pc, #60]	; (8bc8 <__ulp+0x40>)
    8b8a:	400b      	ands	r3, r1
    8b8c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
    8b90:	2b00      	cmp	r3, #0
    8b92:	dd02      	ble.n	8b9a <__ulp+0x12>
    8b94:	2000      	movs	r0, #0
    8b96:	4619      	mov	r1, r3
    8b98:	4770      	bx	lr
    8b9a:	425b      	negs	r3, r3
    8b9c:	151b      	asrs	r3, r3, #20
    8b9e:	2b13      	cmp	r3, #19
    8ba0:	dd0b      	ble.n	8bba <__ulp+0x32>
    8ba2:	3b14      	subs	r3, #20
    8ba4:	2b1e      	cmp	r3, #30
    8ba6:	bfd7      	itett	le
    8ba8:	2201      	movle	r2, #1
    8baa:	2301      	movgt	r3, #1
    8bac:	f1c3 031f 	rsble	r3, r3, #31
    8bb0:	fa02 f303 	lslle.w	r3, r2, r3
    8bb4:	2100      	movs	r1, #0
    8bb6:	4618      	mov	r0, r3
    8bb8:	4770      	bx	lr
    8bba:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    8bbe:	2000      	movs	r0, #0
    8bc0:	fa42 f103 	asr.w	r1, r2, r3
    8bc4:	4770      	bx	lr
    8bc6:	bf00      	nop
    8bc8:	7ff00000 	.word	0x7ff00000

00008bcc <__b2d>:
    8bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8bd0:	6907      	ldr	r7, [r0, #16]
    8bd2:	f100 0614 	add.w	r6, r0, #20
    8bd6:	eb06 0787 	add.w	r7, r6, r7, lsl #2
    8bda:	f857 8c04 	ldr.w	r8, [r7, #-4]
    8bde:	4640      	mov	r0, r8
    8be0:	f7ff fd9c 	bl	871c <__hi0bits>
    8be4:	f1c0 0320 	rsb	r3, r0, #32
    8be8:	280a      	cmp	r0, #10
    8bea:	600b      	str	r3, [r1, #0]
    8bec:	f1a7 0304 	sub.w	r3, r7, #4
    8bf0:	dc18      	bgt.n	8c24 <__b2d+0x58>
    8bf2:	f1c0 010b 	rsb	r1, r0, #11
    8bf6:	fa28 f201 	lsr.w	r2, r8, r1
    8bfa:	429e      	cmp	r6, r3
    8bfc:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
    8c00:	bf2c      	ite	cs
    8c02:	2200      	movcs	r2, #0
    8c04:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
    8c08:	f100 0315 	add.w	r3, r0, #21
    8c0c:	bf38      	it	cc
    8c0e:	40ca      	lsrcc	r2, r1
    8c10:	fa08 f303 	lsl.w	r3, r8, r3
    8c14:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
    8c18:	ea43 0402 	orr.w	r4, r3, r2
    8c1c:	4620      	mov	r0, r4
    8c1e:	4629      	mov	r1, r5
    8c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8c24:	429e      	cmp	r6, r3
    8c26:	d220      	bcs.n	8c6a <__b2d+0x9e>
    8c28:	f1b0 020b 	subs.w	r2, r0, #11
    8c2c:	f857 3c08 	ldr.w	r3, [r7, #-8]
    8c30:	d01f      	beq.n	8c72 <__b2d+0xa6>
    8c32:	fa08 f802 	lsl.w	r8, r8, r2
    8c36:	f048 587f 	orr.w	r8, r8, #1069547520	; 0x3fc00000
    8c3a:	f1c2 0e20 	rsb	lr, r2, #32
    8c3e:	f1a7 0108 	sub.w	r1, r7, #8
    8c42:	f448 1840 	orr.w	r8, r8, #3145728	; 0x300000
    8c46:	fa23 f00e 	lsr.w	r0, r3, lr
    8c4a:	428e      	cmp	r6, r1
    8c4c:	ea48 0500 	orr.w	r5, r8, r0
    8c50:	d221      	bcs.n	8c96 <__b2d+0xca>
    8c52:	f857 1c0c 	ldr.w	r1, [r7, #-12]
    8c56:	fa03 f002 	lsl.w	r0, r3, r2
    8c5a:	fa21 f20e 	lsr.w	r2, r1, lr
    8c5e:	4302      	orrs	r2, r0
    8c60:	4614      	mov	r4, r2
    8c62:	4620      	mov	r0, r4
    8c64:	4629      	mov	r1, r5
    8c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8c6a:	f1b0 020b 	subs.w	r2, r0, #11
    8c6e:	d109      	bne.n	8c84 <__b2d+0xb8>
    8c70:	4613      	mov	r3, r2
    8c72:	461c      	mov	r4, r3
    8c74:	f048 557f 	orr.w	r5, r8, #1069547520	; 0x3fc00000
    8c78:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
    8c7c:	4620      	mov	r0, r4
    8c7e:	4629      	mov	r1, r5
    8c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8c84:	fa08 f002 	lsl.w	r0, r8, r2
    8c88:	2200      	movs	r2, #0
    8c8a:	f040 557f 	orr.w	r5, r0, #1069547520	; 0x3fc00000
    8c8e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
    8c92:	4614      	mov	r4, r2
    8c94:	e7e5      	b.n	8c62 <__b2d+0x96>
    8c96:	fa03 f202 	lsl.w	r2, r3, r2
    8c9a:	4614      	mov	r4, r2
    8c9c:	e7e1      	b.n	8c62 <__b2d+0x96>
    8c9e:	bf00      	nop

00008ca0 <__d2b>:
    8ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
    8ca2:	2101      	movs	r1, #1
    8ca4:	b083      	sub	sp, #12
    8ca6:	461c      	mov	r4, r3
    8ca8:	f3c3 550a 	ubfx	r5, r3, #20, #11
    8cac:	4616      	mov	r6, r2
    8cae:	f7ff fc75 	bl	859c <_Balloc>
    8cb2:	f3c4 0413 	ubfx	r4, r4, #0, #20
    8cb6:	4607      	mov	r7, r0
    8cb8:	b10d      	cbz	r5, 8cbe <__d2b+0x1e>
    8cba:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
    8cbe:	9401      	str	r4, [sp, #4]
    8cc0:	b306      	cbz	r6, 8d04 <__d2b+0x64>
    8cc2:	a802      	add	r0, sp, #8
    8cc4:	f840 6d08 	str.w	r6, [r0, #-8]!
    8cc8:	f7ff fd48 	bl	875c <__lo0bits>
    8ccc:	2800      	cmp	r0, #0
    8cce:	d130      	bne.n	8d32 <__d2b+0x92>
    8cd0:	e89d 000c 	ldmia.w	sp, {r2, r3}
    8cd4:	617a      	str	r2, [r7, #20]
    8cd6:	2b00      	cmp	r3, #0
    8cd8:	bf0c      	ite	eq
    8cda:	2101      	moveq	r1, #1
    8cdc:	2102      	movne	r1, #2
    8cde:	61bb      	str	r3, [r7, #24]
    8ce0:	6139      	str	r1, [r7, #16]
    8ce2:	b9d5      	cbnz	r5, 8d1a <__d2b+0x7a>
    8ce4:	9a08      	ldr	r2, [sp, #32]
    8ce6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
    8cea:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
    8cee:	6010      	str	r0, [r2, #0]
    8cf0:	6918      	ldr	r0, [r3, #16]
    8cf2:	f7ff fd13 	bl	871c <__hi0bits>
    8cf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8cf8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
    8cfc:	6018      	str	r0, [r3, #0]
    8cfe:	4638      	mov	r0, r7
    8d00:	b003      	add	sp, #12
    8d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8d04:	a801      	add	r0, sp, #4
    8d06:	f7ff fd29 	bl	875c <__lo0bits>
    8d0a:	2201      	movs	r2, #1
    8d0c:	9b01      	ldr	r3, [sp, #4]
    8d0e:	4611      	mov	r1, r2
    8d10:	3020      	adds	r0, #32
    8d12:	613a      	str	r2, [r7, #16]
    8d14:	617b      	str	r3, [r7, #20]
    8d16:	2d00      	cmp	r5, #0
    8d18:	d0e4      	beq.n	8ce4 <__d2b+0x44>
    8d1a:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
    8d1e:	9a08      	ldr	r2, [sp, #32]
    8d20:	4403      	add	r3, r0
    8d22:	6013      	str	r3, [r2, #0]
    8d24:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8d26:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
    8d2a:	6018      	str	r0, [r3, #0]
    8d2c:	4638      	mov	r0, r7
    8d2e:	b003      	add	sp, #12
    8d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8d32:	9b01      	ldr	r3, [sp, #4]
    8d34:	f1c0 0220 	rsb	r2, r0, #32
    8d38:	9900      	ldr	r1, [sp, #0]
    8d3a:	fa03 f202 	lsl.w	r2, r3, r2
    8d3e:	430a      	orrs	r2, r1
    8d40:	40c3      	lsrs	r3, r0
    8d42:	9301      	str	r3, [sp, #4]
    8d44:	617a      	str	r2, [r7, #20]
    8d46:	e7c6      	b.n	8cd6 <__d2b+0x36>

00008d48 <__ratio>:
    8d48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8d4c:	b083      	sub	sp, #12
    8d4e:	460f      	mov	r7, r1
    8d50:	4669      	mov	r1, sp
    8d52:	4606      	mov	r6, r0
    8d54:	f7ff ff3a 	bl	8bcc <__b2d>
    8d58:	4604      	mov	r4, r0
    8d5a:	460d      	mov	r5, r1
    8d5c:	4638      	mov	r0, r7
    8d5e:	a901      	add	r1, sp, #4
    8d60:	f7ff ff34 	bl	8bcc <__b2d>
    8d64:	6936      	ldr	r6, [r6, #16]
    8d66:	693a      	ldr	r2, [r7, #16]
    8d68:	4689      	mov	r9, r1
    8d6a:	e89d 000a 	ldmia.w	sp, {r1, r3}
    8d6e:	1ab6      	subs	r6, r6, r2
    8d70:	1acb      	subs	r3, r1, r3
    8d72:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    8d76:	2b00      	cmp	r3, #0
    8d78:	4680      	mov	r8, r0
    8d7a:	dd0b      	ble.n	8d94 <__ratio+0x4c>
    8d7c:	eb05 5703 	add.w	r7, r5, r3, lsl #20
    8d80:	463d      	mov	r5, r7
    8d82:	4642      	mov	r2, r8
    8d84:	464b      	mov	r3, r9
    8d86:	4620      	mov	r0, r4
    8d88:	4629      	mov	r1, r5
    8d8a:	f7fc f947 	bl	501c <__aeabi_ddiv>
    8d8e:	b003      	add	sp, #12
    8d90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    8d94:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
    8d98:	eb09 5103 	add.w	r1, r9, r3, lsl #20
    8d9c:	4689      	mov	r9, r1
    8d9e:	e7f0      	b.n	8d82 <__ratio+0x3a>

00008da0 <_mprec_log10>:
    8da0:	2817      	cmp	r0, #23
    8da2:	b5d0      	push	{r4, r6, r7, lr}
    8da4:	4604      	mov	r4, r0
    8da6:	dd0a      	ble.n	8dbe <_mprec_log10+0x1e>
    8da8:	2000      	movs	r0, #0
    8daa:	2600      	movs	r6, #0
    8dac:	4907      	ldr	r1, [pc, #28]	; (8dcc <_mprec_log10+0x2c>)
    8dae:	4f08      	ldr	r7, [pc, #32]	; (8dd0 <_mprec_log10+0x30>)
    8db0:	4632      	mov	r2, r6
    8db2:	463b      	mov	r3, r7
    8db4:	f7fc f808 	bl	4dc8 <__aeabi_dmul>
    8db8:	3c01      	subs	r4, #1
    8dba:	d1f9      	bne.n	8db0 <_mprec_log10+0x10>
    8dbc:	bdd0      	pop	{r4, r6, r7, pc}
    8dbe:	4b05      	ldr	r3, [pc, #20]	; (8dd4 <_mprec_log10+0x34>)
    8dc0:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
    8dc4:	e9d4 0100 	ldrd	r0, r1, [r4]
    8dc8:	bdd0      	pop	{r4, r6, r7, pc}
    8dca:	bf00      	nop
    8dcc:	3ff00000 	.word	0x3ff00000
    8dd0:	40240000 	.word	0x40240000
    8dd4:	0000a778 	.word	0x0000a778

00008dd8 <__copybits>:
    8dd8:	b470      	push	{r4, r5, r6}
    8dda:	6914      	ldr	r4, [r2, #16]
    8ddc:	1e4e      	subs	r6, r1, #1
    8dde:	f102 0314 	add.w	r3, r2, #20
    8de2:	1176      	asrs	r6, r6, #5
    8de4:	eb03 0184 	add.w	r1, r3, r4, lsl #2
    8de8:	3601      	adds	r6, #1
    8dea:	428b      	cmp	r3, r1
    8dec:	eb00 0686 	add.w	r6, r0, r6, lsl #2
    8df0:	d20c      	bcs.n	8e0c <__copybits+0x34>
    8df2:	1f04      	subs	r4, r0, #4
    8df4:	f853 5b04 	ldr.w	r5, [r3], #4
    8df8:	4299      	cmp	r1, r3
    8dfa:	f844 5f04 	str.w	r5, [r4, #4]!
    8dfe:	d8f9      	bhi.n	8df4 <__copybits+0x1c>
    8e00:	1a8b      	subs	r3, r1, r2
    8e02:	3b15      	subs	r3, #21
    8e04:	f023 0303 	bic.w	r3, r3, #3
    8e08:	3304      	adds	r3, #4
    8e0a:	4418      	add	r0, r3
    8e0c:	4286      	cmp	r6, r0
    8e0e:	d904      	bls.n	8e1a <__copybits+0x42>
    8e10:	2300      	movs	r3, #0
    8e12:	f840 3b04 	str.w	r3, [r0], #4
    8e16:	4286      	cmp	r6, r0
    8e18:	d8fb      	bhi.n	8e12 <__copybits+0x3a>
    8e1a:	bc70      	pop	{r4, r5, r6}
    8e1c:	4770      	bx	lr
    8e1e:	bf00      	nop

00008e20 <__any_on>:
    8e20:	6903      	ldr	r3, [r0, #16]
    8e22:	114a      	asrs	r2, r1, #5
    8e24:	4293      	cmp	r3, r2
    8e26:	b410      	push	{r4}
    8e28:	f100 0414 	add.w	r4, r0, #20
    8e2c:	da0f      	bge.n	8e4e <__any_on+0x2e>
    8e2e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    8e32:	429c      	cmp	r4, r3
    8e34:	d21f      	bcs.n	8e76 <__any_on+0x56>
    8e36:	f853 0c04 	ldr.w	r0, [r3, #-4]
    8e3a:	3b04      	subs	r3, #4
    8e3c:	b118      	cbz	r0, 8e46 <__any_on+0x26>
    8e3e:	e014      	b.n	8e6a <__any_on+0x4a>
    8e40:	f853 2d04 	ldr.w	r2, [r3, #-4]!
    8e44:	b98a      	cbnz	r2, 8e6a <__any_on+0x4a>
    8e46:	429c      	cmp	r4, r3
    8e48:	d3fa      	bcc.n	8e40 <__any_on+0x20>
    8e4a:	bc10      	pop	{r4}
    8e4c:	4770      	bx	lr
    8e4e:	dd0f      	ble.n	8e70 <__any_on+0x50>
    8e50:	f011 011f 	ands.w	r1, r1, #31
    8e54:	d00c      	beq.n	8e70 <__any_on+0x50>
    8e56:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
    8e5a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    8e5e:	fa20 f201 	lsr.w	r2, r0, r1
    8e62:	fa02 f101 	lsl.w	r1, r2, r1
    8e66:	4288      	cmp	r0, r1
    8e68:	d0e3      	beq.n	8e32 <__any_on+0x12>
    8e6a:	2001      	movs	r0, #1
    8e6c:	bc10      	pop	{r4}
    8e6e:	4770      	bx	lr
    8e70:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    8e74:	e7dd      	b.n	8e32 <__any_on+0x12>
    8e76:	2000      	movs	r0, #0
    8e78:	e7e7      	b.n	8e4a <__any_on+0x2a>
    8e7a:	bf00      	nop

00008e7c <_sbrk_r>:
    8e7c:	b538      	push	{r3, r4, r5, lr}
    8e7e:	2300      	movs	r3, #0
    8e80:	4c06      	ldr	r4, [pc, #24]	; (8e9c <_sbrk_r+0x20>)
    8e82:	4605      	mov	r5, r0
    8e84:	4608      	mov	r0, r1
    8e86:	6023      	str	r3, [r4, #0]
    8e88:	f001 fb94 	bl	a5b4 <_sbrk>
    8e8c:	1c43      	adds	r3, r0, #1
    8e8e:	d000      	beq.n	8e92 <_sbrk_r+0x16>
    8e90:	bd38      	pop	{r3, r4, r5, pc}
    8e92:	6823      	ldr	r3, [r4, #0]
    8e94:	2b00      	cmp	r3, #0
    8e96:	d0fb      	beq.n	8e90 <_sbrk_r+0x14>
    8e98:	602b      	str	r3, [r5, #0]
    8e9a:	bd38      	pop	{r3, r4, r5, pc}
    8e9c:	100034ec 	.word	0x100034ec

00008ea0 <__ssprint_r>:
    8ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8ea4:	6893      	ldr	r3, [r2, #8]
    8ea6:	b083      	sub	sp, #12
    8ea8:	4690      	mov	r8, r2
    8eaa:	2b00      	cmp	r3, #0
    8eac:	d070      	beq.n	8f90 <__ssprint_r+0xf0>
    8eae:	4682      	mov	sl, r0
    8eb0:	460c      	mov	r4, r1
    8eb2:	6817      	ldr	r7, [r2, #0]
    8eb4:	688d      	ldr	r5, [r1, #8]
    8eb6:	6808      	ldr	r0, [r1, #0]
    8eb8:	e042      	b.n	8f40 <__ssprint_r+0xa0>
    8eba:	89a3      	ldrh	r3, [r4, #12]
    8ebc:	f413 6f90 	tst.w	r3, #1152	; 0x480
    8ec0:	d02e      	beq.n	8f20 <__ssprint_r+0x80>
    8ec2:	6965      	ldr	r5, [r4, #20]
    8ec4:	6921      	ldr	r1, [r4, #16]
    8ec6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    8eca:	eba0 0b01 	sub.w	fp, r0, r1
    8ece:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
    8ed2:	f10b 0001 	add.w	r0, fp, #1
    8ed6:	106d      	asrs	r5, r5, #1
    8ed8:	4430      	add	r0, r6
    8eda:	42a8      	cmp	r0, r5
    8edc:	462a      	mov	r2, r5
    8ede:	bf84      	itt	hi
    8ee0:	4605      	movhi	r5, r0
    8ee2:	462a      	movhi	r2, r5
    8ee4:	055b      	lsls	r3, r3, #21
    8ee6:	d538      	bpl.n	8f5a <__ssprint_r+0xba>
    8ee8:	4611      	mov	r1, r2
    8eea:	4650      	mov	r0, sl
    8eec:	f7ff f862 	bl	7fb4 <_malloc_r>
    8ef0:	2800      	cmp	r0, #0
    8ef2:	d03c      	beq.n	8f6e <__ssprint_r+0xce>
    8ef4:	465a      	mov	r2, fp
    8ef6:	6921      	ldr	r1, [r4, #16]
    8ef8:	9001      	str	r0, [sp, #4]
    8efa:	f7fc fbbf 	bl	567c <memcpy>
    8efe:	89a2      	ldrh	r2, [r4, #12]
    8f00:	9b01      	ldr	r3, [sp, #4]
    8f02:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    8f06:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    8f0a:	81a2      	strh	r2, [r4, #12]
    8f0c:	eba5 020b 	sub.w	r2, r5, fp
    8f10:	eb03 000b 	add.w	r0, r3, fp
    8f14:	6165      	str	r5, [r4, #20]
    8f16:	46b3      	mov	fp, r6
    8f18:	4635      	mov	r5, r6
    8f1a:	6123      	str	r3, [r4, #16]
    8f1c:	6020      	str	r0, [r4, #0]
    8f1e:	60a2      	str	r2, [r4, #8]
    8f20:	465a      	mov	r2, fp
    8f22:	4649      	mov	r1, r9
    8f24:	f000 ffa0 	bl	9e68 <memmove>
    8f28:	f8d8 3008 	ldr.w	r3, [r8, #8]
    8f2c:	68a2      	ldr	r2, [r4, #8]
    8f2e:	6820      	ldr	r0, [r4, #0]
    8f30:	1b55      	subs	r5, r2, r5
    8f32:	4458      	add	r0, fp
    8f34:	1b9e      	subs	r6, r3, r6
    8f36:	60a5      	str	r5, [r4, #8]
    8f38:	6020      	str	r0, [r4, #0]
    8f3a:	f8c8 6008 	str.w	r6, [r8, #8]
    8f3e:	b33e      	cbz	r6, 8f90 <__ssprint_r+0xf0>
    8f40:	687e      	ldr	r6, [r7, #4]
    8f42:	463b      	mov	r3, r7
    8f44:	3708      	adds	r7, #8
    8f46:	2e00      	cmp	r6, #0
    8f48:	d0fa      	beq.n	8f40 <__ssprint_r+0xa0>
    8f4a:	42ae      	cmp	r6, r5
    8f4c:	f8d3 9000 	ldr.w	r9, [r3]
    8f50:	46ab      	mov	fp, r5
    8f52:	d2b2      	bcs.n	8eba <__ssprint_r+0x1a>
    8f54:	4635      	mov	r5, r6
    8f56:	46b3      	mov	fp, r6
    8f58:	e7e2      	b.n	8f20 <__ssprint_r+0x80>
    8f5a:	4650      	mov	r0, sl
    8f5c:	f000 ffe8 	bl	9f30 <_realloc_r>
    8f60:	4603      	mov	r3, r0
    8f62:	2800      	cmp	r0, #0
    8f64:	d1d2      	bne.n	8f0c <__ssprint_r+0x6c>
    8f66:	6921      	ldr	r1, [r4, #16]
    8f68:	4650      	mov	r0, sl
    8f6a:	f000 fe27 	bl	9bbc <_free_r>
    8f6e:	230c      	movs	r3, #12
    8f70:	2200      	movs	r2, #0
    8f72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8f76:	f8ca 3000 	str.w	r3, [sl]
    8f7a:	89a3      	ldrh	r3, [r4, #12]
    8f7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8f80:	81a3      	strh	r3, [r4, #12]
    8f82:	f8c8 2008 	str.w	r2, [r8, #8]
    8f86:	f8c8 2004 	str.w	r2, [r8, #4]
    8f8a:	b003      	add	sp, #12
    8f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8f90:	2000      	movs	r0, #0
    8f92:	f8c8 0004 	str.w	r0, [r8, #4]
    8f96:	b003      	add	sp, #12
    8f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00008f9c <_svfiprintf_r>:
    8f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8fa0:	b0ad      	sub	sp, #180	; 0xb4
    8fa2:	460c      	mov	r4, r1
    8fa4:	9105      	str	r1, [sp, #20]
    8fa6:	8989      	ldrh	r1, [r1, #12]
    8fa8:	9307      	str	r3, [sp, #28]
    8faa:	060d      	lsls	r5, r1, #24
    8fac:	900a      	str	r0, [sp, #40]	; 0x28
    8fae:	d503      	bpl.n	8fb8 <_svfiprintf_r+0x1c>
    8fb0:	6923      	ldr	r3, [r4, #16]
    8fb2:	2b00      	cmp	r3, #0
    8fb4:	f000 84d9 	beq.w	996a <_svfiprintf_r+0x9ce>
    8fb8:	2300      	movs	r3, #0
    8fba:	f10d 0970 	add.w	r9, sp, #112	; 0x70
    8fbe:	4693      	mov	fp, r2
    8fc0:	46ca      	mov	sl, r9
    8fc2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    8fc4:	930b      	str	r3, [sp, #44]	; 0x2c
    8fc6:	9302      	str	r3, [sp, #8]
    8fc8:	9311      	str	r3, [sp, #68]	; 0x44
    8fca:	9310      	str	r3, [sp, #64]	; 0x40
    8fcc:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
    8fd0:	f89b 3000 	ldrb.w	r3, [fp]
    8fd4:	465c      	mov	r4, fp
    8fd6:	b1eb      	cbz	r3, 9014 <_svfiprintf_r+0x78>
    8fd8:	2b25      	cmp	r3, #37	; 0x25
    8fda:	d102      	bne.n	8fe2 <_svfiprintf_r+0x46>
    8fdc:	e01a      	b.n	9014 <_svfiprintf_r+0x78>
    8fde:	2b25      	cmp	r3, #37	; 0x25
    8fe0:	d003      	beq.n	8fea <_svfiprintf_r+0x4e>
    8fe2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    8fe6:	2b00      	cmp	r3, #0
    8fe8:	d1f9      	bne.n	8fde <_svfiprintf_r+0x42>
    8fea:	eba4 050b 	sub.w	r5, r4, fp
    8fee:	b18d      	cbz	r5, 9014 <_svfiprintf_r+0x78>
    8ff0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8ff2:	9a11      	ldr	r2, [sp, #68]	; 0x44
    8ff4:	3301      	adds	r3, #1
    8ff6:	442a      	add	r2, r5
    8ff8:	2b07      	cmp	r3, #7
    8ffa:	f8ca b000 	str.w	fp, [sl]
    8ffe:	f8ca 5004 	str.w	r5, [sl, #4]
    9002:	9211      	str	r2, [sp, #68]	; 0x44
    9004:	9310      	str	r3, [sp, #64]	; 0x40
    9006:	f300 83cd 	bgt.w	97a4 <_svfiprintf_r+0x808>
    900a:	f10a 0a08 	add.w	sl, sl, #8
    900e:	9b02      	ldr	r3, [sp, #8]
    9010:	442b      	add	r3, r5
    9012:	9302      	str	r3, [sp, #8]
    9014:	7823      	ldrb	r3, [r4, #0]
    9016:	2b00      	cmp	r3, #0
    9018:	f000 8356 	beq.w	96c8 <_svfiprintf_r+0x72c>
    901c:	2000      	movs	r0, #0
    901e:	f04f 0300 	mov.w	r3, #0
    9022:	f104 0b01 	add.w	fp, r4, #1
    9026:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    902a:	7862      	ldrb	r2, [r4, #1]
    902c:	4605      	mov	r5, r0
    902e:	4603      	mov	r3, r0
    9030:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    9034:	4604      	mov	r4, r0
    9036:	f10b 0b01 	add.w	fp, fp, #1
    903a:	f1a2 0120 	sub.w	r1, r2, #32
    903e:	2958      	cmp	r1, #88	; 0x58
    9040:	f200 8267 	bhi.w	9512 <_svfiprintf_r+0x576>
    9044:	e8df f011 	tbh	[pc, r1, lsl #1]
    9048:	026500bb 	.word	0x026500bb
    904c:	00b60265 	.word	0x00b60265
    9050:	02650265 	.word	0x02650265
    9054:	02650265 	.word	0x02650265
    9058:	02650265 	.word	0x02650265
    905c:	00b10059 	.word	0x00b10059
    9060:	00610265 	.word	0x00610265
    9064:	0265024b 	.word	0x0265024b
    9068:	01ad0246 	.word	0x01ad0246
    906c:	01ad01ad 	.word	0x01ad01ad
    9070:	01ad01ad 	.word	0x01ad01ad
    9074:	01ad01ad 	.word	0x01ad01ad
    9078:	01ad01ad 	.word	0x01ad01ad
    907c:	02650265 	.word	0x02650265
    9080:	02650265 	.word	0x02650265
    9084:	02650265 	.word	0x02650265
    9088:	02650265 	.word	0x02650265
    908c:	02650265 	.word	0x02650265
    9090:	0265015f 	.word	0x0265015f
    9094:	02650265 	.word	0x02650265
    9098:	02650265 	.word	0x02650265
    909c:	02650265 	.word	0x02650265
    90a0:	02650265 	.word	0x02650265
    90a4:	014d0265 	.word	0x014d0265
    90a8:	02650265 	.word	0x02650265
    90ac:	02650265 	.word	0x02650265
    90b0:	013c0265 	.word	0x013c0265
    90b4:	02650265 	.word	0x02650265
    90b8:	02650125 	.word	0x02650125
    90bc:	02650265 	.word	0x02650265
    90c0:	02650265 	.word	0x02650265
    90c4:	02650265 	.word	0x02650265
    90c8:	02650265 	.word	0x02650265
    90cc:	00c30265 	.word	0x00c30265
    90d0:	026501e1 	.word	0x026501e1
    90d4:	02650265 	.word	0x02650265
    90d8:	01e101dc 	.word	0x01e101dc
    90dc:	02650265 	.word	0x02650265
    90e0:	026501cf 	.word	0x026501cf
    90e4:	007801bb 	.word	0x007801bb
    90e8:	02100215 	.word	0x02100215
    90ec:	01e70265 	.word	0x01e70265
    90f0:	00660265 	.word	0x00660265
    90f4:	02650265 	.word	0x02650265
    90f8:	008d      	.short	0x008d
    90fa:	9907      	ldr	r1, [sp, #28]
    90fc:	460a      	mov	r2, r1
    90fe:	680c      	ldr	r4, [r1, #0]
    9100:	3204      	adds	r2, #4
    9102:	2c00      	cmp	r4, #0
    9104:	9207      	str	r2, [sp, #28]
    9106:	da02      	bge.n	910e <_svfiprintf_r+0x172>
    9108:	4264      	negs	r4, r4
    910a:	f043 0304 	orr.w	r3, r3, #4
    910e:	f89b 2000 	ldrb.w	r2, [fp]
    9112:	e790      	b.n	9036 <_svfiprintf_r+0x9a>
    9114:	9406      	str	r4, [sp, #24]
    9116:	069c      	lsls	r4, r3, #26
    9118:	f100 80d8 	bmi.w	92cc <_svfiprintf_r+0x330>
    911c:	9907      	ldr	r1, [sp, #28]
    911e:	06d8      	lsls	r0, r3, #27
    9120:	460a      	mov	r2, r1
    9122:	f100 820f 	bmi.w	9544 <_svfiprintf_r+0x5a8>
    9126:	065e      	lsls	r6, r3, #25
    9128:	f140 820c 	bpl.w	9544 <_svfiprintf_r+0x5a8>
    912c:	880c      	ldrh	r4, [r1, #0]
    912e:	3104      	adds	r1, #4
    9130:	2500      	movs	r5, #0
    9132:	2201      	movs	r2, #1
    9134:	9107      	str	r1, [sp, #28]
    9136:	e1ad      	b.n	9494 <_svfiprintf_r+0x4f8>
    9138:	f013 0220 	ands.w	r2, r3, #32
    913c:	9406      	str	r4, [sp, #24]
    913e:	f040 80d7 	bne.w	92f0 <_svfiprintf_r+0x354>
    9142:	f013 0110 	ands.w	r1, r3, #16
    9146:	f040 81f6 	bne.w	9536 <_svfiprintf_r+0x59a>
    914a:	f013 0240 	ands.w	r2, r3, #64	; 0x40
    914e:	f000 81f2 	beq.w	9536 <_svfiprintf_r+0x59a>
    9152:	9807      	ldr	r0, [sp, #28]
    9154:	460a      	mov	r2, r1
    9156:	4601      	mov	r1, r0
    9158:	3104      	adds	r1, #4
    915a:	8804      	ldrh	r4, [r0, #0]
    915c:	2500      	movs	r5, #0
    915e:	9107      	str	r1, [sp, #28]
    9160:	e198      	b.n	9494 <_svfiprintf_r+0x4f8>
    9162:	9406      	str	r4, [sp, #24]
    9164:	2800      	cmp	r0, #0
    9166:	f040 843d 	bne.w	99e4 <_svfiprintf_r+0xa48>
    916a:	49bc      	ldr	r1, [pc, #752]	; (945c <_svfiprintf_r+0x4c0>)
    916c:	069d      	lsls	r5, r3, #26
    916e:	910b      	str	r1, [sp, #44]	; 0x2c
    9170:	f100 8098 	bmi.w	92a4 <_svfiprintf_r+0x308>
    9174:	9807      	ldr	r0, [sp, #28]
    9176:	06dc      	lsls	r4, r3, #27
    9178:	4601      	mov	r1, r0
    917a:	d402      	bmi.n	9182 <_svfiprintf_r+0x1e6>
    917c:	0658      	lsls	r0, r3, #25
    917e:	f100 83a2 	bmi.w	98c6 <_svfiprintf_r+0x92a>
    9182:	2500      	movs	r5, #0
    9184:	680c      	ldr	r4, [r1, #0]
    9186:	3104      	adds	r1, #4
    9188:	9107      	str	r1, [sp, #28]
    918a:	07d9      	lsls	r1, r3, #31
    918c:	f140 8096 	bpl.w	92bc <_svfiprintf_r+0x320>
    9190:	ea54 0105 	orrs.w	r1, r4, r5
    9194:	f000 8092 	beq.w	92bc <_svfiprintf_r+0x320>
    9198:	2130      	movs	r1, #48	; 0x30
    919a:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
    919e:	f043 0302 	orr.w	r3, r3, #2
    91a2:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
    91a6:	2202      	movs	r2, #2
    91a8:	e174      	b.n	9494 <_svfiprintf_r+0x4f8>
    91aa:	f89b 2000 	ldrb.w	r2, [fp]
    91ae:	2001      	movs	r0, #1
    91b0:	252b      	movs	r5, #43	; 0x2b
    91b2:	e740      	b.n	9036 <_svfiprintf_r+0x9a>
    91b4:	f043 0301 	orr.w	r3, r3, #1
    91b8:	f89b 2000 	ldrb.w	r2, [fp]
    91bc:	e73b      	b.n	9036 <_svfiprintf_r+0x9a>
    91be:	f89b 2000 	ldrb.w	r2, [fp]
    91c2:	2d00      	cmp	r5, #0
    91c4:	f47f af37 	bne.w	9036 <_svfiprintf_r+0x9a>
    91c8:	2001      	movs	r0, #1
    91ca:	2520      	movs	r5, #32
    91cc:	e733      	b.n	9036 <_svfiprintf_r+0x9a>
    91ce:	2201      	movs	r2, #1
    91d0:	9807      	ldr	r0, [sp, #28]
    91d2:	4611      	mov	r1, r2
    91d4:	9200      	str	r2, [sp, #0]
    91d6:	6802      	ldr	r2, [r0, #0]
    91d8:	9406      	str	r4, [sp, #24]
    91da:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
    91de:	4602      	mov	r2, r0
    91e0:	f04f 0400 	mov.w	r4, #0
    91e4:	3204      	adds	r2, #4
    91e6:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
    91ea:	9104      	str	r1, [sp, #16]
    91ec:	9207      	str	r2, [sp, #28]
    91ee:	ae12      	add	r6, sp, #72	; 0x48
    91f0:	f04f 0800 	mov.w	r8, #0
    91f4:	9301      	str	r3, [sp, #4]
    91f6:	9b01      	ldr	r3, [sp, #4]
    91f8:	f013 0302 	ands.w	r3, r3, #2
    91fc:	9308      	str	r3, [sp, #32]
    91fe:	d002      	beq.n	9206 <_svfiprintf_r+0x26a>
    9200:	9b00      	ldr	r3, [sp, #0]
    9202:	3302      	adds	r3, #2
    9204:	9300      	str	r3, [sp, #0]
    9206:	9b01      	ldr	r3, [sp, #4]
    9208:	f013 0384 	ands.w	r3, r3, #132	; 0x84
    920c:	9309      	str	r3, [sp, #36]	; 0x24
    920e:	f040 81a8 	bne.w	9562 <_svfiprintf_r+0x5c6>
    9212:	9b06      	ldr	r3, [sp, #24]
    9214:	9a00      	ldr	r2, [sp, #0]
    9216:	1a9c      	subs	r4, r3, r2
    9218:	2c00      	cmp	r4, #0
    921a:	f340 81a2 	ble.w	9562 <_svfiprintf_r+0x5c6>
    921e:	2c10      	cmp	r4, #16
    9220:	f340 83b1 	ble.w	9986 <_svfiprintf_r+0x9ea>
    9224:	4650      	mov	r0, sl
    9226:	2310      	movs	r3, #16
    9228:	46c2      	mov	sl, r8
    922a:	9911      	ldr	r1, [sp, #68]	; 0x44
    922c:	46b0      	mov	r8, r6
    922e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    9230:	4d8b      	ldr	r5, [pc, #556]	; (9460 <_svfiprintf_r+0x4c4>)
    9232:	9e05      	ldr	r6, [sp, #20]
    9234:	e004      	b.n	9240 <_svfiprintf_r+0x2a4>
    9236:	3c10      	subs	r4, #16
    9238:	2c10      	cmp	r4, #16
    923a:	f100 0008 	add.w	r0, r0, #8
    923e:	dd17      	ble.n	9270 <_svfiprintf_r+0x2d4>
    9240:	3201      	adds	r2, #1
    9242:	3110      	adds	r1, #16
    9244:	2a07      	cmp	r2, #7
    9246:	9111      	str	r1, [sp, #68]	; 0x44
    9248:	9210      	str	r2, [sp, #64]	; 0x40
    924a:	6005      	str	r5, [r0, #0]
    924c:	6043      	str	r3, [r0, #4]
    924e:	ddf2      	ble.n	9236 <_svfiprintf_r+0x29a>
    9250:	aa0f      	add	r2, sp, #60	; 0x3c
    9252:	4631      	mov	r1, r6
    9254:	4638      	mov	r0, r7
    9256:	9303      	str	r3, [sp, #12]
    9258:	f7ff fe22 	bl	8ea0 <__ssprint_r>
    925c:	2800      	cmp	r0, #0
    925e:	f040 823a 	bne.w	96d6 <_svfiprintf_r+0x73a>
    9262:	3c10      	subs	r4, #16
    9264:	2c10      	cmp	r4, #16
    9266:	4648      	mov	r0, r9
    9268:	9911      	ldr	r1, [sp, #68]	; 0x44
    926a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    926c:	9b03      	ldr	r3, [sp, #12]
    926e:	dce7      	bgt.n	9240 <_svfiprintf_r+0x2a4>
    9270:	4646      	mov	r6, r8
    9272:	46d0      	mov	r8, sl
    9274:	4682      	mov	sl, r0
    9276:	1c53      	adds	r3, r2, #1
    9278:	4421      	add	r1, r4
    927a:	2b07      	cmp	r3, #7
    927c:	9111      	str	r1, [sp, #68]	; 0x44
    927e:	9310      	str	r3, [sp, #64]	; 0x40
    9280:	f8ca 5000 	str.w	r5, [sl]
    9284:	f8ca 4004 	str.w	r4, [sl, #4]
    9288:	f300 8162 	bgt.w	9550 <_svfiprintf_r+0x5b4>
    928c:	f10a 0a08 	add.w	sl, sl, #8
    9290:	e169      	b.n	9566 <_svfiprintf_r+0x5ca>
    9292:	9406      	str	r4, [sp, #24]
    9294:	2800      	cmp	r0, #0
    9296:	f040 8398 	bne.w	99ca <_svfiprintf_r+0xa2e>
    929a:	4972      	ldr	r1, [pc, #456]	; (9464 <_svfiprintf_r+0x4c8>)
    929c:	069d      	lsls	r5, r3, #26
    929e:	910b      	str	r1, [sp, #44]	; 0x2c
    92a0:	f57f af68 	bpl.w	9174 <_svfiprintf_r+0x1d8>
    92a4:	9c07      	ldr	r4, [sp, #28]
    92a6:	3407      	adds	r4, #7
    92a8:	f024 0107 	bic.w	r1, r4, #7
    92ac:	f101 0008 	add.w	r0, r1, #8
    92b0:	e9d1 4500 	ldrd	r4, r5, [r1]
    92b4:	07d9      	lsls	r1, r3, #31
    92b6:	9007      	str	r0, [sp, #28]
    92b8:	f53f af6a 	bmi.w	9190 <_svfiprintf_r+0x1f4>
    92bc:	2202      	movs	r2, #2
    92be:	e0e9      	b.n	9494 <_svfiprintf_r+0x4f8>
    92c0:	f043 0310 	orr.w	r3, r3, #16
    92c4:	9406      	str	r4, [sp, #24]
    92c6:	069c      	lsls	r4, r3, #26
    92c8:	f57f af28 	bpl.w	911c <_svfiprintf_r+0x180>
    92cc:	9c07      	ldr	r4, [sp, #28]
    92ce:	3407      	adds	r4, #7
    92d0:	f024 0207 	bic.w	r2, r4, #7
    92d4:	f102 0108 	add.w	r1, r2, #8
    92d8:	e9d2 4500 	ldrd	r4, r5, [r2]
    92dc:	9107      	str	r1, [sp, #28]
    92de:	2201      	movs	r2, #1
    92e0:	e0d8      	b.n	9494 <_svfiprintf_r+0x4f8>
    92e2:	f043 0310 	orr.w	r3, r3, #16
    92e6:	f013 0220 	ands.w	r2, r3, #32
    92ea:	9406      	str	r4, [sp, #24]
    92ec:	f43f af29 	beq.w	9142 <_svfiprintf_r+0x1a6>
    92f0:	9c07      	ldr	r4, [sp, #28]
    92f2:	3407      	adds	r4, #7
    92f4:	f024 0207 	bic.w	r2, r4, #7
    92f8:	f102 0108 	add.w	r1, r2, #8
    92fc:	e9d2 4500 	ldrd	r4, r5, [r2]
    9300:	9107      	str	r1, [sp, #28]
    9302:	2200      	movs	r2, #0
    9304:	e0c6      	b.n	9494 <_svfiprintf_r+0x4f8>
    9306:	9406      	str	r4, [sp, #24]
    9308:	2800      	cmp	r0, #0
    930a:	f040 8358 	bne.w	99be <_svfiprintf_r+0xa22>
    930e:	f043 0310 	orr.w	r3, r3, #16
    9312:	069c      	lsls	r4, r3, #26
    9314:	f100 82f2 	bmi.w	98fc <_svfiprintf_r+0x960>
    9318:	9907      	ldr	r1, [sp, #28]
    931a:	06d8      	lsls	r0, r3, #27
    931c:	460a      	mov	r2, r1
    931e:	d402      	bmi.n	9326 <_svfiprintf_r+0x38a>
    9320:	0659      	lsls	r1, r3, #25
    9322:	f100 82bb 	bmi.w	989c <_svfiprintf_r+0x900>
    9326:	6814      	ldr	r4, [r2, #0]
    9328:	3204      	adds	r2, #4
    932a:	17e5      	asrs	r5, r4, #31
    932c:	4620      	mov	r0, r4
    932e:	4629      	mov	r1, r5
    9330:	9207      	str	r2, [sp, #28]
    9332:	2800      	cmp	r0, #0
    9334:	f171 0200 	sbcs.w	r2, r1, #0
    9338:	f2c0 82bc 	blt.w	98b4 <_svfiprintf_r+0x918>
    933c:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
    9340:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    9344:	9203      	str	r2, [sp, #12]
    9346:	f04f 0201 	mov.w	r2, #1
    934a:	f040 80ab 	bne.w	94a4 <_svfiprintf_r+0x508>
    934e:	ea54 0105 	orrs.w	r1, r4, r5
    9352:	f000 821e 	beq.w	9792 <_svfiprintf_r+0x7f6>
    9356:	9301      	str	r3, [sp, #4]
    9358:	2a01      	cmp	r2, #1
    935a:	f000 8275 	beq.w	9848 <_svfiprintf_r+0x8ac>
    935e:	2a02      	cmp	r2, #2
    9360:	f040 8237 	bne.w	97d2 <_svfiprintf_r+0x836>
    9364:	464e      	mov	r6, r9
    9366:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9368:	0923      	lsrs	r3, r4, #4
    936a:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
    936e:	0929      	lsrs	r1, r5, #4
    9370:	f004 020f 	and.w	r2, r4, #15
    9374:	460d      	mov	r5, r1
    9376:	461c      	mov	r4, r3
    9378:	5c83      	ldrb	r3, [r0, r2]
    937a:	f806 3d01 	strb.w	r3, [r6, #-1]!
    937e:	ea54 0305 	orrs.w	r3, r4, r5
    9382:	d1f1      	bne.n	9368 <_svfiprintf_r+0x3cc>
    9384:	eba9 0306 	sub.w	r3, r9, r6
    9388:	9304      	str	r3, [sp, #16]
    938a:	9b04      	ldr	r3, [sp, #16]
    938c:	9a03      	ldr	r2, [sp, #12]
    938e:	4543      	cmp	r3, r8
    9390:	bfb8      	it	lt
    9392:	4643      	movlt	r3, r8
    9394:	9300      	str	r3, [sp, #0]
    9396:	2a00      	cmp	r2, #0
    9398:	f43f af2d 	beq.w	91f6 <_svfiprintf_r+0x25a>
    939c:	3301      	adds	r3, #1
    939e:	9300      	str	r3, [sp, #0]
    93a0:	e729      	b.n	91f6 <_svfiprintf_r+0x25a>
    93a2:	2400      	movs	r4, #0
    93a4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    93a8:	f81b 2b01 	ldrb.w	r2, [fp], #1
    93ac:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    93b0:	eb01 0444 	add.w	r4, r1, r4, lsl #1
    93b4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    93b8:	2909      	cmp	r1, #9
    93ba:	d9f5      	bls.n	93a8 <_svfiprintf_r+0x40c>
    93bc:	e63d      	b.n	903a <_svfiprintf_r+0x9e>
    93be:	2800      	cmp	r0, #0
    93c0:	f040 8300 	bne.w	99c4 <_svfiprintf_r+0xa28>
    93c4:	069a      	lsls	r2, r3, #26
    93c6:	f100 8283 	bmi.w	98d0 <_svfiprintf_r+0x934>
    93ca:	06de      	lsls	r6, r3, #27
    93cc:	f100 82ae 	bmi.w	992c <_svfiprintf_r+0x990>
    93d0:	065d      	lsls	r5, r3, #25
    93d2:	f140 82ab 	bpl.w	992c <_svfiprintf_r+0x990>
    93d6:	9a07      	ldr	r2, [sp, #28]
    93d8:	6813      	ldr	r3, [r2, #0]
    93da:	3204      	adds	r2, #4
    93dc:	9207      	str	r2, [sp, #28]
    93de:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    93e2:	801a      	strh	r2, [r3, #0]
    93e4:	e5f4      	b.n	8fd0 <_svfiprintf_r+0x34>
    93e6:	f89b 2000 	ldrb.w	r2, [fp]
    93ea:	2a6c      	cmp	r2, #108	; 0x6c
    93ec:	bf03      	ittte	eq
    93ee:	f89b 2001 	ldrbeq.w	r2, [fp, #1]
    93f2:	f043 0320 	orreq.w	r3, r3, #32
    93f6:	f10b 0b01 	addeq.w	fp, fp, #1
    93fa:	f043 0310 	orrne.w	r3, r3, #16
    93fe:	e61a      	b.n	9036 <_svfiprintf_r+0x9a>
    9400:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9404:	f89b 2000 	ldrb.w	r2, [fp]
    9408:	e615      	b.n	9036 <_svfiprintf_r+0x9a>
    940a:	9406      	str	r4, [sp, #24]
    940c:	2800      	cmp	r0, #0
    940e:	d080      	beq.n	9312 <_svfiprintf_r+0x376>
    9410:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
    9414:	e77d      	b.n	9312 <_svfiprintf_r+0x376>
    9416:	f04f 0200 	mov.w	r2, #0
    941a:	9907      	ldr	r1, [sp, #28]
    941c:	9406      	str	r4, [sp, #24]
    941e:	680e      	ldr	r6, [r1, #0]
    9420:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
    9424:	1d0c      	adds	r4, r1, #4
    9426:	2e00      	cmp	r6, #0
    9428:	f000 8296 	beq.w	9958 <_svfiprintf_r+0x9bc>
    942c:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    9430:	f000 8286 	beq.w	9940 <_svfiprintf_r+0x9a4>
    9434:	4642      	mov	r2, r8
    9436:	2100      	movs	r1, #0
    9438:	4630      	mov	r0, r6
    943a:	9300      	str	r3, [sp, #0]
    943c:	f7ff f85c 	bl	84f8 <memchr>
    9440:	9b00      	ldr	r3, [sp, #0]
    9442:	2800      	cmp	r0, #0
    9444:	f000 82a6 	beq.w	9994 <_svfiprintf_r+0x9f8>
    9448:	9301      	str	r3, [sp, #4]
    944a:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    944e:	1b82      	subs	r2, r0, r6
    9450:	9204      	str	r2, [sp, #16]
    9452:	9407      	str	r4, [sp, #28]
    9454:	9303      	str	r3, [sp, #12]
    9456:	f04f 0800 	mov.w	r8, #0
    945a:	e796      	b.n	938a <_svfiprintf_r+0x3ee>
    945c:	0000a700 	.word	0x0000a700
    9460:	0000a874 	.word	0x0000a874
    9464:	0000a6ec 	.word	0x0000a6ec
    9468:	f043 0320 	orr.w	r3, r3, #32
    946c:	f89b 2000 	ldrb.w	r2, [fp]
    9470:	e5e1      	b.n	9036 <_svfiprintf_r+0x9a>
    9472:	2278      	movs	r2, #120	; 0x78
    9474:	9d07      	ldr	r5, [sp, #28]
    9476:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
    947a:	1d2a      	adds	r2, r5, #4
    947c:	9207      	str	r2, [sp, #28]
    947e:	4ab8      	ldr	r2, [pc, #736]	; (9760 <_svfiprintf_r+0x7c4>)
    9480:	2130      	movs	r1, #48	; 0x30
    9482:	9406      	str	r4, [sp, #24]
    9484:	920b      	str	r2, [sp, #44]	; 0x2c
    9486:	682c      	ldr	r4, [r5, #0]
    9488:	2202      	movs	r2, #2
    948a:	2500      	movs	r5, #0
    948c:	f043 0302 	orr.w	r3, r3, #2
    9490:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
    9494:	2100      	movs	r1, #0
    9496:	9103      	str	r1, [sp, #12]
    9498:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
    949c:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    94a0:	f43f af55 	beq.w	934e <_svfiprintf_r+0x3b2>
    94a4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
    94a8:	9101      	str	r1, [sp, #4]
    94aa:	ea54 0105 	orrs.w	r1, r4, r5
    94ae:	f47f af53 	bne.w	9358 <_svfiprintf_r+0x3bc>
    94b2:	f1b8 0f00 	cmp.w	r8, #0
    94b6:	f040 816b 	bne.w	9790 <_svfiprintf_r+0x7f4>
    94ba:	2a00      	cmp	r2, #0
    94bc:	f040 81de 	bne.w	987c <_svfiprintf_r+0x8e0>
    94c0:	f013 0301 	ands.w	r3, r3, #1
    94c4:	9304      	str	r3, [sp, #16]
    94c6:	f000 81e7 	beq.w	9898 <_svfiprintf_r+0x8fc>
    94ca:	2330      	movs	r3, #48	; 0x30
    94cc:	ae2c      	add	r6, sp, #176	; 0xb0
    94ce:	f806 3d41 	strb.w	r3, [r6, #-65]!
    94d2:	e75a      	b.n	938a <_svfiprintf_r+0x3ee>
    94d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    94d8:	f89b 2000 	ldrb.w	r2, [fp]
    94dc:	e5ab      	b.n	9036 <_svfiprintf_r+0x9a>
    94de:	f89b 2000 	ldrb.w	r2, [fp]
    94e2:	f10b 0601 	add.w	r6, fp, #1
    94e6:	2a2a      	cmp	r2, #42	; 0x2a
    94e8:	f000 825d 	beq.w	99a6 <_svfiprintf_r+0xa0a>
    94ec:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    94f0:	2909      	cmp	r1, #9
    94f2:	46b3      	mov	fp, r6
    94f4:	f04f 0800 	mov.w	r8, #0
    94f8:	f63f ad9f 	bhi.w	903a <_svfiprintf_r+0x9e>
    94fc:	f81b 2b01 	ldrb.w	r2, [fp], #1
    9500:	eb08 0888 	add.w	r8, r8, r8, lsl #2
    9504:	eb01 0848 	add.w	r8, r1, r8, lsl #1
    9508:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    950c:	2909      	cmp	r1, #9
    950e:	d9f5      	bls.n	94fc <_svfiprintf_r+0x560>
    9510:	e593      	b.n	903a <_svfiprintf_r+0x9e>
    9512:	9406      	str	r4, [sp, #24]
    9514:	2800      	cmp	r0, #0
    9516:	f040 8262 	bne.w	99de <_svfiprintf_r+0xa42>
    951a:	2a00      	cmp	r2, #0
    951c:	f000 80d4 	beq.w	96c8 <_svfiprintf_r+0x72c>
    9520:	2101      	movs	r1, #1
    9522:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
    9526:	f04f 0200 	mov.w	r2, #0
    952a:	9100      	str	r1, [sp, #0]
    952c:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
    9530:	9104      	str	r1, [sp, #16]
    9532:	ae12      	add	r6, sp, #72	; 0x48
    9534:	e65c      	b.n	91f0 <_svfiprintf_r+0x254>
    9536:	9807      	ldr	r0, [sp, #28]
    9538:	2500      	movs	r5, #0
    953a:	4601      	mov	r1, r0
    953c:	3104      	adds	r1, #4
    953e:	6804      	ldr	r4, [r0, #0]
    9540:	9107      	str	r1, [sp, #28]
    9542:	e7a7      	b.n	9494 <_svfiprintf_r+0x4f8>
    9544:	3104      	adds	r1, #4
    9546:	6814      	ldr	r4, [r2, #0]
    9548:	2500      	movs	r5, #0
    954a:	2201      	movs	r2, #1
    954c:	9107      	str	r1, [sp, #28]
    954e:	e7a1      	b.n	9494 <_svfiprintf_r+0x4f8>
    9550:	aa0f      	add	r2, sp, #60	; 0x3c
    9552:	9905      	ldr	r1, [sp, #20]
    9554:	4638      	mov	r0, r7
    9556:	f7ff fca3 	bl	8ea0 <__ssprint_r>
    955a:	2800      	cmp	r0, #0
    955c:	f040 80bb 	bne.w	96d6 <_svfiprintf_r+0x73a>
    9560:	46ca      	mov	sl, r9
    9562:	9911      	ldr	r1, [sp, #68]	; 0x44
    9564:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9566:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
    956a:	b17a      	cbz	r2, 958c <_svfiprintf_r+0x5f0>
    956c:	2001      	movs	r0, #1
    956e:	4403      	add	r3, r0
    9570:	4401      	add	r1, r0
    9572:	f10d 0237 	add.w	r2, sp, #55	; 0x37
    9576:	2b07      	cmp	r3, #7
    9578:	9111      	str	r1, [sp, #68]	; 0x44
    957a:	9310      	str	r3, [sp, #64]	; 0x40
    957c:	f8ca 0004 	str.w	r0, [sl, #4]
    9580:	f8ca 2000 	str.w	r2, [sl]
    9584:	f300 8148 	bgt.w	9818 <_svfiprintf_r+0x87c>
    9588:	f10a 0a08 	add.w	sl, sl, #8
    958c:	9a08      	ldr	r2, [sp, #32]
    958e:	b172      	cbz	r2, 95ae <_svfiprintf_r+0x612>
    9590:	2002      	movs	r0, #2
    9592:	3301      	adds	r3, #1
    9594:	4401      	add	r1, r0
    9596:	aa0e      	add	r2, sp, #56	; 0x38
    9598:	2b07      	cmp	r3, #7
    959a:	9111      	str	r1, [sp, #68]	; 0x44
    959c:	9310      	str	r3, [sp, #64]	; 0x40
    959e:	f8ca 0004 	str.w	r0, [sl, #4]
    95a2:	f8ca 2000 	str.w	r2, [sl]
    95a6:	f300 8143 	bgt.w	9830 <_svfiprintf_r+0x894>
    95aa:	f10a 0a08 	add.w	sl, sl, #8
    95ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
    95b0:	2a80      	cmp	r2, #128	; 0x80
    95b2:	f000 809d 	beq.w	96f0 <_svfiprintf_r+0x754>
    95b6:	9a04      	ldr	r2, [sp, #16]
    95b8:	eba8 0502 	sub.w	r5, r8, r2
    95bc:	2d00      	cmp	r5, #0
    95be:	dd32      	ble.n	9626 <_svfiprintf_r+0x68a>
    95c0:	2d10      	cmp	r5, #16
    95c2:	f340 81bb 	ble.w	993c <_svfiprintf_r+0x9a0>
    95c6:	4c67      	ldr	r4, [pc, #412]	; (9764 <_svfiprintf_r+0x7c8>)
    95c8:	4652      	mov	r2, sl
    95ca:	f04f 0810 	mov.w	r8, #16
    95ce:	46b2      	mov	sl, r6
    95d0:	4626      	mov	r6, r4
    95d2:	9c05      	ldr	r4, [sp, #20]
    95d4:	e004      	b.n	95e0 <_svfiprintf_r+0x644>
    95d6:	3d10      	subs	r5, #16
    95d8:	2d10      	cmp	r5, #16
    95da:	f102 0208 	add.w	r2, r2, #8
    95de:	dd14      	ble.n	960a <_svfiprintf_r+0x66e>
    95e0:	3301      	adds	r3, #1
    95e2:	3110      	adds	r1, #16
    95e4:	2b07      	cmp	r3, #7
    95e6:	9111      	str	r1, [sp, #68]	; 0x44
    95e8:	9310      	str	r3, [sp, #64]	; 0x40
    95ea:	e882 0140 	stmia.w	r2, {r6, r8}
    95ee:	ddf2      	ble.n	95d6 <_svfiprintf_r+0x63a>
    95f0:	aa0f      	add	r2, sp, #60	; 0x3c
    95f2:	4621      	mov	r1, r4
    95f4:	4638      	mov	r0, r7
    95f6:	f7ff fc53 	bl	8ea0 <__ssprint_r>
    95fa:	2800      	cmp	r0, #0
    95fc:	d16b      	bne.n	96d6 <_svfiprintf_r+0x73a>
    95fe:	3d10      	subs	r5, #16
    9600:	2d10      	cmp	r5, #16
    9602:	464a      	mov	r2, r9
    9604:	9911      	ldr	r1, [sp, #68]	; 0x44
    9606:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9608:	dcea      	bgt.n	95e0 <_svfiprintf_r+0x644>
    960a:	4634      	mov	r4, r6
    960c:	4656      	mov	r6, sl
    960e:	4692      	mov	sl, r2
    9610:	3301      	adds	r3, #1
    9612:	4429      	add	r1, r5
    9614:	2b07      	cmp	r3, #7
    9616:	9111      	str	r1, [sp, #68]	; 0x44
    9618:	9310      	str	r3, [sp, #64]	; 0x40
    961a:	e88a 0030 	stmia.w	sl, {r4, r5}
    961e:	f300 80ca 	bgt.w	97b6 <_svfiprintf_r+0x81a>
    9622:	f10a 0a08 	add.w	sl, sl, #8
    9626:	9804      	ldr	r0, [sp, #16]
    9628:	3301      	adds	r3, #1
    962a:	4401      	add	r1, r0
    962c:	2b07      	cmp	r3, #7
    962e:	9111      	str	r1, [sp, #68]	; 0x44
    9630:	9310      	str	r3, [sp, #64]	; 0x40
    9632:	f8ca 6000 	str.w	r6, [sl]
    9636:	f8ca 0004 	str.w	r0, [sl, #4]
    963a:	f300 8097 	bgt.w	976c <_svfiprintf_r+0x7d0>
    963e:	f10a 0a08 	add.w	sl, sl, #8
    9642:	9b01      	ldr	r3, [sp, #4]
    9644:	075b      	lsls	r3, r3, #29
    9646:	d531      	bpl.n	96ac <_svfiprintf_r+0x710>
    9648:	9b06      	ldr	r3, [sp, #24]
    964a:	9a00      	ldr	r2, [sp, #0]
    964c:	1a9c      	subs	r4, r3, r2
    964e:	2c00      	cmp	r4, #0
    9650:	dd2c      	ble.n	96ac <_svfiprintf_r+0x710>
    9652:	2c10      	cmp	r4, #16
    9654:	f340 819b 	ble.w	998e <_svfiprintf_r+0x9f2>
    9658:	2610      	movs	r6, #16
    965a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    965c:	4d42      	ldr	r5, [pc, #264]	; (9768 <_svfiprintf_r+0x7cc>)
    965e:	f8dd 8014 	ldr.w	r8, [sp, #20]
    9662:	e004      	b.n	966e <_svfiprintf_r+0x6d2>
    9664:	3c10      	subs	r4, #16
    9666:	2c10      	cmp	r4, #16
    9668:	f10a 0a08 	add.w	sl, sl, #8
    966c:	dd13      	ble.n	9696 <_svfiprintf_r+0x6fa>
    966e:	3301      	adds	r3, #1
    9670:	3110      	adds	r1, #16
    9672:	2b07      	cmp	r3, #7
    9674:	9111      	str	r1, [sp, #68]	; 0x44
    9676:	9310      	str	r3, [sp, #64]	; 0x40
    9678:	e88a 0060 	stmia.w	sl, {r5, r6}
    967c:	ddf2      	ble.n	9664 <_svfiprintf_r+0x6c8>
    967e:	aa0f      	add	r2, sp, #60	; 0x3c
    9680:	4641      	mov	r1, r8
    9682:	4638      	mov	r0, r7
    9684:	f7ff fc0c 	bl	8ea0 <__ssprint_r>
    9688:	bb28      	cbnz	r0, 96d6 <_svfiprintf_r+0x73a>
    968a:	3c10      	subs	r4, #16
    968c:	2c10      	cmp	r4, #16
    968e:	46ca      	mov	sl, r9
    9690:	9911      	ldr	r1, [sp, #68]	; 0x44
    9692:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9694:	dceb      	bgt.n	966e <_svfiprintf_r+0x6d2>
    9696:	3301      	adds	r3, #1
    9698:	4421      	add	r1, r4
    969a:	2b07      	cmp	r3, #7
    969c:	9111      	str	r1, [sp, #68]	; 0x44
    969e:	9310      	str	r3, [sp, #64]	; 0x40
    96a0:	f8ca 5000 	str.w	r5, [sl]
    96a4:	f8ca 4004 	str.w	r4, [sl, #4]
    96a8:	f300 80ec 	bgt.w	9884 <_svfiprintf_r+0x8e8>
    96ac:	9b02      	ldr	r3, [sp, #8]
    96ae:	9a06      	ldr	r2, [sp, #24]
    96b0:	9800      	ldr	r0, [sp, #0]
    96b2:	4282      	cmp	r2, r0
    96b4:	bfac      	ite	ge
    96b6:	189b      	addge	r3, r3, r2
    96b8:	181b      	addlt	r3, r3, r0
    96ba:	9302      	str	r3, [sp, #8]
    96bc:	2900      	cmp	r1, #0
    96be:	d15f      	bne.n	9780 <_svfiprintf_r+0x7e4>
    96c0:	2300      	movs	r3, #0
    96c2:	46ca      	mov	sl, r9
    96c4:	9310      	str	r3, [sp, #64]	; 0x40
    96c6:	e483      	b.n	8fd0 <_svfiprintf_r+0x34>
    96c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    96ca:	b123      	cbz	r3, 96d6 <_svfiprintf_r+0x73a>
    96cc:	980a      	ldr	r0, [sp, #40]	; 0x28
    96ce:	aa0f      	add	r2, sp, #60	; 0x3c
    96d0:	9905      	ldr	r1, [sp, #20]
    96d2:	f7ff fbe5 	bl	8ea0 <__ssprint_r>
    96d6:	9b05      	ldr	r3, [sp, #20]
    96d8:	899b      	ldrh	r3, [r3, #12]
    96da:	f013 0f40 	tst.w	r3, #64	; 0x40
    96de:	9b02      	ldr	r3, [sp, #8]
    96e0:	bf18      	it	ne
    96e2:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
    96e6:	9302      	str	r3, [sp, #8]
    96e8:	9802      	ldr	r0, [sp, #8]
    96ea:	b02d      	add	sp, #180	; 0xb4
    96ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    96f0:	9a06      	ldr	r2, [sp, #24]
    96f2:	9800      	ldr	r0, [sp, #0]
    96f4:	1a15      	subs	r5, r2, r0
    96f6:	2d00      	cmp	r5, #0
    96f8:	f77f af5d 	ble.w	95b6 <_svfiprintf_r+0x61a>
    96fc:	2d10      	cmp	r5, #16
    96fe:	4c19      	ldr	r4, [pc, #100]	; (9764 <_svfiprintf_r+0x7c8>)
    9700:	dd22      	ble.n	9748 <_svfiprintf_r+0x7ac>
    9702:	4652      	mov	r2, sl
    9704:	46b2      	mov	sl, r6
    9706:	4626      	mov	r6, r4
    9708:	9c05      	ldr	r4, [sp, #20]
    970a:	e004      	b.n	9716 <_svfiprintf_r+0x77a>
    970c:	3d10      	subs	r5, #16
    970e:	2d10      	cmp	r5, #16
    9710:	f102 0208 	add.w	r2, r2, #8
    9714:	dd15      	ble.n	9742 <_svfiprintf_r+0x7a6>
    9716:	2010      	movs	r0, #16
    9718:	3301      	adds	r3, #1
    971a:	3110      	adds	r1, #16
    971c:	2b07      	cmp	r3, #7
    971e:	9111      	str	r1, [sp, #68]	; 0x44
    9720:	9310      	str	r3, [sp, #64]	; 0x40
    9722:	6016      	str	r6, [r2, #0]
    9724:	6050      	str	r0, [r2, #4]
    9726:	ddf1      	ble.n	970c <_svfiprintf_r+0x770>
    9728:	aa0f      	add	r2, sp, #60	; 0x3c
    972a:	4621      	mov	r1, r4
    972c:	4638      	mov	r0, r7
    972e:	f7ff fbb7 	bl	8ea0 <__ssprint_r>
    9732:	2800      	cmp	r0, #0
    9734:	d1cf      	bne.n	96d6 <_svfiprintf_r+0x73a>
    9736:	3d10      	subs	r5, #16
    9738:	2d10      	cmp	r5, #16
    973a:	464a      	mov	r2, r9
    973c:	9911      	ldr	r1, [sp, #68]	; 0x44
    973e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9740:	dce9      	bgt.n	9716 <_svfiprintf_r+0x77a>
    9742:	4634      	mov	r4, r6
    9744:	4656      	mov	r6, sl
    9746:	4692      	mov	sl, r2
    9748:	3301      	adds	r3, #1
    974a:	4429      	add	r1, r5
    974c:	2b07      	cmp	r3, #7
    974e:	9111      	str	r1, [sp, #68]	; 0x44
    9750:	9310      	str	r3, [sp, #64]	; 0x40
    9752:	e88a 0030 	stmia.w	sl, {r4, r5}
    9756:	f300 80dd 	bgt.w	9914 <_svfiprintf_r+0x978>
    975a:	f10a 0a08 	add.w	sl, sl, #8
    975e:	e72a      	b.n	95b6 <_svfiprintf_r+0x61a>
    9760:	0000a700 	.word	0x0000a700
    9764:	0000a884 	.word	0x0000a884
    9768:	0000a874 	.word	0x0000a874
    976c:	aa0f      	add	r2, sp, #60	; 0x3c
    976e:	9905      	ldr	r1, [sp, #20]
    9770:	4638      	mov	r0, r7
    9772:	f7ff fb95 	bl	8ea0 <__ssprint_r>
    9776:	2800      	cmp	r0, #0
    9778:	d1ad      	bne.n	96d6 <_svfiprintf_r+0x73a>
    977a:	46ca      	mov	sl, r9
    977c:	9911      	ldr	r1, [sp, #68]	; 0x44
    977e:	e760      	b.n	9642 <_svfiprintf_r+0x6a6>
    9780:	aa0f      	add	r2, sp, #60	; 0x3c
    9782:	9905      	ldr	r1, [sp, #20]
    9784:	4638      	mov	r0, r7
    9786:	f7ff fb8b 	bl	8ea0 <__ssprint_r>
    978a:	2800      	cmp	r0, #0
    978c:	d098      	beq.n	96c0 <_svfiprintf_r+0x724>
    978e:	e7a2      	b.n	96d6 <_svfiprintf_r+0x73a>
    9790:	9b01      	ldr	r3, [sp, #4]
    9792:	2a01      	cmp	r2, #1
    9794:	f000 80aa 	beq.w	98ec <_svfiprintf_r+0x950>
    9798:	2a02      	cmp	r2, #2
    979a:	d117      	bne.n	97cc <_svfiprintf_r+0x830>
    979c:	9301      	str	r3, [sp, #4]
    979e:	2400      	movs	r4, #0
    97a0:	2500      	movs	r5, #0
    97a2:	e5df      	b.n	9364 <_svfiprintf_r+0x3c8>
    97a4:	aa0f      	add	r2, sp, #60	; 0x3c
    97a6:	9905      	ldr	r1, [sp, #20]
    97a8:	4638      	mov	r0, r7
    97aa:	f7ff fb79 	bl	8ea0 <__ssprint_r>
    97ae:	2800      	cmp	r0, #0
    97b0:	d191      	bne.n	96d6 <_svfiprintf_r+0x73a>
    97b2:	46ca      	mov	sl, r9
    97b4:	e42b      	b.n	900e <_svfiprintf_r+0x72>
    97b6:	aa0f      	add	r2, sp, #60	; 0x3c
    97b8:	9905      	ldr	r1, [sp, #20]
    97ba:	4638      	mov	r0, r7
    97bc:	f7ff fb70 	bl	8ea0 <__ssprint_r>
    97c0:	2800      	cmp	r0, #0
    97c2:	d188      	bne.n	96d6 <_svfiprintf_r+0x73a>
    97c4:	46ca      	mov	sl, r9
    97c6:	9911      	ldr	r1, [sp, #68]	; 0x44
    97c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    97ca:	e72c      	b.n	9626 <_svfiprintf_r+0x68a>
    97cc:	2400      	movs	r4, #0
    97ce:	2500      	movs	r5, #0
    97d0:	9301      	str	r3, [sp, #4]
    97d2:	4649      	mov	r1, r9
    97d4:	e000      	b.n	97d8 <_svfiprintf_r+0x83c>
    97d6:	4631      	mov	r1, r6
    97d8:	08e2      	lsrs	r2, r4, #3
    97da:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
    97de:	08e8      	lsrs	r0, r5, #3
    97e0:	f004 0307 	and.w	r3, r4, #7
    97e4:	4605      	mov	r5, r0
    97e6:	4614      	mov	r4, r2
    97e8:	3330      	adds	r3, #48	; 0x30
    97ea:	ea54 0205 	orrs.w	r2, r4, r5
    97ee:	f801 3c01 	strb.w	r3, [r1, #-1]
    97f2:	f101 36ff 	add.w	r6, r1, #4294967295	; 0xffffffff
    97f6:	d1ee      	bne.n	97d6 <_svfiprintf_r+0x83a>
    97f8:	9a01      	ldr	r2, [sp, #4]
    97fa:	07d2      	lsls	r2, r2, #31
    97fc:	f57f adc2 	bpl.w	9384 <_svfiprintf_r+0x3e8>
    9800:	2b30      	cmp	r3, #48	; 0x30
    9802:	f43f adbf 	beq.w	9384 <_svfiprintf_r+0x3e8>
    9806:	2330      	movs	r3, #48	; 0x30
    9808:	3902      	subs	r1, #2
    980a:	f806 3c01 	strb.w	r3, [r6, #-1]
    980e:	eba9 0301 	sub.w	r3, r9, r1
    9812:	9304      	str	r3, [sp, #16]
    9814:	460e      	mov	r6, r1
    9816:	e5b8      	b.n	938a <_svfiprintf_r+0x3ee>
    9818:	aa0f      	add	r2, sp, #60	; 0x3c
    981a:	9905      	ldr	r1, [sp, #20]
    981c:	4638      	mov	r0, r7
    981e:	f7ff fb3f 	bl	8ea0 <__ssprint_r>
    9822:	2800      	cmp	r0, #0
    9824:	f47f af57 	bne.w	96d6 <_svfiprintf_r+0x73a>
    9828:	46ca      	mov	sl, r9
    982a:	9911      	ldr	r1, [sp, #68]	; 0x44
    982c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    982e:	e6ad      	b.n	958c <_svfiprintf_r+0x5f0>
    9830:	aa0f      	add	r2, sp, #60	; 0x3c
    9832:	9905      	ldr	r1, [sp, #20]
    9834:	4638      	mov	r0, r7
    9836:	f7ff fb33 	bl	8ea0 <__ssprint_r>
    983a:	2800      	cmp	r0, #0
    983c:	f47f af4b 	bne.w	96d6 <_svfiprintf_r+0x73a>
    9840:	46ca      	mov	sl, r9
    9842:	9911      	ldr	r1, [sp, #68]	; 0x44
    9844:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9846:	e6b2      	b.n	95ae <_svfiprintf_r+0x612>
    9848:	2d00      	cmp	r5, #0
    984a:	bf08      	it	eq
    984c:	2c0a      	cmpeq	r4, #10
    984e:	d34c      	bcc.n	98ea <_svfiprintf_r+0x94e>
    9850:	464e      	mov	r6, r9
    9852:	4620      	mov	r0, r4
    9854:	4629      	mov	r1, r5
    9856:	220a      	movs	r2, #10
    9858:	2300      	movs	r3, #0
    985a:	f7fb fd4f 	bl	52fc <__aeabi_uldivmod>
    985e:	3230      	adds	r2, #48	; 0x30
    9860:	f806 2d01 	strb.w	r2, [r6, #-1]!
    9864:	4620      	mov	r0, r4
    9866:	4629      	mov	r1, r5
    9868:	2300      	movs	r3, #0
    986a:	220a      	movs	r2, #10
    986c:	f7fb fd46 	bl	52fc <__aeabi_uldivmod>
    9870:	4604      	mov	r4, r0
    9872:	460d      	mov	r5, r1
    9874:	ea54 0305 	orrs.w	r3, r4, r5
    9878:	d1eb      	bne.n	9852 <_svfiprintf_r+0x8b6>
    987a:	e583      	b.n	9384 <_svfiprintf_r+0x3e8>
    987c:	f8cd 8010 	str.w	r8, [sp, #16]
    9880:	464e      	mov	r6, r9
    9882:	e582      	b.n	938a <_svfiprintf_r+0x3ee>
    9884:	aa0f      	add	r2, sp, #60	; 0x3c
    9886:	9905      	ldr	r1, [sp, #20]
    9888:	4638      	mov	r0, r7
    988a:	f7ff fb09 	bl	8ea0 <__ssprint_r>
    988e:	2800      	cmp	r0, #0
    9890:	f47f af21 	bne.w	96d6 <_svfiprintf_r+0x73a>
    9894:	9911      	ldr	r1, [sp, #68]	; 0x44
    9896:	e709      	b.n	96ac <_svfiprintf_r+0x710>
    9898:	464e      	mov	r6, r9
    989a:	e576      	b.n	938a <_svfiprintf_r+0x3ee>
    989c:	f9b2 4000 	ldrsh.w	r4, [r2]
    98a0:	3204      	adds	r2, #4
    98a2:	17e5      	asrs	r5, r4, #31
    98a4:	4620      	mov	r0, r4
    98a6:	4629      	mov	r1, r5
    98a8:	2800      	cmp	r0, #0
    98aa:	9207      	str	r2, [sp, #28]
    98ac:	f171 0200 	sbcs.w	r2, r1, #0
    98b0:	f6bf ad44 	bge.w	933c <_svfiprintf_r+0x3a0>
    98b4:	222d      	movs	r2, #45	; 0x2d
    98b6:	4264      	negs	r4, r4
    98b8:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
    98bc:	9203      	str	r2, [sp, #12]
    98be:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
    98c2:	2201      	movs	r2, #1
    98c4:	e5ea      	b.n	949c <_svfiprintf_r+0x500>
    98c6:	880c      	ldrh	r4, [r1, #0]
    98c8:	3104      	adds	r1, #4
    98ca:	2500      	movs	r5, #0
    98cc:	9107      	str	r1, [sp, #28]
    98ce:	e45c      	b.n	918a <_svfiprintf_r+0x1ee>
    98d0:	9a07      	ldr	r2, [sp, #28]
    98d2:	4613      	mov	r3, r2
    98d4:	3304      	adds	r3, #4
    98d6:	9307      	str	r3, [sp, #28]
    98d8:	9b02      	ldr	r3, [sp, #8]
    98da:	6811      	ldr	r1, [r2, #0]
    98dc:	17dd      	asrs	r5, r3, #31
    98de:	461a      	mov	r2, r3
    98e0:	462b      	mov	r3, r5
    98e2:	e9c1 2300 	strd	r2, r3, [r1]
    98e6:	f7ff bb73 	b.w	8fd0 <_svfiprintf_r+0x34>
    98ea:	9b01      	ldr	r3, [sp, #4]
    98ec:	9301      	str	r3, [sp, #4]
    98ee:	2301      	movs	r3, #1
    98f0:	ae2c      	add	r6, sp, #176	; 0xb0
    98f2:	3430      	adds	r4, #48	; 0x30
    98f4:	f806 4d41 	strb.w	r4, [r6, #-65]!
    98f8:	9304      	str	r3, [sp, #16]
    98fa:	e546      	b.n	938a <_svfiprintf_r+0x3ee>
    98fc:	9c07      	ldr	r4, [sp, #28]
    98fe:	3407      	adds	r4, #7
    9900:	f024 0407 	bic.w	r4, r4, #7
    9904:	f104 0208 	add.w	r2, r4, #8
    9908:	e9d4 0100 	ldrd	r0, r1, [r4]
    990c:	9207      	str	r2, [sp, #28]
    990e:	4604      	mov	r4, r0
    9910:	460d      	mov	r5, r1
    9912:	e50e      	b.n	9332 <_svfiprintf_r+0x396>
    9914:	aa0f      	add	r2, sp, #60	; 0x3c
    9916:	9905      	ldr	r1, [sp, #20]
    9918:	4638      	mov	r0, r7
    991a:	f7ff fac1 	bl	8ea0 <__ssprint_r>
    991e:	2800      	cmp	r0, #0
    9920:	f47f aed9 	bne.w	96d6 <_svfiprintf_r+0x73a>
    9924:	46ca      	mov	sl, r9
    9926:	9911      	ldr	r1, [sp, #68]	; 0x44
    9928:	9b10      	ldr	r3, [sp, #64]	; 0x40
    992a:	e644      	b.n	95b6 <_svfiprintf_r+0x61a>
    992c:	9a07      	ldr	r2, [sp, #28]
    992e:	6813      	ldr	r3, [r2, #0]
    9930:	3204      	adds	r2, #4
    9932:	9207      	str	r2, [sp, #28]
    9934:	9a02      	ldr	r2, [sp, #8]
    9936:	601a      	str	r2, [r3, #0]
    9938:	f7ff bb4a 	b.w	8fd0 <_svfiprintf_r+0x34>
    993c:	4c2b      	ldr	r4, [pc, #172]	; (99ec <_svfiprintf_r+0xa50>)
    993e:	e667      	b.n	9610 <_svfiprintf_r+0x674>
    9940:	4630      	mov	r0, r6
    9942:	9301      	str	r3, [sp, #4]
    9944:	9407      	str	r4, [sp, #28]
    9946:	f7fc f803 	bl	5950 <strlen>
    994a:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    994e:	9004      	str	r0, [sp, #16]
    9950:	9303      	str	r3, [sp, #12]
    9952:	f04f 0800 	mov.w	r8, #0
    9956:	e518      	b.n	938a <_svfiprintf_r+0x3ee>
    9958:	4642      	mov	r2, r8
    995a:	2a06      	cmp	r2, #6
    995c:	bf28      	it	cs
    995e:	2206      	movcs	r2, #6
    9960:	9407      	str	r4, [sp, #28]
    9962:	9204      	str	r2, [sp, #16]
    9964:	9200      	str	r2, [sp, #0]
    9966:	4e22      	ldr	r6, [pc, #136]	; (99f0 <_svfiprintf_r+0xa54>)
    9968:	e442      	b.n	91f0 <_svfiprintf_r+0x254>
    996a:	2140      	movs	r1, #64	; 0x40
    996c:	9200      	str	r2, [sp, #0]
    996e:	f7fe fb21 	bl	7fb4 <_malloc_r>
    9972:	9a05      	ldr	r2, [sp, #20]
    9974:	6010      	str	r0, [r2, #0]
    9976:	6110      	str	r0, [r2, #16]
    9978:	9a00      	ldr	r2, [sp, #0]
    997a:	b348      	cbz	r0, 99d0 <_svfiprintf_r+0xa34>
    997c:	2340      	movs	r3, #64	; 0x40
    997e:	9905      	ldr	r1, [sp, #20]
    9980:	614b      	str	r3, [r1, #20]
    9982:	f7ff bb19 	b.w	8fb8 <_svfiprintf_r+0x1c>
    9986:	9911      	ldr	r1, [sp, #68]	; 0x44
    9988:	9a10      	ldr	r2, [sp, #64]	; 0x40
    998a:	4d1a      	ldr	r5, [pc, #104]	; (99f4 <_svfiprintf_r+0xa58>)
    998c:	e473      	b.n	9276 <_svfiprintf_r+0x2da>
    998e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9990:	4d18      	ldr	r5, [pc, #96]	; (99f4 <_svfiprintf_r+0xa58>)
    9992:	e680      	b.n	9696 <_svfiprintf_r+0x6fa>
    9994:	9301      	str	r3, [sp, #4]
    9996:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    999a:	f8cd 8010 	str.w	r8, [sp, #16]
    999e:	9407      	str	r4, [sp, #28]
    99a0:	4680      	mov	r8, r0
    99a2:	9303      	str	r3, [sp, #12]
    99a4:	e4f1      	b.n	938a <_svfiprintf_r+0x3ee>
    99a6:	9a07      	ldr	r2, [sp, #28]
    99a8:	6811      	ldr	r1, [r2, #0]
    99aa:	f89b 2001 	ldrb.w	r2, [fp, #1]
    99ae:	ea41 78e1 	orr.w	r8, r1, r1, asr #31
    99b2:	9907      	ldr	r1, [sp, #28]
    99b4:	46b3      	mov	fp, r6
    99b6:	3104      	adds	r1, #4
    99b8:	9107      	str	r1, [sp, #28]
    99ba:	f7ff bb3c 	b.w	9036 <_svfiprintf_r+0x9a>
    99be:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
    99c2:	e4a4      	b.n	930e <_svfiprintf_r+0x372>
    99c4:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
    99c8:	e4fc      	b.n	93c4 <_svfiprintf_r+0x428>
    99ca:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
    99ce:	e464      	b.n	929a <_svfiprintf_r+0x2fe>
    99d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    99d4:	230c      	movs	r3, #12
    99d6:	9202      	str	r2, [sp, #8]
    99d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    99da:	6013      	str	r3, [r2, #0]
    99dc:	e684      	b.n	96e8 <_svfiprintf_r+0x74c>
    99de:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
    99e2:	e59a      	b.n	951a <_svfiprintf_r+0x57e>
    99e4:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
    99e8:	f7ff bbbf 	b.w	916a <_svfiprintf_r+0x1ce>
    99ec:	0000a884 	.word	0x0000a884
    99f0:	0000a714 	.word	0x0000a714
    99f4:	0000a874 	.word	0x0000a874

000099f8 <__register_exitproc>:
    99f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    99fc:	4d2c      	ldr	r5, [pc, #176]	; (9ab0 <__register_exitproc+0xb8>)
    99fe:	4606      	mov	r6, r0
    9a00:	6828      	ldr	r0, [r5, #0]
    9a02:	4698      	mov	r8, r3
    9a04:	460f      	mov	r7, r1
    9a06:	4691      	mov	r9, r2
    9a08:	f7fe faca 	bl	7fa0 <__retarget_lock_acquire_recursive>
    9a0c:	4b29      	ldr	r3, [pc, #164]	; (9ab4 <__register_exitproc+0xbc>)
    9a0e:	681c      	ldr	r4, [r3, #0]
    9a10:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    9a14:	2b00      	cmp	r3, #0
    9a16:	d03e      	beq.n	9a96 <__register_exitproc+0x9e>
    9a18:	685a      	ldr	r2, [r3, #4]
    9a1a:	2a1f      	cmp	r2, #31
    9a1c:	dc1c      	bgt.n	9a58 <__register_exitproc+0x60>
    9a1e:	f102 0e01 	add.w	lr, r2, #1
    9a22:	b176      	cbz	r6, 9a42 <__register_exitproc+0x4a>
    9a24:	2101      	movs	r1, #1
    9a26:	eb03 0482 	add.w	r4, r3, r2, lsl #2
    9a2a:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
    9a2e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
    9a32:	4091      	lsls	r1, r2
    9a34:	4308      	orrs	r0, r1
    9a36:	2e02      	cmp	r6, #2
    9a38:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
    9a3c:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
    9a40:	d023      	beq.n	9a8a <__register_exitproc+0x92>
    9a42:	3202      	adds	r2, #2
    9a44:	f8c3 e004 	str.w	lr, [r3, #4]
    9a48:	6828      	ldr	r0, [r5, #0]
    9a4a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    9a4e:	f7fe faaf 	bl	7fb0 <__retarget_lock_release_recursive>
    9a52:	2000      	movs	r0, #0
    9a54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9a58:	4b17      	ldr	r3, [pc, #92]	; (9ab8 <__register_exitproc+0xc0>)
    9a5a:	b30b      	cbz	r3, 9aa0 <__register_exitproc+0xa8>
    9a5c:	f44f 70c8 	mov.w	r0, #400	; 0x190
    9a60:	f3af 8000 	nop.w
    9a64:	4603      	mov	r3, r0
    9a66:	b1d8      	cbz	r0, 9aa0 <__register_exitproc+0xa8>
    9a68:	2000      	movs	r0, #0
    9a6a:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
    9a6e:	f04f 0e01 	mov.w	lr, #1
    9a72:	6058      	str	r0, [r3, #4]
    9a74:	6019      	str	r1, [r3, #0]
    9a76:	4602      	mov	r2, r0
    9a78:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    9a7c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
    9a80:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
    9a84:	2e00      	cmp	r6, #0
    9a86:	d0dc      	beq.n	9a42 <__register_exitproc+0x4a>
    9a88:	e7cc      	b.n	9a24 <__register_exitproc+0x2c>
    9a8a:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
    9a8e:	4301      	orrs	r1, r0
    9a90:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
    9a94:	e7d5      	b.n	9a42 <__register_exitproc+0x4a>
    9a96:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
    9a9a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    9a9e:	e7bb      	b.n	9a18 <__register_exitproc+0x20>
    9aa0:	6828      	ldr	r0, [r5, #0]
    9aa2:	f7fe fa85 	bl	7fb0 <__retarget_lock_release_recursive>
    9aa6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9aaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9aae:	bf00      	nop
    9ab0:	10000508 	.word	0x10000508
    9ab4:	0000a6d8 	.word	0x0000a6d8
    9ab8:	00000000 	.word	0x00000000

00009abc <_calloc_r>:
    9abc:	b510      	push	{r4, lr}
    9abe:	fb02 f101 	mul.w	r1, r2, r1
    9ac2:	f7fe fa77 	bl	7fb4 <_malloc_r>
    9ac6:	4604      	mov	r4, r0
    9ac8:	b1d8      	cbz	r0, 9b02 <_calloc_r+0x46>
    9aca:	f850 2c04 	ldr.w	r2, [r0, #-4]
    9ace:	f022 0203 	bic.w	r2, r2, #3
    9ad2:	3a04      	subs	r2, #4
    9ad4:	2a24      	cmp	r2, #36	; 0x24
    9ad6:	d818      	bhi.n	9b0a <_calloc_r+0x4e>
    9ad8:	2a13      	cmp	r2, #19
    9ada:	d914      	bls.n	9b06 <_calloc_r+0x4a>
    9adc:	2300      	movs	r3, #0
    9ade:	2a1b      	cmp	r2, #27
    9ae0:	6003      	str	r3, [r0, #0]
    9ae2:	6043      	str	r3, [r0, #4]
    9ae4:	d916      	bls.n	9b14 <_calloc_r+0x58>
    9ae6:	2a24      	cmp	r2, #36	; 0x24
    9ae8:	6083      	str	r3, [r0, #8]
    9aea:	60c3      	str	r3, [r0, #12]
    9aec:	bf11      	iteee	ne
    9aee:	f100 0210 	addne.w	r2, r0, #16
    9af2:	6103      	streq	r3, [r0, #16]
    9af4:	6143      	streq	r3, [r0, #20]
    9af6:	f100 0218 	addeq.w	r2, r0, #24
    9afa:	2300      	movs	r3, #0
    9afc:	6013      	str	r3, [r2, #0]
    9afe:	6053      	str	r3, [r2, #4]
    9b00:	6093      	str	r3, [r2, #8]
    9b02:	4620      	mov	r0, r4
    9b04:	bd10      	pop	{r4, pc}
    9b06:	4602      	mov	r2, r0
    9b08:	e7f7      	b.n	9afa <_calloc_r+0x3e>
    9b0a:	2100      	movs	r1, #0
    9b0c:	f7fb fe2c 	bl	5768 <memset>
    9b10:	4620      	mov	r0, r4
    9b12:	bd10      	pop	{r4, pc}
    9b14:	f100 0208 	add.w	r2, r0, #8
    9b18:	e7ef      	b.n	9afa <_calloc_r+0x3e>
    9b1a:	bf00      	nop

00009b1c <_malloc_trim_r>:
    9b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9b1e:	460c      	mov	r4, r1
    9b20:	4f23      	ldr	r7, [pc, #140]	; (9bb0 <_malloc_trim_r+0x94>)
    9b22:	4606      	mov	r6, r0
    9b24:	f7fe fd2e 	bl	8584 <__malloc_lock>
    9b28:	68bb      	ldr	r3, [r7, #8]
    9b2a:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    9b2e:	685d      	ldr	r5, [r3, #4]
    9b30:	310f      	adds	r1, #15
    9b32:	f025 0503 	bic.w	r5, r5, #3
    9b36:	4429      	add	r1, r5
    9b38:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
    9b3c:	f021 010f 	bic.w	r1, r1, #15
    9b40:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
    9b44:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    9b48:	db07      	blt.n	9b5a <_malloc_trim_r+0x3e>
    9b4a:	2100      	movs	r1, #0
    9b4c:	4630      	mov	r0, r6
    9b4e:	f7ff f995 	bl	8e7c <_sbrk_r>
    9b52:	68bb      	ldr	r3, [r7, #8]
    9b54:	442b      	add	r3, r5
    9b56:	4298      	cmp	r0, r3
    9b58:	d004      	beq.n	9b64 <_malloc_trim_r+0x48>
    9b5a:	4630      	mov	r0, r6
    9b5c:	f7fe fd18 	bl	8590 <__malloc_unlock>
    9b60:	2000      	movs	r0, #0
    9b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9b64:	4261      	negs	r1, r4
    9b66:	4630      	mov	r0, r6
    9b68:	f7ff f988 	bl	8e7c <_sbrk_r>
    9b6c:	3001      	adds	r0, #1
    9b6e:	d00d      	beq.n	9b8c <_malloc_trim_r+0x70>
    9b70:	4b10      	ldr	r3, [pc, #64]	; (9bb4 <_malloc_trim_r+0x98>)
    9b72:	68ba      	ldr	r2, [r7, #8]
    9b74:	6819      	ldr	r1, [r3, #0]
    9b76:	1b2d      	subs	r5, r5, r4
    9b78:	f045 0501 	orr.w	r5, r5, #1
    9b7c:	4630      	mov	r0, r6
    9b7e:	1b09      	subs	r1, r1, r4
    9b80:	6055      	str	r5, [r2, #4]
    9b82:	6019      	str	r1, [r3, #0]
    9b84:	f7fe fd04 	bl	8590 <__malloc_unlock>
    9b88:	2001      	movs	r0, #1
    9b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9b8c:	2100      	movs	r1, #0
    9b8e:	4630      	mov	r0, r6
    9b90:	f7ff f974 	bl	8e7c <_sbrk_r>
    9b94:	68ba      	ldr	r2, [r7, #8]
    9b96:	1a83      	subs	r3, r0, r2
    9b98:	2b0f      	cmp	r3, #15
    9b9a:	ddde      	ble.n	9b5a <_malloc_trim_r+0x3e>
    9b9c:	4c06      	ldr	r4, [pc, #24]	; (9bb8 <_malloc_trim_r+0x9c>)
    9b9e:	4905      	ldr	r1, [pc, #20]	; (9bb4 <_malloc_trim_r+0x98>)
    9ba0:	6824      	ldr	r4, [r4, #0]
    9ba2:	f043 0301 	orr.w	r3, r3, #1
    9ba6:	1b00      	subs	r0, r0, r4
    9ba8:	6053      	str	r3, [r2, #4]
    9baa:	6008      	str	r0, [r1, #0]
    9bac:	e7d5      	b.n	9b5a <_malloc_trim_r+0x3e>
    9bae:	bf00      	nop
    9bb0:	1000050c 	.word	0x1000050c
    9bb4:	1000348c 	.word	0x1000348c
    9bb8:	10000914 	.word	0x10000914

00009bbc <_free_r>:
    9bbc:	2900      	cmp	r1, #0
    9bbe:	d044      	beq.n	9c4a <_free_r+0x8e>
    9bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9bc4:	460d      	mov	r5, r1
    9bc6:	4680      	mov	r8, r0
    9bc8:	f7fe fcdc 	bl	8584 <__malloc_lock>
    9bcc:	f855 7c04 	ldr.w	r7, [r5, #-4]
    9bd0:	4969      	ldr	r1, [pc, #420]	; (9d78 <_free_r+0x1bc>)
    9bd2:	f1a5 0408 	sub.w	r4, r5, #8
    9bd6:	f027 0301 	bic.w	r3, r7, #1
    9bda:	18e2      	adds	r2, r4, r3
    9bdc:	688e      	ldr	r6, [r1, #8]
    9bde:	6850      	ldr	r0, [r2, #4]
    9be0:	42b2      	cmp	r2, r6
    9be2:	f020 0003 	bic.w	r0, r0, #3
    9be6:	d05e      	beq.n	9ca6 <_free_r+0xea>
    9be8:	07fe      	lsls	r6, r7, #31
    9bea:	6050      	str	r0, [r2, #4]
    9bec:	d40b      	bmi.n	9c06 <_free_r+0x4a>
    9bee:	f855 7c08 	ldr.w	r7, [r5, #-8]
    9bf2:	f101 0e08 	add.w	lr, r1, #8
    9bf6:	1be4      	subs	r4, r4, r7
    9bf8:	68a5      	ldr	r5, [r4, #8]
    9bfa:	443b      	add	r3, r7
    9bfc:	4575      	cmp	r5, lr
    9bfe:	d06d      	beq.n	9cdc <_free_r+0x120>
    9c00:	68e7      	ldr	r7, [r4, #12]
    9c02:	60ef      	str	r7, [r5, #12]
    9c04:	60bd      	str	r5, [r7, #8]
    9c06:	1815      	adds	r5, r2, r0
    9c08:	686d      	ldr	r5, [r5, #4]
    9c0a:	07ed      	lsls	r5, r5, #31
    9c0c:	d53e      	bpl.n	9c8c <_free_r+0xd0>
    9c0e:	f043 0201 	orr.w	r2, r3, #1
    9c12:	6062      	str	r2, [r4, #4]
    9c14:	50e3      	str	r3, [r4, r3]
    9c16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    9c1a:	d217      	bcs.n	9c4c <_free_r+0x90>
    9c1c:	2201      	movs	r2, #1
    9c1e:	08db      	lsrs	r3, r3, #3
    9c20:	1098      	asrs	r0, r3, #2
    9c22:	684d      	ldr	r5, [r1, #4]
    9c24:	4413      	add	r3, r2
    9c26:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
    9c2a:	4082      	lsls	r2, r0
    9c2c:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
    9c30:	432a      	orrs	r2, r5
    9c32:	3808      	subs	r0, #8
    9c34:	60e0      	str	r0, [r4, #12]
    9c36:	60a7      	str	r7, [r4, #8]
    9c38:	604a      	str	r2, [r1, #4]
    9c3a:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
    9c3e:	60fc      	str	r4, [r7, #12]
    9c40:	4640      	mov	r0, r8
    9c42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    9c46:	f7fe bca3 	b.w	8590 <__malloc_unlock>
    9c4a:	4770      	bx	lr
    9c4c:	0a5a      	lsrs	r2, r3, #9
    9c4e:	2a04      	cmp	r2, #4
    9c50:	d852      	bhi.n	9cf8 <_free_r+0x13c>
    9c52:	099a      	lsrs	r2, r3, #6
    9c54:	f102 0739 	add.w	r7, r2, #57	; 0x39
    9c58:	00ff      	lsls	r7, r7, #3
    9c5a:	f102 0538 	add.w	r5, r2, #56	; 0x38
    9c5e:	19c8      	adds	r0, r1, r7
    9c60:	59ca      	ldr	r2, [r1, r7]
    9c62:	3808      	subs	r0, #8
    9c64:	4290      	cmp	r0, r2
    9c66:	d04f      	beq.n	9d08 <_free_r+0x14c>
    9c68:	6851      	ldr	r1, [r2, #4]
    9c6a:	f021 0103 	bic.w	r1, r1, #3
    9c6e:	428b      	cmp	r3, r1
    9c70:	d232      	bcs.n	9cd8 <_free_r+0x11c>
    9c72:	6892      	ldr	r2, [r2, #8]
    9c74:	4290      	cmp	r0, r2
    9c76:	d1f7      	bne.n	9c68 <_free_r+0xac>
    9c78:	68c3      	ldr	r3, [r0, #12]
    9c7a:	60a0      	str	r0, [r4, #8]
    9c7c:	60e3      	str	r3, [r4, #12]
    9c7e:	609c      	str	r4, [r3, #8]
    9c80:	60c4      	str	r4, [r0, #12]
    9c82:	4640      	mov	r0, r8
    9c84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    9c88:	f7fe bc82 	b.w	8590 <__malloc_unlock>
    9c8c:	6895      	ldr	r5, [r2, #8]
    9c8e:	4f3b      	ldr	r7, [pc, #236]	; (9d7c <_free_r+0x1c0>)
    9c90:	4403      	add	r3, r0
    9c92:	42bd      	cmp	r5, r7
    9c94:	d040      	beq.n	9d18 <_free_r+0x15c>
    9c96:	68d0      	ldr	r0, [r2, #12]
    9c98:	f043 0201 	orr.w	r2, r3, #1
    9c9c:	60e8      	str	r0, [r5, #12]
    9c9e:	6085      	str	r5, [r0, #8]
    9ca0:	6062      	str	r2, [r4, #4]
    9ca2:	50e3      	str	r3, [r4, r3]
    9ca4:	e7b7      	b.n	9c16 <_free_r+0x5a>
    9ca6:	07ff      	lsls	r7, r7, #31
    9ca8:	4403      	add	r3, r0
    9caa:	d407      	bmi.n	9cbc <_free_r+0x100>
    9cac:	f855 5c08 	ldr.w	r5, [r5, #-8]
    9cb0:	1b64      	subs	r4, r4, r5
    9cb2:	68e2      	ldr	r2, [r4, #12]
    9cb4:	68a0      	ldr	r0, [r4, #8]
    9cb6:	442b      	add	r3, r5
    9cb8:	60c2      	str	r2, [r0, #12]
    9cba:	6090      	str	r0, [r2, #8]
    9cbc:	4a30      	ldr	r2, [pc, #192]	; (9d80 <_free_r+0x1c4>)
    9cbe:	f043 0001 	orr.w	r0, r3, #1
    9cc2:	6812      	ldr	r2, [r2, #0]
    9cc4:	6060      	str	r0, [r4, #4]
    9cc6:	4293      	cmp	r3, r2
    9cc8:	608c      	str	r4, [r1, #8]
    9cca:	d3b9      	bcc.n	9c40 <_free_r+0x84>
    9ccc:	4b2d      	ldr	r3, [pc, #180]	; (9d84 <_free_r+0x1c8>)
    9cce:	4640      	mov	r0, r8
    9cd0:	6819      	ldr	r1, [r3, #0]
    9cd2:	f7ff ff23 	bl	9b1c <_malloc_trim_r>
    9cd6:	e7b3      	b.n	9c40 <_free_r+0x84>
    9cd8:	4610      	mov	r0, r2
    9cda:	e7cd      	b.n	9c78 <_free_r+0xbc>
    9cdc:	1811      	adds	r1, r2, r0
    9cde:	6849      	ldr	r1, [r1, #4]
    9ce0:	07c9      	lsls	r1, r1, #31
    9ce2:	d444      	bmi.n	9d6e <_free_r+0x1b2>
    9ce4:	6891      	ldr	r1, [r2, #8]
    9ce6:	4403      	add	r3, r0
    9ce8:	68d2      	ldr	r2, [r2, #12]
    9cea:	f043 0001 	orr.w	r0, r3, #1
    9cee:	60ca      	str	r2, [r1, #12]
    9cf0:	6091      	str	r1, [r2, #8]
    9cf2:	6060      	str	r0, [r4, #4]
    9cf4:	50e3      	str	r3, [r4, r3]
    9cf6:	e7a3      	b.n	9c40 <_free_r+0x84>
    9cf8:	2a14      	cmp	r2, #20
    9cfa:	d816      	bhi.n	9d2a <_free_r+0x16e>
    9cfc:	f102 075c 	add.w	r7, r2, #92	; 0x5c
    9d00:	00ff      	lsls	r7, r7, #3
    9d02:	f102 055b 	add.w	r5, r2, #91	; 0x5b
    9d06:	e7aa      	b.n	9c5e <_free_r+0xa2>
    9d08:	2301      	movs	r3, #1
    9d0a:	10aa      	asrs	r2, r5, #2
    9d0c:	684d      	ldr	r5, [r1, #4]
    9d0e:	4093      	lsls	r3, r2
    9d10:	432b      	orrs	r3, r5
    9d12:	604b      	str	r3, [r1, #4]
    9d14:	4603      	mov	r3, r0
    9d16:	e7b0      	b.n	9c7a <_free_r+0xbe>
    9d18:	f043 0201 	orr.w	r2, r3, #1
    9d1c:	614c      	str	r4, [r1, #20]
    9d1e:	610c      	str	r4, [r1, #16]
    9d20:	60e5      	str	r5, [r4, #12]
    9d22:	60a5      	str	r5, [r4, #8]
    9d24:	6062      	str	r2, [r4, #4]
    9d26:	50e3      	str	r3, [r4, r3]
    9d28:	e78a      	b.n	9c40 <_free_r+0x84>
    9d2a:	2a54      	cmp	r2, #84	; 0x54
    9d2c:	d806      	bhi.n	9d3c <_free_r+0x180>
    9d2e:	0b1a      	lsrs	r2, r3, #12
    9d30:	f102 076f 	add.w	r7, r2, #111	; 0x6f
    9d34:	00ff      	lsls	r7, r7, #3
    9d36:	f102 056e 	add.w	r5, r2, #110	; 0x6e
    9d3a:	e790      	b.n	9c5e <_free_r+0xa2>
    9d3c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    9d40:	d806      	bhi.n	9d50 <_free_r+0x194>
    9d42:	0bda      	lsrs	r2, r3, #15
    9d44:	f102 0778 	add.w	r7, r2, #120	; 0x78
    9d48:	00ff      	lsls	r7, r7, #3
    9d4a:	f102 0577 	add.w	r5, r2, #119	; 0x77
    9d4e:	e786      	b.n	9c5e <_free_r+0xa2>
    9d50:	f240 5054 	movw	r0, #1364	; 0x554
    9d54:	4282      	cmp	r2, r0
    9d56:	d806      	bhi.n	9d66 <_free_r+0x1aa>
    9d58:	0c9a      	lsrs	r2, r3, #18
    9d5a:	f102 077d 	add.w	r7, r2, #125	; 0x7d
    9d5e:	00ff      	lsls	r7, r7, #3
    9d60:	f102 057c 	add.w	r5, r2, #124	; 0x7c
    9d64:	e77b      	b.n	9c5e <_free_r+0xa2>
    9d66:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
    9d6a:	257e      	movs	r5, #126	; 0x7e
    9d6c:	e777      	b.n	9c5e <_free_r+0xa2>
    9d6e:	f043 0101 	orr.w	r1, r3, #1
    9d72:	6061      	str	r1, [r4, #4]
    9d74:	6013      	str	r3, [r2, #0]
    9d76:	e763      	b.n	9c40 <_free_r+0x84>
    9d78:	1000050c 	.word	0x1000050c
    9d7c:	10000514 	.word	0x10000514
    9d80:	10000918 	.word	0x10000918
    9d84:	100034bc 	.word	0x100034bc

00009d88 <_setlocale_r>:
    9d88:	b1b2      	cbz	r2, 9db8 <_setlocale_r+0x30>
    9d8a:	b510      	push	{r4, lr}
    9d8c:	490b      	ldr	r1, [pc, #44]	; (9dbc <_setlocale_r+0x34>)
    9d8e:	4610      	mov	r0, r2
    9d90:	4614      	mov	r4, r2
    9d92:	f000 fad5 	bl	a340 <strcmp>
    9d96:	b908      	cbnz	r0, 9d9c <_setlocale_r+0x14>
    9d98:	4809      	ldr	r0, [pc, #36]	; (9dc0 <_setlocale_r+0x38>)
    9d9a:	bd10      	pop	{r4, pc}
    9d9c:	4908      	ldr	r1, [pc, #32]	; (9dc0 <_setlocale_r+0x38>)
    9d9e:	4620      	mov	r0, r4
    9da0:	f000 face 	bl	a340 <strcmp>
    9da4:	2800      	cmp	r0, #0
    9da6:	d0f7      	beq.n	9d98 <_setlocale_r+0x10>
    9da8:	4620      	mov	r0, r4
    9daa:	4906      	ldr	r1, [pc, #24]	; (9dc4 <_setlocale_r+0x3c>)
    9dac:	f000 fac8 	bl	a340 <strcmp>
    9db0:	2800      	cmp	r0, #0
    9db2:	d0f1      	beq.n	9d98 <_setlocale_r+0x10>
    9db4:	2000      	movs	r0, #0
    9db6:	bd10      	pop	{r4, pc}
    9db8:	4801      	ldr	r0, [pc, #4]	; (9dc0 <_setlocale_r+0x38>)
    9dba:	4770      	bx	lr
    9dbc:	0000a898 	.word	0x0000a898
    9dc0:	0000a894 	.word	0x0000a894
    9dc4:	0000a6fc 	.word	0x0000a6fc

00009dc8 <__locale_mb_cur_max>:
    9dc8:	4b04      	ldr	r3, [pc, #16]	; (9ddc <__locale_mb_cur_max+0x14>)
    9dca:	4a05      	ldr	r2, [pc, #20]	; (9de0 <__locale_mb_cur_max+0x18>)
    9dcc:	681b      	ldr	r3, [r3, #0]
    9dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    9dd0:	2b00      	cmp	r3, #0
    9dd2:	bf08      	it	eq
    9dd4:	4613      	moveq	r3, r2
    9dd6:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
    9dda:	4770      	bx	lr
    9ddc:	100000dc 	.word	0x100000dc
    9de0:	1000091c 	.word	0x1000091c

00009de4 <__locale_ctype_ptr_l>:
    9de4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
    9de8:	4770      	bx	lr
    9dea:	bf00      	nop

00009dec <__locale_ctype_ptr>:
    9dec:	4b04      	ldr	r3, [pc, #16]	; (9e00 <__locale_ctype_ptr+0x14>)
    9dee:	4a05      	ldr	r2, [pc, #20]	; (9e04 <__locale_ctype_ptr+0x18>)
    9df0:	681b      	ldr	r3, [r3, #0]
    9df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    9df4:	2b00      	cmp	r3, #0
    9df6:	bf08      	it	eq
    9df8:	4613      	moveq	r3, r2
    9dfa:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
    9dfe:	4770      	bx	lr
    9e00:	100000dc 	.word	0x100000dc
    9e04:	1000091c 	.word	0x1000091c

00009e08 <setlocale>:
    9e08:	4b02      	ldr	r3, [pc, #8]	; (9e14 <setlocale+0xc>)
    9e0a:	460a      	mov	r2, r1
    9e0c:	4601      	mov	r1, r0
    9e0e:	6818      	ldr	r0, [r3, #0]
    9e10:	f7ff bfba 	b.w	9d88 <_setlocale_r>
    9e14:	100000dc 	.word	0x100000dc

00009e18 <_mbtowc_r>:
    9e18:	b430      	push	{r4, r5}
    9e1a:	4c06      	ldr	r4, [pc, #24]	; (9e34 <_mbtowc_r+0x1c>)
    9e1c:	4d06      	ldr	r5, [pc, #24]	; (9e38 <_mbtowc_r+0x20>)
    9e1e:	6824      	ldr	r4, [r4, #0]
    9e20:	6b64      	ldr	r4, [r4, #52]	; 0x34
    9e22:	2c00      	cmp	r4, #0
    9e24:	bf08      	it	eq
    9e26:	462c      	moveq	r4, r5
    9e28:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
    9e2c:	46a4      	mov	ip, r4
    9e2e:	bc30      	pop	{r4, r5}
    9e30:	4760      	bx	ip
    9e32:	bf00      	nop
    9e34:	100000dc 	.word	0x100000dc
    9e38:	1000091c 	.word	0x1000091c

00009e3c <__ascii_mbtowc>:
    9e3c:	b082      	sub	sp, #8
    9e3e:	b149      	cbz	r1, 9e54 <__ascii_mbtowc+0x18>
    9e40:	b15a      	cbz	r2, 9e5a <__ascii_mbtowc+0x1e>
    9e42:	b16b      	cbz	r3, 9e60 <__ascii_mbtowc+0x24>
    9e44:	7813      	ldrb	r3, [r2, #0]
    9e46:	600b      	str	r3, [r1, #0]
    9e48:	7812      	ldrb	r2, [r2, #0]
    9e4a:	1c10      	adds	r0, r2, #0
    9e4c:	bf18      	it	ne
    9e4e:	2001      	movne	r0, #1
    9e50:	b002      	add	sp, #8
    9e52:	4770      	bx	lr
    9e54:	a901      	add	r1, sp, #4
    9e56:	2a00      	cmp	r2, #0
    9e58:	d1f3      	bne.n	9e42 <__ascii_mbtowc+0x6>
    9e5a:	4610      	mov	r0, r2
    9e5c:	b002      	add	sp, #8
    9e5e:	4770      	bx	lr
    9e60:	f06f 0001 	mvn.w	r0, #1
    9e64:	e7f4      	b.n	9e50 <__ascii_mbtowc+0x14>
    9e66:	bf00      	nop

00009e68 <memmove>:
    9e68:	4288      	cmp	r0, r1
    9e6a:	b5f0      	push	{r4, r5, r6, r7, lr}
    9e6c:	d90d      	bls.n	9e8a <memmove+0x22>
    9e6e:	188b      	adds	r3, r1, r2
    9e70:	4298      	cmp	r0, r3
    9e72:	d20a      	bcs.n	9e8a <memmove+0x22>
    9e74:	1884      	adds	r4, r0, r2
    9e76:	2a00      	cmp	r2, #0
    9e78:	d051      	beq.n	9f1e <memmove+0xb6>
    9e7a:	4622      	mov	r2, r4
    9e7c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    9e80:	4299      	cmp	r1, r3
    9e82:	f802 4d01 	strb.w	r4, [r2, #-1]!
    9e86:	d1f9      	bne.n	9e7c <memmove+0x14>
    9e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9e8a:	2a0f      	cmp	r2, #15
    9e8c:	d948      	bls.n	9f20 <memmove+0xb8>
    9e8e:	ea41 0300 	orr.w	r3, r1, r0
    9e92:	079b      	lsls	r3, r3, #30
    9e94:	d146      	bne.n	9f24 <memmove+0xbc>
    9e96:	4615      	mov	r5, r2
    9e98:	f100 0410 	add.w	r4, r0, #16
    9e9c:	f101 0310 	add.w	r3, r1, #16
    9ea0:	f853 6c10 	ldr.w	r6, [r3, #-16]
    9ea4:	3d10      	subs	r5, #16
    9ea6:	f844 6c10 	str.w	r6, [r4, #-16]
    9eaa:	f853 6c0c 	ldr.w	r6, [r3, #-12]
    9eae:	2d0f      	cmp	r5, #15
    9eb0:	f844 6c0c 	str.w	r6, [r4, #-12]
    9eb4:	f853 6c08 	ldr.w	r6, [r3, #-8]
    9eb8:	f104 0410 	add.w	r4, r4, #16
    9ebc:	f844 6c18 	str.w	r6, [r4, #-24]
    9ec0:	f853 6c04 	ldr.w	r6, [r3, #-4]
    9ec4:	f103 0310 	add.w	r3, r3, #16
    9ec8:	f844 6c14 	str.w	r6, [r4, #-20]
    9ecc:	d8e8      	bhi.n	9ea0 <memmove+0x38>
    9ece:	f1a2 0310 	sub.w	r3, r2, #16
    9ed2:	f023 030f 	bic.w	r3, r3, #15
    9ed6:	f002 0e0f 	and.w	lr, r2, #15
    9eda:	3310      	adds	r3, #16
    9edc:	f1be 0f03 	cmp.w	lr, #3
    9ee0:	4419      	add	r1, r3
    9ee2:	4403      	add	r3, r0
    9ee4:	d921      	bls.n	9f2a <memmove+0xc2>
    9ee6:	460e      	mov	r6, r1
    9ee8:	4674      	mov	r4, lr
    9eea:	1f1d      	subs	r5, r3, #4
    9eec:	f856 7b04 	ldr.w	r7, [r6], #4
    9ef0:	3c04      	subs	r4, #4
    9ef2:	2c03      	cmp	r4, #3
    9ef4:	f845 7f04 	str.w	r7, [r5, #4]!
    9ef8:	d8f8      	bhi.n	9eec <memmove+0x84>
    9efa:	f1ae 0404 	sub.w	r4, lr, #4
    9efe:	f024 0403 	bic.w	r4, r4, #3
    9f02:	3404      	adds	r4, #4
    9f04:	4421      	add	r1, r4
    9f06:	4423      	add	r3, r4
    9f08:	f002 0203 	and.w	r2, r2, #3
    9f0c:	b162      	cbz	r2, 9f28 <memmove+0xc0>
    9f0e:	3b01      	subs	r3, #1
    9f10:	440a      	add	r2, r1
    9f12:	f811 4b01 	ldrb.w	r4, [r1], #1
    9f16:	428a      	cmp	r2, r1
    9f18:	f803 4f01 	strb.w	r4, [r3, #1]!
    9f1c:	d1f9      	bne.n	9f12 <memmove+0xaa>
    9f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9f20:	4603      	mov	r3, r0
    9f22:	e7f3      	b.n	9f0c <memmove+0xa4>
    9f24:	4603      	mov	r3, r0
    9f26:	e7f2      	b.n	9f0e <memmove+0xa6>
    9f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9f2a:	4672      	mov	r2, lr
    9f2c:	e7ee      	b.n	9f0c <memmove+0xa4>
    9f2e:	bf00      	nop

00009f30 <_realloc_r>:
    9f30:	2900      	cmp	r1, #0
    9f32:	f000 8094 	beq.w	a05e <_realloc_r+0x12e>
    9f36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9f3a:	460c      	mov	r4, r1
    9f3c:	4615      	mov	r5, r2
    9f3e:	b083      	sub	sp, #12
    9f40:	4680      	mov	r8, r0
    9f42:	f105 060b 	add.w	r6, r5, #11
    9f46:	f7fe fb1d 	bl	8584 <__malloc_lock>
    9f4a:	f854 ec04 	ldr.w	lr, [r4, #-4]
    9f4e:	2e16      	cmp	r6, #22
    9f50:	f02e 0703 	bic.w	r7, lr, #3
    9f54:	f1a4 0908 	sub.w	r9, r4, #8
    9f58:	d83c      	bhi.n	9fd4 <_realloc_r+0xa4>
    9f5a:	2210      	movs	r2, #16
    9f5c:	4616      	mov	r6, r2
    9f5e:	42b5      	cmp	r5, r6
    9f60:	d83d      	bhi.n	9fde <_realloc_r+0xae>
    9f62:	4297      	cmp	r7, r2
    9f64:	da43      	bge.n	9fee <_realloc_r+0xbe>
    9f66:	4bc6      	ldr	r3, [pc, #792]	; (a280 <_realloc_r+0x350>)
    9f68:	eb09 0007 	add.w	r0, r9, r7
    9f6c:	6899      	ldr	r1, [r3, #8]
    9f6e:	4288      	cmp	r0, r1
    9f70:	f000 80c3 	beq.w	a0fa <_realloc_r+0x1ca>
    9f74:	6843      	ldr	r3, [r0, #4]
    9f76:	f023 0101 	bic.w	r1, r3, #1
    9f7a:	4401      	add	r1, r0
    9f7c:	6849      	ldr	r1, [r1, #4]
    9f7e:	07c9      	lsls	r1, r1, #31
    9f80:	d54d      	bpl.n	a01e <_realloc_r+0xee>
    9f82:	f01e 0f01 	tst.w	lr, #1
    9f86:	f000 809b 	beq.w	a0c0 <_realloc_r+0x190>
    9f8a:	4629      	mov	r1, r5
    9f8c:	4640      	mov	r0, r8
    9f8e:	f7fe f811 	bl	7fb4 <_malloc_r>
    9f92:	4605      	mov	r5, r0
    9f94:	2800      	cmp	r0, #0
    9f96:	d03b      	beq.n	a010 <_realloc_r+0xe0>
    9f98:	f854 3c04 	ldr.w	r3, [r4, #-4]
    9f9c:	f1a0 0208 	sub.w	r2, r0, #8
    9fa0:	f023 0301 	bic.w	r3, r3, #1
    9fa4:	444b      	add	r3, r9
    9fa6:	429a      	cmp	r2, r3
    9fa8:	f000 812b 	beq.w	a202 <_realloc_r+0x2d2>
    9fac:	1f3a      	subs	r2, r7, #4
    9fae:	2a24      	cmp	r2, #36	; 0x24
    9fb0:	f200 8118 	bhi.w	a1e4 <_realloc_r+0x2b4>
    9fb4:	2a13      	cmp	r2, #19
    9fb6:	f200 80eb 	bhi.w	a190 <_realloc_r+0x260>
    9fba:	4603      	mov	r3, r0
    9fbc:	4622      	mov	r2, r4
    9fbe:	6811      	ldr	r1, [r2, #0]
    9fc0:	6019      	str	r1, [r3, #0]
    9fc2:	6851      	ldr	r1, [r2, #4]
    9fc4:	6059      	str	r1, [r3, #4]
    9fc6:	6892      	ldr	r2, [r2, #8]
    9fc8:	609a      	str	r2, [r3, #8]
    9fca:	4621      	mov	r1, r4
    9fcc:	4640      	mov	r0, r8
    9fce:	f7ff fdf5 	bl	9bbc <_free_r>
    9fd2:	e01d      	b.n	a010 <_realloc_r+0xe0>
    9fd4:	f026 0607 	bic.w	r6, r6, #7
    9fd8:	2e00      	cmp	r6, #0
    9fda:	4632      	mov	r2, r6
    9fdc:	dabf      	bge.n	9f5e <_realloc_r+0x2e>
    9fde:	2500      	movs	r5, #0
    9fe0:	230c      	movs	r3, #12
    9fe2:	4628      	mov	r0, r5
    9fe4:	f8c8 3000 	str.w	r3, [r8]
    9fe8:	b003      	add	sp, #12
    9fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9fee:	4625      	mov	r5, r4
    9ff0:	1bbb      	subs	r3, r7, r6
    9ff2:	2b0f      	cmp	r3, #15
    9ff4:	f8d9 2004 	ldr.w	r2, [r9, #4]
    9ff8:	d81d      	bhi.n	a036 <_realloc_r+0x106>
    9ffa:	f002 0201 	and.w	r2, r2, #1
    9ffe:	433a      	orrs	r2, r7
    a000:	eb09 0107 	add.w	r1, r9, r7
    a004:	f8c9 2004 	str.w	r2, [r9, #4]
    a008:	684b      	ldr	r3, [r1, #4]
    a00a:	f043 0301 	orr.w	r3, r3, #1
    a00e:	604b      	str	r3, [r1, #4]
    a010:	4640      	mov	r0, r8
    a012:	f7fe fabd 	bl	8590 <__malloc_unlock>
    a016:	4628      	mov	r0, r5
    a018:	b003      	add	sp, #12
    a01a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a01e:	f023 0303 	bic.w	r3, r3, #3
    a022:	18f9      	adds	r1, r7, r3
    a024:	4291      	cmp	r1, r2
    a026:	db1d      	blt.n	a064 <_realloc_r+0x134>
    a028:	68c3      	ldr	r3, [r0, #12]
    a02a:	6882      	ldr	r2, [r0, #8]
    a02c:	4625      	mov	r5, r4
    a02e:	60d3      	str	r3, [r2, #12]
    a030:	460f      	mov	r7, r1
    a032:	609a      	str	r2, [r3, #8]
    a034:	e7dc      	b.n	9ff0 <_realloc_r+0xc0>
    a036:	f002 0201 	and.w	r2, r2, #1
    a03a:	eb09 0106 	add.w	r1, r9, r6
    a03e:	f043 0301 	orr.w	r3, r3, #1
    a042:	4332      	orrs	r2, r6
    a044:	f8c9 2004 	str.w	r2, [r9, #4]
    a048:	444f      	add	r7, r9
    a04a:	604b      	str	r3, [r1, #4]
    a04c:	687b      	ldr	r3, [r7, #4]
    a04e:	3108      	adds	r1, #8
    a050:	f043 0301 	orr.w	r3, r3, #1
    a054:	607b      	str	r3, [r7, #4]
    a056:	4640      	mov	r0, r8
    a058:	f7ff fdb0 	bl	9bbc <_free_r>
    a05c:	e7d8      	b.n	a010 <_realloc_r+0xe0>
    a05e:	4611      	mov	r1, r2
    a060:	f7fd bfa8 	b.w	7fb4 <_malloc_r>
    a064:	f01e 0f01 	tst.w	lr, #1
    a068:	d18f      	bne.n	9f8a <_realloc_r+0x5a>
    a06a:	f854 1c08 	ldr.w	r1, [r4, #-8]
    a06e:	eba9 0a01 	sub.w	sl, r9, r1
    a072:	f8da 1004 	ldr.w	r1, [sl, #4]
    a076:	f021 0103 	bic.w	r1, r1, #3
    a07a:	440b      	add	r3, r1
    a07c:	443b      	add	r3, r7
    a07e:	4293      	cmp	r3, r2
    a080:	db26      	blt.n	a0d0 <_realloc_r+0x1a0>
    a082:	4655      	mov	r5, sl
    a084:	68c1      	ldr	r1, [r0, #12]
    a086:	6880      	ldr	r0, [r0, #8]
    a088:	1f3a      	subs	r2, r7, #4
    a08a:	60c1      	str	r1, [r0, #12]
    a08c:	6088      	str	r0, [r1, #8]
    a08e:	f855 0f08 	ldr.w	r0, [r5, #8]!
    a092:	f8da 100c 	ldr.w	r1, [sl, #12]
    a096:	2a24      	cmp	r2, #36	; 0x24
    a098:	60c1      	str	r1, [r0, #12]
    a09a:	6088      	str	r0, [r1, #8]
    a09c:	d826      	bhi.n	a0ec <_realloc_r+0x1bc>
    a09e:	2a13      	cmp	r2, #19
    a0a0:	f240 8081 	bls.w	a1a6 <_realloc_r+0x276>
    a0a4:	6821      	ldr	r1, [r4, #0]
    a0a6:	2a1b      	cmp	r2, #27
    a0a8:	f8ca 1008 	str.w	r1, [sl, #8]
    a0ac:	6861      	ldr	r1, [r4, #4]
    a0ae:	f8ca 100c 	str.w	r1, [sl, #12]
    a0b2:	f200 80ad 	bhi.w	a210 <_realloc_r+0x2e0>
    a0b6:	f104 0008 	add.w	r0, r4, #8
    a0ba:	f10a 0210 	add.w	r2, sl, #16
    a0be:	e074      	b.n	a1aa <_realloc_r+0x27a>
    a0c0:	f854 3c08 	ldr.w	r3, [r4, #-8]
    a0c4:	eba9 0a03 	sub.w	sl, r9, r3
    a0c8:	f8da 1004 	ldr.w	r1, [sl, #4]
    a0cc:	f021 0103 	bic.w	r1, r1, #3
    a0d0:	187b      	adds	r3, r7, r1
    a0d2:	4293      	cmp	r3, r2
    a0d4:	f6ff af59 	blt.w	9f8a <_realloc_r+0x5a>
    a0d8:	4655      	mov	r5, sl
    a0da:	f8da 100c 	ldr.w	r1, [sl, #12]
    a0de:	f855 0f08 	ldr.w	r0, [r5, #8]!
    a0e2:	1f3a      	subs	r2, r7, #4
    a0e4:	2a24      	cmp	r2, #36	; 0x24
    a0e6:	60c1      	str	r1, [r0, #12]
    a0e8:	6088      	str	r0, [r1, #8]
    a0ea:	d9d8      	bls.n	a09e <_realloc_r+0x16e>
    a0ec:	4621      	mov	r1, r4
    a0ee:	4628      	mov	r0, r5
    a0f0:	461f      	mov	r7, r3
    a0f2:	46d1      	mov	r9, sl
    a0f4:	f7ff feb8 	bl	9e68 <memmove>
    a0f8:	e77a      	b.n	9ff0 <_realloc_r+0xc0>
    a0fa:	6841      	ldr	r1, [r0, #4]
    a0fc:	f106 0010 	add.w	r0, r6, #16
    a100:	f021 0b03 	bic.w	fp, r1, #3
    a104:	44bb      	add	fp, r7
    a106:	4583      	cmp	fp, r0
    a108:	da58      	bge.n	a1bc <_realloc_r+0x28c>
    a10a:	f01e 0f01 	tst.w	lr, #1
    a10e:	f47f af3c 	bne.w	9f8a <_realloc_r+0x5a>
    a112:	f854 1c08 	ldr.w	r1, [r4, #-8]
    a116:	eba9 0a01 	sub.w	sl, r9, r1
    a11a:	f8da 1004 	ldr.w	r1, [sl, #4]
    a11e:	f021 0103 	bic.w	r1, r1, #3
    a122:	448b      	add	fp, r1
    a124:	4558      	cmp	r0, fp
    a126:	dcd3      	bgt.n	a0d0 <_realloc_r+0x1a0>
    a128:	4655      	mov	r5, sl
    a12a:	f8da 100c 	ldr.w	r1, [sl, #12]
    a12e:	f855 0f08 	ldr.w	r0, [r5, #8]!
    a132:	1f3a      	subs	r2, r7, #4
    a134:	2a24      	cmp	r2, #36	; 0x24
    a136:	60c1      	str	r1, [r0, #12]
    a138:	6088      	str	r0, [r1, #8]
    a13a:	f200 808d 	bhi.w	a258 <_realloc_r+0x328>
    a13e:	2a13      	cmp	r2, #19
    a140:	f240 8087 	bls.w	a252 <_realloc_r+0x322>
    a144:	6821      	ldr	r1, [r4, #0]
    a146:	2a1b      	cmp	r2, #27
    a148:	f8ca 1008 	str.w	r1, [sl, #8]
    a14c:	6861      	ldr	r1, [r4, #4]
    a14e:	f8ca 100c 	str.w	r1, [sl, #12]
    a152:	f200 8088 	bhi.w	a266 <_realloc_r+0x336>
    a156:	f104 0108 	add.w	r1, r4, #8
    a15a:	f10a 0210 	add.w	r2, sl, #16
    a15e:	6808      	ldr	r0, [r1, #0]
    a160:	6010      	str	r0, [r2, #0]
    a162:	6848      	ldr	r0, [r1, #4]
    a164:	6050      	str	r0, [r2, #4]
    a166:	6889      	ldr	r1, [r1, #8]
    a168:	6091      	str	r1, [r2, #8]
    a16a:	ebab 0206 	sub.w	r2, fp, r6
    a16e:	eb0a 0106 	add.w	r1, sl, r6
    a172:	f042 0201 	orr.w	r2, r2, #1
    a176:	6099      	str	r1, [r3, #8]
    a178:	604a      	str	r2, [r1, #4]
    a17a:	f8da 3004 	ldr.w	r3, [sl, #4]
    a17e:	4640      	mov	r0, r8
    a180:	f003 0301 	and.w	r3, r3, #1
    a184:	431e      	orrs	r6, r3
    a186:	f8ca 6004 	str.w	r6, [sl, #4]
    a18a:	f7fe fa01 	bl	8590 <__malloc_unlock>
    a18e:	e742      	b.n	a016 <_realloc_r+0xe6>
    a190:	6823      	ldr	r3, [r4, #0]
    a192:	2a1b      	cmp	r2, #27
    a194:	6003      	str	r3, [r0, #0]
    a196:	6863      	ldr	r3, [r4, #4]
    a198:	6043      	str	r3, [r0, #4]
    a19a:	d827      	bhi.n	a1ec <_realloc_r+0x2bc>
    a19c:	f100 0308 	add.w	r3, r0, #8
    a1a0:	f104 0208 	add.w	r2, r4, #8
    a1a4:	e70b      	b.n	9fbe <_realloc_r+0x8e>
    a1a6:	4620      	mov	r0, r4
    a1a8:	462a      	mov	r2, r5
    a1aa:	6801      	ldr	r1, [r0, #0]
    a1ac:	461f      	mov	r7, r3
    a1ae:	6011      	str	r1, [r2, #0]
    a1b0:	6841      	ldr	r1, [r0, #4]
    a1b2:	46d1      	mov	r9, sl
    a1b4:	6051      	str	r1, [r2, #4]
    a1b6:	6883      	ldr	r3, [r0, #8]
    a1b8:	6093      	str	r3, [r2, #8]
    a1ba:	e719      	b.n	9ff0 <_realloc_r+0xc0>
    a1bc:	ebab 0b06 	sub.w	fp, fp, r6
    a1c0:	eb09 0106 	add.w	r1, r9, r6
    a1c4:	f04b 0201 	orr.w	r2, fp, #1
    a1c8:	6099      	str	r1, [r3, #8]
    a1ca:	604a      	str	r2, [r1, #4]
    a1cc:	f854 3c04 	ldr.w	r3, [r4, #-4]
    a1d0:	4640      	mov	r0, r8
    a1d2:	f003 0301 	and.w	r3, r3, #1
    a1d6:	431e      	orrs	r6, r3
    a1d8:	f844 6c04 	str.w	r6, [r4, #-4]
    a1dc:	f7fe f9d8 	bl	8590 <__malloc_unlock>
    a1e0:	4625      	mov	r5, r4
    a1e2:	e718      	b.n	a016 <_realloc_r+0xe6>
    a1e4:	4621      	mov	r1, r4
    a1e6:	f7ff fe3f 	bl	9e68 <memmove>
    a1ea:	e6ee      	b.n	9fca <_realloc_r+0x9a>
    a1ec:	68a3      	ldr	r3, [r4, #8]
    a1ee:	2a24      	cmp	r2, #36	; 0x24
    a1f0:	6083      	str	r3, [r0, #8]
    a1f2:	68e3      	ldr	r3, [r4, #12]
    a1f4:	60c3      	str	r3, [r0, #12]
    a1f6:	d018      	beq.n	a22a <_realloc_r+0x2fa>
    a1f8:	f100 0310 	add.w	r3, r0, #16
    a1fc:	f104 0210 	add.w	r2, r4, #16
    a200:	e6dd      	b.n	9fbe <_realloc_r+0x8e>
    a202:	f850 3c04 	ldr.w	r3, [r0, #-4]
    a206:	4625      	mov	r5, r4
    a208:	f023 0303 	bic.w	r3, r3, #3
    a20c:	441f      	add	r7, r3
    a20e:	e6ef      	b.n	9ff0 <_realloc_r+0xc0>
    a210:	68a1      	ldr	r1, [r4, #8]
    a212:	2a24      	cmp	r2, #36	; 0x24
    a214:	f8ca 1010 	str.w	r1, [sl, #16]
    a218:	68e1      	ldr	r1, [r4, #12]
    a21a:	f8ca 1014 	str.w	r1, [sl, #20]
    a21e:	d00d      	beq.n	a23c <_realloc_r+0x30c>
    a220:	f104 0010 	add.w	r0, r4, #16
    a224:	f10a 0218 	add.w	r2, sl, #24
    a228:	e7bf      	b.n	a1aa <_realloc_r+0x27a>
    a22a:	6922      	ldr	r2, [r4, #16]
    a22c:	f100 0318 	add.w	r3, r0, #24
    a230:	6102      	str	r2, [r0, #16]
    a232:	6961      	ldr	r1, [r4, #20]
    a234:	f104 0218 	add.w	r2, r4, #24
    a238:	6141      	str	r1, [r0, #20]
    a23a:	e6c0      	b.n	9fbe <_realloc_r+0x8e>
    a23c:	6922      	ldr	r2, [r4, #16]
    a23e:	f104 0018 	add.w	r0, r4, #24
    a242:	f8ca 2018 	str.w	r2, [sl, #24]
    a246:	6961      	ldr	r1, [r4, #20]
    a248:	f10a 0220 	add.w	r2, sl, #32
    a24c:	f8ca 101c 	str.w	r1, [sl, #28]
    a250:	e7ab      	b.n	a1aa <_realloc_r+0x27a>
    a252:	4621      	mov	r1, r4
    a254:	462a      	mov	r2, r5
    a256:	e782      	b.n	a15e <_realloc_r+0x22e>
    a258:	4621      	mov	r1, r4
    a25a:	4628      	mov	r0, r5
    a25c:	9301      	str	r3, [sp, #4]
    a25e:	f7ff fe03 	bl	9e68 <memmove>
    a262:	9b01      	ldr	r3, [sp, #4]
    a264:	e781      	b.n	a16a <_realloc_r+0x23a>
    a266:	68a1      	ldr	r1, [r4, #8]
    a268:	2a24      	cmp	r2, #36	; 0x24
    a26a:	f8ca 1010 	str.w	r1, [sl, #16]
    a26e:	68e1      	ldr	r1, [r4, #12]
    a270:	f8ca 1014 	str.w	r1, [sl, #20]
    a274:	d006      	beq.n	a284 <_realloc_r+0x354>
    a276:	f104 0110 	add.w	r1, r4, #16
    a27a:	f10a 0218 	add.w	r2, sl, #24
    a27e:	e76e      	b.n	a15e <_realloc_r+0x22e>
    a280:	1000050c 	.word	0x1000050c
    a284:	6922      	ldr	r2, [r4, #16]
    a286:	f104 0118 	add.w	r1, r4, #24
    a28a:	f8ca 2018 	str.w	r2, [sl, #24]
    a28e:	6960      	ldr	r0, [r4, #20]
    a290:	f10a 0220 	add.w	r2, sl, #32
    a294:	f8ca 001c 	str.w	r0, [sl, #28]
    a298:	e761      	b.n	a15e <_realloc_r+0x22e>
    a29a:	bf00      	nop

0000a29c <cleanup_glue>:
    a29c:	b538      	push	{r3, r4, r5, lr}
    a29e:	460c      	mov	r4, r1
    a2a0:	6809      	ldr	r1, [r1, #0]
    a2a2:	4605      	mov	r5, r0
    a2a4:	b109      	cbz	r1, a2aa <cleanup_glue+0xe>
    a2a6:	f7ff fff9 	bl	a29c <cleanup_glue>
    a2aa:	4621      	mov	r1, r4
    a2ac:	4628      	mov	r0, r5
    a2ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    a2b2:	f7ff bc83 	b.w	9bbc <_free_r>
    a2b6:	bf00      	nop

0000a2b8 <_reclaim_reent>:
    a2b8:	4b20      	ldr	r3, [pc, #128]	; (a33c <_reclaim_reent+0x84>)
    a2ba:	681b      	ldr	r3, [r3, #0]
    a2bc:	4283      	cmp	r3, r0
    a2be:	d03c      	beq.n	a33a <_reclaim_reent+0x82>
    a2c0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    a2c2:	b570      	push	{r4, r5, r6, lr}
    a2c4:	4605      	mov	r5, r0
    a2c6:	b18b      	cbz	r3, a2ec <_reclaim_reent+0x34>
    a2c8:	2600      	movs	r6, #0
    a2ca:	5999      	ldr	r1, [r3, r6]
    a2cc:	b139      	cbz	r1, a2de <_reclaim_reent+0x26>
    a2ce:	680c      	ldr	r4, [r1, #0]
    a2d0:	4628      	mov	r0, r5
    a2d2:	f7ff fc73 	bl	9bbc <_free_r>
    a2d6:	4621      	mov	r1, r4
    a2d8:	2c00      	cmp	r4, #0
    a2da:	d1f8      	bne.n	a2ce <_reclaim_reent+0x16>
    a2dc:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    a2de:	3604      	adds	r6, #4
    a2e0:	2e80      	cmp	r6, #128	; 0x80
    a2e2:	d1f2      	bne.n	a2ca <_reclaim_reent+0x12>
    a2e4:	4619      	mov	r1, r3
    a2e6:	4628      	mov	r0, r5
    a2e8:	f7ff fc68 	bl	9bbc <_free_r>
    a2ec:	6c29      	ldr	r1, [r5, #64]	; 0x40
    a2ee:	b111      	cbz	r1, a2f6 <_reclaim_reent+0x3e>
    a2f0:	4628      	mov	r0, r5
    a2f2:	f7ff fc63 	bl	9bbc <_free_r>
    a2f6:	f8d5 1148 	ldr.w	r1, [r5, #328]	; 0x148
    a2fa:	b151      	cbz	r1, a312 <_reclaim_reent+0x5a>
    a2fc:	f505 76a6 	add.w	r6, r5, #332	; 0x14c
    a300:	42b1      	cmp	r1, r6
    a302:	d006      	beq.n	a312 <_reclaim_reent+0x5a>
    a304:	680c      	ldr	r4, [r1, #0]
    a306:	4628      	mov	r0, r5
    a308:	f7ff fc58 	bl	9bbc <_free_r>
    a30c:	42a6      	cmp	r6, r4
    a30e:	4621      	mov	r1, r4
    a310:	d1f8      	bne.n	a304 <_reclaim_reent+0x4c>
    a312:	6d69      	ldr	r1, [r5, #84]	; 0x54
    a314:	b111      	cbz	r1, a31c <_reclaim_reent+0x64>
    a316:	4628      	mov	r0, r5
    a318:	f7ff fc50 	bl	9bbc <_free_r>
    a31c:	6bab      	ldr	r3, [r5, #56]	; 0x38
    a31e:	b903      	cbnz	r3, a322 <_reclaim_reent+0x6a>
    a320:	bd70      	pop	{r4, r5, r6, pc}
    a322:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    a324:	4628      	mov	r0, r5
    a326:	4798      	blx	r3
    a328:	f8d5 12e0 	ldr.w	r1, [r5, #736]	; 0x2e0
    a32c:	2900      	cmp	r1, #0
    a32e:	d0f7      	beq.n	a320 <_reclaim_reent+0x68>
    a330:	4628      	mov	r0, r5
    a332:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a336:	f7ff bfb1 	b.w	a29c <cleanup_glue>
    a33a:	4770      	bx	lr
    a33c:	100000dc 	.word	0x100000dc

0000a340 <strcmp>:
    a340:	ea80 0c01 	eor.w	ip, r0, r1
    a344:	f01c 0f03 	tst.w	ip, #3
    a348:	d137      	bne.n	a3ba <strcmp+0x7a>
    a34a:	f010 0c03 	ands.w	ip, r0, #3
    a34e:	f020 0003 	bic.w	r0, r0, #3
    a352:	f021 0103 	bic.w	r1, r1, #3
    a356:	f850 2b04 	ldr.w	r2, [r0], #4
    a35a:	bf08      	it	eq
    a35c:	f851 3b04 	ldreq.w	r3, [r1], #4
    a360:	d00e      	beq.n	a380 <strcmp+0x40>
    a362:	f08c 0c03 	eor.w	ip, ip, #3
    a366:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    a36a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    a36e:	fa23 fc0c 	lsr.w	ip, r3, ip
    a372:	f851 3b04 	ldr.w	r3, [r1], #4
    a376:	ea42 020c 	orr.w	r2, r2, ip
    a37a:	ea43 030c 	orr.w	r3, r3, ip
    a37e:	bf00      	nop
    a380:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
    a384:	429a      	cmp	r2, r3
    a386:	bf01      	itttt	eq
    a388:	ea2c 0c02 	biceq.w	ip, ip, r2
    a38c:	f01c 3f80 	tsteq.w	ip, #2155905152	; 0x80808080
    a390:	f850 2b04 	ldreq.w	r2, [r0], #4
    a394:	f851 3b04 	ldreq.w	r3, [r1], #4
    a398:	d0f2      	beq.n	a380 <strcmp+0x40>
    a39a:	ea4f 6002 	mov.w	r0, r2, lsl #24
    a39e:	ea4f 2212 	mov.w	r2, r2, lsr #8
    a3a2:	2801      	cmp	r0, #1
    a3a4:	bf28      	it	cs
    a3a6:	ebb0 6f03 	cmpcs.w	r0, r3, lsl #24
    a3aa:	bf08      	it	eq
    a3ac:	0a1b      	lsreq	r3, r3, #8
    a3ae:	d0f4      	beq.n	a39a <strcmp+0x5a>
    a3b0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    a3b4:	0e00      	lsrs	r0, r0, #24
    a3b6:	1ac0      	subs	r0, r0, r3
    a3b8:	4770      	bx	lr
    a3ba:	f010 0f03 	tst.w	r0, #3
    a3be:	d00a      	beq.n	a3d6 <strcmp+0x96>
    a3c0:	f810 2b01 	ldrb.w	r2, [r0], #1
    a3c4:	f811 3b01 	ldrb.w	r3, [r1], #1
    a3c8:	2a01      	cmp	r2, #1
    a3ca:	bf28      	it	cs
    a3cc:	429a      	cmpcs	r2, r3
    a3ce:	d0f4      	beq.n	a3ba <strcmp+0x7a>
    a3d0:	eba2 0003 	sub.w	r0, r2, r3
    a3d4:	4770      	bx	lr
    a3d6:	f84d 5d04 	str.w	r5, [sp, #-4]!
    a3da:	f850 2b04 	ldr.w	r2, [r0], #4
    a3de:	f001 0503 	and.w	r5, r1, #3
    a3e2:	f021 0103 	bic.w	r1, r1, #3
    a3e6:	f851 3b04 	ldr.w	r3, [r1], #4
    a3ea:	2d02      	cmp	r5, #2
    a3ec:	d026      	beq.n	a43c <strcmp+0xfc>
    a3ee:	d84d      	bhi.n	a48c <strcmp+0x14c>
    a3f0:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
    a3f4:	ebb5 2f13 	cmp.w	r5, r3, lsr #8
    a3f8:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
    a3fc:	ea2c 0c02 	bic.w	ip, ip, r2
    a400:	d10d      	bne.n	a41e <strcmp+0xde>
    a402:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
    a406:	bf08      	it	eq
    a408:	f851 3b04 	ldreq.w	r3, [r1], #4
    a40c:	d10a      	bne.n	a424 <strcmp+0xe4>
    a40e:	ea85 0502 	eor.w	r5, r5, r2
    a412:	ebb5 6f03 	cmp.w	r5, r3, lsl #24
    a416:	d10c      	bne.n	a432 <strcmp+0xf2>
    a418:	f850 2b04 	ldr.w	r2, [r0], #4
    a41c:	e7e8      	b.n	a3f0 <strcmp+0xb0>
    a41e:	ea4f 2313 	mov.w	r3, r3, lsr #8
    a422:	e05b      	b.n	a4dc <strcmp+0x19c>
    a424:	f03c 4c7f 	bics.w	ip, ip, #4278190080	; 0xff000000
    a428:	d154      	bne.n	a4d4 <strcmp+0x194>
    a42a:	780b      	ldrb	r3, [r1, #0]
    a42c:	ea4f 6512 	mov.w	r5, r2, lsr #24
    a430:	e054      	b.n	a4dc <strcmp+0x19c>
    a432:	ea4f 6512 	mov.w	r5, r2, lsr #24
    a436:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    a43a:	e04f      	b.n	a4dc <strcmp+0x19c>
    a43c:	ea4f 4502 	mov.w	r5, r2, lsl #16
    a440:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
    a444:	ea4f 4515 	mov.w	r5, r5, lsr #16
    a448:	ea2c 0c02 	bic.w	ip, ip, r2
    a44c:	ebb5 4f13 	cmp.w	r5, r3, lsr #16
    a450:	d118      	bne.n	a484 <strcmp+0x144>
    a452:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
    a456:	bf08      	it	eq
    a458:	f851 3b04 	ldreq.w	r3, [r1], #4
    a45c:	d107      	bne.n	a46e <strcmp+0x12e>
    a45e:	ea85 0502 	eor.w	r5, r5, r2
    a462:	ebb5 4f03 	cmp.w	r5, r3, lsl #16
    a466:	d109      	bne.n	a47c <strcmp+0x13c>
    a468:	f850 2b04 	ldr.w	r2, [r0], #4
    a46c:	e7e6      	b.n	a43c <strcmp+0xfc>
    a46e:	ea5f 4c0c 	movs.w	ip, ip, lsl #16
    a472:	d12f      	bne.n	a4d4 <strcmp+0x194>
    a474:	880b      	ldrh	r3, [r1, #0]
    a476:	ea4f 4512 	mov.w	r5, r2, lsr #16
    a47a:	e02f      	b.n	a4dc <strcmp+0x19c>
    a47c:	ea4f 4303 	mov.w	r3, r3, lsl #16
    a480:	ea4f 4512 	mov.w	r5, r2, lsr #16
    a484:	ea4f 4313 	mov.w	r3, r3, lsr #16
    a488:	e028      	b.n	a4dc <strcmp+0x19c>
    a48a:	bf00      	nop
    a48c:	f002 05ff 	and.w	r5, r2, #255	; 0xff
    a490:	ebb5 6f13 	cmp.w	r5, r3, lsr #24
    a494:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
    a498:	ea2c 0c02 	bic.w	ip, ip, r2
    a49c:	d10d      	bne.n	a4ba <strcmp+0x17a>
    a49e:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
    a4a2:	bf08      	it	eq
    a4a4:	f851 3b04 	ldreq.w	r3, [r1], #4
    a4a8:	d10a      	bne.n	a4c0 <strcmp+0x180>
    a4aa:	ea85 0502 	eor.w	r5, r5, r2
    a4ae:	ebb5 2f03 	cmp.w	r5, r3, lsl #8
    a4b2:	d10a      	bne.n	a4ca <strcmp+0x18a>
    a4b4:	f850 2b04 	ldr.w	r2, [r0], #4
    a4b8:	e7e8      	b.n	a48c <strcmp+0x14c>
    a4ba:	ea4f 6313 	mov.w	r3, r3, lsr #24
    a4be:	e00d      	b.n	a4dc <strcmp+0x19c>
    a4c0:	f012 0fff 	tst.w	r2, #255	; 0xff
    a4c4:	d006      	beq.n	a4d4 <strcmp+0x194>
    a4c6:	f851 3b04 	ldr.w	r3, [r1], #4
    a4ca:	ea4f 2512 	mov.w	r5, r2, lsr #8
    a4ce:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    a4d2:	e003      	b.n	a4dc <strcmp+0x19c>
    a4d4:	f04f 0000 	mov.w	r0, #0
    a4d8:	bc20      	pop	{r5}
    a4da:	4770      	bx	lr
    a4dc:	f005 02ff 	and.w	r2, r5, #255	; 0xff
    a4e0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    a4e4:	2801      	cmp	r0, #1
    a4e6:	bf28      	it	cs
    a4e8:	4290      	cmpcs	r0, r2
    a4ea:	bf04      	itt	eq
    a4ec:	0a2d      	lsreq	r5, r5, #8
    a4ee:	0a1b      	lsreq	r3, r3, #8
    a4f0:	d0f4      	beq.n	a4dc <strcmp+0x19c>
    a4f2:	eba2 0000 	sub.w	r0, r2, r0
    a4f6:	bc20      	pop	{r5}
    a4f8:	4770      	bx	lr
    a4fa:	bf00      	nop

0000a4fc <_wctomb_r>:
    a4fc:	b430      	push	{r4, r5}
    a4fe:	4c06      	ldr	r4, [pc, #24]	; (a518 <_wctomb_r+0x1c>)
    a500:	4d06      	ldr	r5, [pc, #24]	; (a51c <_wctomb_r+0x20>)
    a502:	6824      	ldr	r4, [r4, #0]
    a504:	6b64      	ldr	r4, [r4, #52]	; 0x34
    a506:	2c00      	cmp	r4, #0
    a508:	bf08      	it	eq
    a50a:	462c      	moveq	r4, r5
    a50c:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
    a510:	46a4      	mov	ip, r4
    a512:	bc30      	pop	{r4, r5}
    a514:	4760      	bx	ip
    a516:	bf00      	nop
    a518:	100000dc 	.word	0x100000dc
    a51c:	1000091c 	.word	0x1000091c

0000a520 <__ascii_wctomb>:
    a520:	b119      	cbz	r1, a52a <__ascii_wctomb+0xa>
    a522:	2aff      	cmp	r2, #255	; 0xff
    a524:	d803      	bhi.n	a52e <__ascii_wctomb+0xe>
    a526:	700a      	strb	r2, [r1, #0]
    a528:	2101      	movs	r1, #1
    a52a:	4608      	mov	r0, r1
    a52c:	4770      	bx	lr
    a52e:	238a      	movs	r3, #138	; 0x8a
    a530:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a534:	6003      	str	r3, [r0, #0]
    a536:	e7f8      	b.n	a52a <__ascii_wctomb+0xa>

0000a538 <__aeabi_dcmpun>:
    a538:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    a53c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    a540:	d102      	bne.n	a548 <__aeabi_dcmpun+0x10>
    a542:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    a546:	d10a      	bne.n	a55e <__aeabi_dcmpun+0x26>
    a548:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    a54c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    a550:	d102      	bne.n	a558 <__aeabi_dcmpun+0x20>
    a552:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    a556:	d102      	bne.n	a55e <__aeabi_dcmpun+0x26>
    a558:	f04f 0000 	mov.w	r0, #0
    a55c:	4770      	bx	lr
    a55e:	f04f 0001 	mov.w	r0, #1
    a562:	4770      	bx	lr

0000a564 <__aeabi_d2iz>:
    a564:	ea4f 0241 	mov.w	r2, r1, lsl #1
    a568:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    a56c:	d215      	bcs.n	a59a <__aeabi_d2iz+0x36>
    a56e:	d511      	bpl.n	a594 <__aeabi_d2iz+0x30>
    a570:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    a574:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    a578:	d912      	bls.n	a5a0 <__aeabi_d2iz+0x3c>
    a57a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    a57e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    a582:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    a586:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    a58a:	fa23 f002 	lsr.w	r0, r3, r2
    a58e:	bf18      	it	ne
    a590:	4240      	negne	r0, r0
    a592:	4770      	bx	lr
    a594:	f04f 0000 	mov.w	r0, #0
    a598:	4770      	bx	lr
    a59a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    a59e:	d105      	bne.n	a5ac <__aeabi_d2iz+0x48>
    a5a0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    a5a4:	bf08      	it	eq
    a5a6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    a5aa:	4770      	bx	lr
    a5ac:	f04f 0000 	mov.w	r0, #0
    a5b0:	4770      	bx	lr
    a5b2:	bf00      	nop

0000a5b4 <_sbrk>:
    a5b4:	4a04      	ldr	r2, [pc, #16]	; (a5c8 <_sbrk+0x14>)
    a5b6:	4905      	ldr	r1, [pc, #20]	; (a5cc <_sbrk+0x18>)
    a5b8:	6813      	ldr	r3, [r2, #0]
    a5ba:	2b00      	cmp	r3, #0
    a5bc:	bf08      	it	eq
    a5be:	460b      	moveq	r3, r1
    a5c0:	4418      	add	r0, r3
    a5c2:	6010      	str	r0, [r2, #0]
    a5c4:	4618      	mov	r0, r3
    a5c6:	4770      	bx	lr
    a5c8:	100034c4 	.word	0x100034c4
    a5cc:	100034f0 	.word	0x100034f0

0000a5d0 <_exit>:
    a5d0:	e7fe      	b.n	a5d0 <_exit>
    a5d2:	bf00      	nop

0000a5d4 <_init>:
    a5d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a5d6:	bf00      	nop
    a5d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    a5da:	bc08      	pop	{r3}
    a5dc:	469e      	mov	lr, r3
    a5de:	4770      	bx	lr

0000a5e0 <_fini>:
    a5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a5e2:	bf00      	nop
    a5e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    a5e6:	bc08      	pop	{r3}
    a5e8:	469e      	mov	lr, r3
    a5ea:	4770      	bx	lr

0000a5ec <CSWTCH.217>:
    a5ec:	4252 4453 4449 454c 0900 6325 2509 0975     RBSDIDLE..%c.%u.
    a5fc:	7525 2509 0d75 000a 6d54 5172 5400 726d     %u.%u...TmrQ.Tmr
    a60c:	5320 6376 5300 4154 5452 0000 4554 5473      Svc.START..TEsT
    a61c:	4e49 0047 5400 7361 4d6b 746f 726f 5400     ING..TaskMotor.T
    a62c:	7361 536b 7265 6169 526c 6365 0076 6154     askSerialRecv.Ta
    a63c:	6b73 6553 6972 6c61 6553 646e 5400 7361     skSerialSend.Tas
    a64c:	476b 7461 6b65 6565 6570 0072 6154 6b73     kGatekeeper.Task
    a65c:	6f43 706d 7361 0073 6154 6b73 694c 6867     Compass.TaskLigh
    a66c:	0074 6154 6b73 7250 7365 7573 6572 5400     t.TaskPressure.T
    a67c:	7361 486b 6d75 6469 7469 0079               askHumidity.

0000a688 <CSWTCH.15>:
    a688:	0001 0002 0004 0008 0080 0100 0200          ..............

0000a696 <CSWTCH.20>:
    a696:	4101 1081                                        .A.

0000a699 <CSWTCH.31>:
    a699:	4010 0080                                        .@.

0000a69c <CSWTCH.5>:
    a69c:	c000 2009 c020 2009 c040 2009 c060 2009     ...  .. @.. `.. 
    a6ac:	c080 2009                                   ... 

0000a6b0 <CSWTCH.7>:
    a6b0:	c000 2009 c020 2009 c040 2009 c060 2009     ...  .. @.. `.. 
    a6c0:	c080 2009                                   ... 

0000a6c4 <CSWTCH.9>:
    a6c4:	c000 2009 c020 2009 c040 2009 c060 2009     ...  .. @.. `.. 
    a6d4:	c080 2009                                   ... 

0000a6d8 <_global_impure_ptr>:
    a6d8:	00e0 1000 4e49 0046 6e69 0066 414e 004e     ....INF.inf.NAN.
    a6e8:	616e 006e 3130 3332 3534 3736 3938 4241     nan.0123456789AB
    a6f8:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
    a708:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
    a718:	296c 0000 0030 0000                         l)..0...

0000a720 <blanks.7228>:
    a720:	2020 2020 2020 2020 2020 2020 2020 2020                     

0000a730 <zeroes.7229>:
    a730:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
    a740:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.

0000a750 <__mprec_bigtens>:
    a750:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
    a760:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
    a770:	bf3c 7f73 4fdd 7515                         <.s..O.u

0000a778 <__mprec_tens>:
    a778:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
    a788:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
    a798:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
    a7a8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
    a7b8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
    a7c8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
    a7d8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
    a7e8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
    a7f8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
    a808:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
    a818:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
    a828:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
    a838:	9db4 79d9 7843 44ea                         ...yCx.D

0000a840 <__mprec_tinytens>:
    a840:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
    a850:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
    a860:	6f43 64ac 0628 0ac8                         Co.d(...

0000a868 <p05.6060>:
    a868:	0005 0000 0019 0000 007d 0000               ........}...

0000a874 <blanks.7208>:
    a874:	2020 2020 2020 2020 2020 2020 2020 2020                     

0000a884 <zeroes.7209>:
    a884:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
    a894:	0043 0000 4f50 4953 0058 0000 002e 0000     C...POSIX.......

0000a8a4 <_ctype_>:
    a8a4:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
    a8b4:	2020 2020 2020 2020 2020 2020 2020 2020                     
    a8c4:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
    a8d4:	0410 0404 0404 0404 0404 1004 1010 1010     ................
    a8e4:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
    a8f4:	0101 0101 0101 0101 0101 0101 1010 1010     ................
    a904:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
    a914:	0202 0202 0202 0202 0202 0202 1010 1010     ................
    a924:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0000a9a8 <__EH_FRAME_BEGIN__>:
    a9a8:	0000 0000                                   ....
